name: dependabot-smart-automerge

on:
  pull_request:
    types: [opened, synchronize, reopened]
  check_suite:
    types: [completed]
  schedule:
    - cron: "*/10 * * * *"
  workflow_dispatch:

permissions:
  contents: write
  pull-requests: write
  checks: read

jobs:
  smart-automerge:
    name: Smart Auto-merge Dependabot PRs
    runs-on: ubuntu-latest
    if: github.actor == 'dependabot[bot]' || github.event_name == 'schedule'

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Smart merge with comprehensive test checking
        run: |
          echo "ü§ñ Smart processing of Dependabot PRs..."

          # Get all open Dependabot PRs
          gh pr list --author "app/dependabot" --json number,title | while read -r line; do
            pr_number=$(echo "$line" | grep -o '"number":[0-9]*' | cut -d':' -f2)

            if [[ -n "$pr_number" ]]; then
              echo "üîç Analyzing PR #$pr_number..."

              # Get comprehensive status
              pr_status=$(gh pr view $pr_number --json statusCheckRollup,autoMergeRequest,mergeable,reviewDecision)

              # Count different types of check results
              total_checks=$(echo "$pr_status" | grep -o '"conclusion":"[^"]*"' | wc -l)
              success_checks=$(echo "$pr_status" | grep -c '"conclusion":"SUCCESS"' || echo "0")
              neutral_checks=$(echo "$pr_status" | grep -c '"conclusion":"NEUTRAL"' || echo "0")
              skipped_checks=$(echo "$pr_status" | grep -c '"conclusion":"SKIPPED"' || echo "0")
              failure_checks=$(echo "$pr_status" | grep -c '"conclusion":"FAILURE"' || echo "0")
              pending_checks=$(echo "$pr_status" | grep -c '"conclusion":"PENDING"' || echo "0")

              passed_checks=$((success_checks + neutral_checks + skipped_checks))

              echo "PR #$pr_number: Total=$total_checks, Passed=$passed_checks, Failed=$failure_checks, Pending=$pending_checks"

              # Determine if PR is ready for merge
              if [[ $failure_checks -eq 0 && $pending_checks -eq 0 && $total_checks -gt 0 ]]; then
                echo "‚úÖ All checks completed successfully for PR #$pr_number"

                # Check merge status
                mergeable=$(echo "$pr_status" | grep -o '"mergeable":"[^"]*"' | cut -d'"' -f4)
                auto_merge=$(echo "$pr_status" | grep -o '"autoMergeRequest":[^}]*')

                # Enable auto-merge if not already enabled
                if [[ "$auto_merge" == *"null"* || -z "$auto_merge" ]]; then
                  echo "‚ö° Enabling auto-merge for PR #$pr_number"
                  gh pr merge $pr_number --auto --squash --delete-branch || echo "‚ö†Ô∏è Auto-merge setup failed"
                fi

                # Try immediate merge if everything is ready
                if [[ "$mergeable" == "MERGEABLE" ]]; then
                  echo "üöÄ Attempting immediate merge for PR #$pr_number"
                  if gh pr merge $pr_number --squash --delete-branch --admin; then
                    echo "‚úÖ Successfully merged PR #$pr_number"
                  else
                    echo "‚ö†Ô∏è Immediate merge failed, auto-merge will handle it"
                  fi
                fi
              elif [[ $failure_checks -gt 0 ]]; then
                echo "‚ùå PR #$pr_number has $failure_checks failed checks - skipping"
              else
                echo "‚è≥ PR #$pr_number has $pending_checks pending checks - waiting"
              fi
            fi
          done

        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
