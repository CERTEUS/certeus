+=============================================================+
|                       CERTEUS ‚Äî HEART                        |
+=============================================================+
CERTEUS PACK ‚Äî Context for AI assistants (Claude/GPT/Gemini).
PL: Pliki repo sƒÖ oddzielone '===== FILE: ‚Ä¶ ====='.
EN: Files are delimited by '===== FILE: ‚Ä¶ ====='.
Guidance: read sequentially; do not assume missing files exist; respect file boundaries.



===== FILE: .github/ISSUE_TEMPLATE/refutation_ticket.md =====
```text
# Refutation ticket

Opis kontrprzypadku...

```


===== FILE: .github/pull_request_template.md =====
```text
<!--
+======================================================================+
|                           CERTEUS ‚Äî PR Template                      |
+======================================================================+
| ROLA / ROLE:                                                         |
|  PL: Lista kontrolna PR ‚Äî najpierw README, potem kod.                |
|  EN: Pull Request checklist ‚Äî README first, then code.               |
+======================================================================+
-->

## Cel / Purpose
<!-- Kr√≥tko: co i dlaczego. -->

## Zakres / Scope
<!-- Pliki/modu≈Çy, bez lania wody. -->

### Checklista jako≈õci / Quality Checklist

- [ ] **Przeczyta≈Çem README.md (struktura, standard, CI).**
      I read the repository README (structure, coding standard, CI).
      `F:/projekty/certeus/README.md`
- [ ] Baner ASCII + PL/EN **docstring** w ka≈ºdym nowym/zmienionym pliku.
- [ ] **Lint/format/testy** lokalnie zielone:
      ```
      uv run ruff check .; if ($LASTEXITCODE -eq 0) { uv run pytest -q }
      ```
- [ ] **Nie zmienia≈Çem port√≥w** ani ≈õcie≈ºek serwowania (`/app`, `/static`).
- [ ] UI: zachowana paleta (bia≈Çy/czarny/ciemnoszary/antracyt) i i18n PL/EN.
- [ ] Endpoints `/v1/ingest /v1/preview /v1/analyze /v1/export` **bez regresji**.
- [ ] Adaptery: je≈õli dotyczy ‚Äî **kontrakty** nietkniƒôte, stuby/testy dodane.
- [ ] Windows: w razie problem√≥w z linkami u≈ºyto `UV_LINK_MODE=copy`.
- [ ] Proof Gate/CI przechodzi (tests.yml, proof-gate.yml, ui-smoke).

### Dowody/artefakty / Evidence & Artifacts
<!-- Zrzuty ekranu UI, link do artefakt√≥w CI, skr√≥t log√≥w test√≥w. -->

### Ryzyko / Risk
<!-- Co mo≈ºe p√≥j≈õƒá nie tak i jak to mitigowaƒá. -->

### Notatki / Notes
<!-- Drobiazgi, kt√≥re pomogƒÖ w review. -->

```


===== FILE: .github/workflows/proof-gate.yml =====
```text
# +=====================================================================+
# |                              CERTEUS                                |
# +=====================================================================+
# | FILE: .github/workflows/proof-gate.yml                              |
# | ROLE: CI Proof Gate: lint/tests + policy validation + bundle verify |
# +=====================================================================+

name: Proof Gate

on:
  pull_request:
    branches: [ main, develop ]
  push:
    branches: [ develop ]

jobs:
  proof-gate:
    runs-on: ubuntu-latest
    timeout-minutes: 25

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python + uv
        uses: astral-sh/setup-uv@v3
        with:
          python-version: "3.11"

      - name: Install deps
        run: |
          uv sync --all-extras --dev

      - name: Lint (Ruff)
        run: |
          uv run ruff check --select I --fix .
          uv run ruff check .

      - name: Tests (Pytest)
        env:
          PYTHONWARNINGS: "error,default::DeprecationWarning"
        run: |
          uv run pytest -q

      - name: Validate Policy Pack (--strict)
        run: |
          uv run python scripts/validate_policy_pack.py \
            --schema policies/pco/policy_pack.schema.v0.1.json \
            --pack   policies/pco/policy_pack.v0.1.yaml \
            --format text --strict --list-use-cases

      - name: Verify public bundle (Merkle + Ed25519)
        env:
          PCO_JWKS_B64URL: ${{ secrets.PCO_JWKS_B64URL }}
        run: |
          uv run python scripts/verify_bundle.py \
            --rid demo-001 \
            --bundle-dir ./data/public_pco \
            --pub-b64url "$PCO_JWKS_B64URL"

```


===== FILE: .github/workflows/release.yml =====
```text
name: release
on: {push: {tags: ['v*']}}
jobs: {}

```


===== FILE: .github/workflows/security-scan.yml =====
```text
# +=====================================================================+
# |                              CERTEUS                                |
# +=====================================================================+
# | FILE:   .github/workflows/security-scan.yml                         |
# | ROLE:   Security scans (CodeQL + deps SBOM)                         |
# | DATE:   2025-08-17                                                  |
# +=====================================================================+

name: security-scan

on:
  schedule:
    - cron: "0 3 * * 1"
  workflow_dispatch:

permissions:
  contents: read

jobs:
  codeql:
    name: CodeQL (Python)
    runs-on: ubuntu-latest
    permissions:
      security-events: write
      contents: read
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Init CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: python
      - name: Autobuild
        uses: github/codeql-action/autobuild@v3
      - name: Analyze
        uses: github/codeql-action/analyze@v3

  deps-sbom:
    name: Dependencies SBOM
    runs-on: ubuntu-latest
    permissions:
      contents: read
      actions: read
      security-events: write
    steps:
      - uses: actions/checkout@v4
      - uses: astral-sh/setup-uv@v1
      - name: Sync deps
        run: uv sync
      - name: CycloneDX SBOM (JSON)
        run: |
          uv run python -m pip install cyclonedx-bom
          cyclonedx-py --format json --output sbom.json
      - name: Upload SBOM
        uses: actions/upload-artifact@v4
        with:
          name: sbom-cyclonedx-json
          path: sbom.json

```


===== FILE: .github/workflows/tests.yml =====
```text
# +======================================================================+
# |                               CERTEUS                                |
# +======================================================================+
# | FILE / PLIK: .github/workflows/tests.yml                             |
# | ROLA / ROLE:                                                          |
# |  PL: Lint (Ruff) + Format (check) + Pytest (+ JUnit artefakt)        |
# |  EN: Ruff lint + format (check) + Pytest (+ JUnit artifact)          |
# +======================================================================+

name: Tests

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

permissions:
  contents: read

concurrency:
  group: tests-${{ github.ref }}
  cancel-in-progress: true

env:
  PYTHON_VERSION: "3.11"
  UV_LINK_MODE: copy            # stabilniej na CI
  PYTEST_JUNIT_XML: reports/junit.xml

jobs:
  tests:
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
      - name: üßæ Checkout
        uses: actions/checkout@v4

      - name: üêç Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: üì¶ Install uv
        run: |
          python -m pip install -U pip uv
          uv --version

      - name: üîß Sync dependencies
        run: |
          # Prefer uv; if it fails (np. chwilowy b≈ÇƒÖd indeksu) ‚Äì fallback do pip
          uv sync || python -m pip install -e ".[dev]"

      - name: üîç Ruff (lint)
        run: |
          uv run ruff check .

      - name: üé® Ruff (format --check)
        run: |
          uv run ruff format --check

      - name: üß™ Pytest (JUnit report)
        run: |
          mkdir -p "$(dirname "$PYTEST_JUNIT_XML")"
          uv run pytest -q --junitxml="$PYTEST_JUNIT_XML"

      - name: üì§ Upload test report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: junit-${{ github.sha }}
          path: ${{ env.PYTEST_JUNIT_XML }}
          if-no-files-found: warn

```


===== FILE: .github/workflows/ui-smoke.yml =====
```text
name: UI Smoke

on:
  push:
    branches: ["**"]
  pull_request:

permissions:
  contents: read

jobs:
  ui-smoke:
    name: Validate UI (HTML/CSS/links)
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Smoke-check proof_visualizer
        run: |
          python - <<'PY'
          import os, sys
          from html.parser import HTMLParser
          from urllib.parse import urlparse

          INDEX = os.path.join("clients", "web", "proof_visualizer", "index.html")

          # 1) Plik istnieje i wyglƒÖda na HTML
          if not os.path.exists(INDEX):
              print(f"ERROR: {INDEX} not found", file=sys.stderr)
              sys.exit(1)
          txt = open(INDEX, "r", encoding="utf-8", errors="ignore").read()
          if "<html" not in txt.lower():
              print("ERROR: index.html missing <html> tag", file=sys.stderr)
              sys.exit(1)
          if len(txt.strip()) < 100:
              print("ERROR: index.html seems too small (<100 bytes)", file=sys.stderr)
              sys.exit(1)

          # 2) Zbierz href/src i sprawd≈∫ tylko linki wzglƒôdne (ostrze≈ºenie, nie fail)
          class RefParser(HTMLParser):
              def __init__(self):
                  super().__init__()
                  self.refs = []
              def handle_starttag(self, tag, attrs):
                  for k, v in attrs:
                      if k in ("href", "src") and v:
                          self.refs.append(v)

          parser = RefParser()
          parser.feed(txt)

          base = os.path.dirname(INDEX)
          missing = []
          for href in parser.refs:
              u = urlparse(href)
              if u.scheme or href.startswith("#") or href.startswith("/") or href.startswith("data:"):
                  continue  # zewnƒôtrzne/absolutne/anchory ‚Äì pomijamy
              path = os.path.normpath(os.path.join(base, href))
              if not os.path.exists(path):
                  missing.append(href)

          if missing:
              print("WARNING: Missing local assets referenced by index.html:")
              for m in missing:
                  print(" -", m)
          else:
              print("OK: all local asset references resolve.")

          print("UI smoke OK: index.html present and syntactically plausible.")
          PY

```


===== FILE: architectus/axiom_modulator/README.md =====
```text
axiom_modulator ‚Äì stub

```


===== FILE: architectus/ethical_oracle/README.md =====
```text
ethical_oracle ‚Äì stub

```


===== FILE: architectus/instrumentation_bridge/README.md =====
```text
instrumentation_bridge ‚Äì stub

```


===== FILE: architectus/simulation_substrate/README.md =====
```text
simulation_substrate ‚Äì stub

```


===== FILE: cje/dissensus/ranking.py =====
```text
# +=====================================================================+
# |                          CERTEUS                                    |
# +=====================================================================+
# | MODULE:  F:/projekty/certeus/cje/dissensus/ranking.py                |
# | DATE:    2025-08-17                                                  |
# +=====================================================================+


# +-------------------------------------------------------------+

# |                          CERTEUS                            |

# +-------------------------------------------------------------+

# | FILE: cje/dissensus/ranking.py                            |

# | ROLE: Project module.                                       |

# | PLIK: cje/dissensus/ranking.py                            |

# | ROLA: Modu≈Ç projektu.                                       |

# +-------------------------------------------------------------+


"""



PL: Modu≈Ç CERTEUS ‚Äì uzupe≈Çnij opis funkcjonalny.



EN: CERTEUS module ‚Äì please complete the functional description.



"""


# +-------------------------------------------------------------+


# |                          CERTEUS                            |


# +-------------------------------------------------------------+


# | FILE: cje/dissensus/ranking.py                            |


# | ROLE: Project module.                                       |


# | PLIK: cje/dissensus/ranking.py                            |


# | ROLA: Modu≈Ç projektu.                                       |


# +-------------------------------------------------------------+


def rank(options):
    return sorted(options)

```


===== FILE: clients/cli/certeus_cli.py =====
```text
# +=====================================================================+
# |                          CERTEUS                                    |
# +=====================================================================+
# | MODULE:  F:/projekty/certeus/clients/cli/certeus_cli.py              |
# | DATE:    2025-08-17                                                  |
# +=====================================================================+


# +-------------------------------------------------------------+

# |                          CERTEUS                            |

# +-------------------------------------------------------------+

# | FILE: clients/cli/certeus_cli.py                          |

# | ROLE: Project module.                                       |

# | PLIK: clients/cli/certeus_cli.py                          |

# | ROLA: Modu≈Ç projektu.                                       |

# +-------------------------------------------------------------+


"""



PL: Modu≈Ç CERTEUS ‚Äì uzupe≈Çnij opis funkcjonalny.



EN: CERTEUS module ‚Äì please complete the functional description.



"""


# +-------------------------------------------------------------+


# |                          CERTEUS                            |


# +-------------------------------------------------------------+


# | FILE: clients/cli/certeus_cli.py                          |


# | ROLE: Project module.                                       |


# | PLIK: clients/cli/certeus_cli.py                          |


# | ROLA: Modu≈Ç projektu.                                       |


# +-------------------------------------------------------------+


def main():
    print("CERTEUS CLI ‚Äì stub")


if __name__ == "__main__":
    main()

```


===== FILE: clients/vscode-plugin/README.md =====
```text
Nexus::Verify ‚Äì szkic.

```


===== FILE: clients/web/mismatch_console/README.md =====
```text
Mismatch Console ‚Äì szkic.

```


===== FILE: clients/web/mismatch_console/index.html =====
```text
<!DOCTYPE html>
<html lang="pl">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1" />
  <title>CERTEUS ‚Äî Konsola Niezgodno≈õci (HITL)</title>

  <!--
  +=====================================================================+
  |                              CERTEUS                               |
  |                     Mismatch Console (HITL)                        |
  +=====================================================================+
  | FILE: clients/web/mismatch_console/index.html                      |
  | ROLE: Human-in-the-Loop console for solver mismatch tickets        |
  | DESC: Lists tickets, shows stats, allows resolve/escalate actions. |
  +=====================================================================+
  -->

  <style>
    /* ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ */
    /* RESET & BASE                                                     */
    /* ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ */
    *, *::before, *::after { box-sizing: border-box; }
    html, body { margin: 0; padding: 0; }
    body {
      font-family: system-ui, -apple-system, Segoe UI, Roboto, Ubuntu, Cantarell, Noto Sans, Arial, "Apple Color Emoji", "Segoe UI Emoji";
      background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
      min-height: 100vh;
      color: #1c1e21;
    }

    /* ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ */
    /* LAYOUT                                                           */
    /* ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ */
    .container {
      max-width: 1400px;
      margin: 24px auto;
      background: #fff;
      border-radius: 14px;
      overflow: hidden;
      box-shadow: 0 24px 60px rgba(0,0,0,0.28);
    }

    .header {
      background: linear-gradient(135deg, #d32f2f 0%, #f44336 100%);
      color: #fff;
      padding: 28px 32px;
      position: relative;
    }
    .header h1 {
      margin: 0 0 6px 0;
      font-size: 2.1rem;
      letter-spacing: 0.3px;
      text-shadow: 1px 1px 1px rgba(0,0,0,0.25);
    }
    .header p { margin: 0; opacity: 0.95; }
    .alert-icon {
      position: absolute; right: 24px; top: 18px; font-size: 48px;
      animation: pulse 1.8s infinite;
    }
    @keyframes pulse { 0%,100%{ transform: scale(1);} 50%{transform: scale(1.12);} }

    .stats-bar {
      display: grid;
      grid-template-columns: repeat(4, 1fr);
      gap: 12px;
      background: #fafafa;
      border-bottom: 1px solid #e9e9e9;
      padding: 16px 24px;
    }
    .stat {
      background: #fff;
      border: 1px solid #eee;
      border-radius: 10px;
      padding: 14px;
      text-align: center;
      box-shadow: 0 1px 2px rgba(0,0,0,0.03);
    }
    .stat .value { font-size: 1.8rem; font-weight: 800; color: #4267B2; }
    .stat .label { margin-top: 4px; font-size: 0.85rem; text-transform: uppercase; color: #666; }

    .controls {
      display: flex; gap: 12px; justify-content: space-between; align-items: center;
      padding: 14px 24px; background: #fff; border-bottom: 1px solid #eee;
    }
    .filters { display: flex; gap: 12px; flex-wrap: wrap; align-items: center; }
    .filters label { font-size: 0.9rem; color: #444; }
    select, input[type="text"], input[type="number"] {
      padding: 8px 10px; border: 1px solid #ddd; border-radius: 8px; background: #fff;
    }
    .btn {
      border: none; border-radius: 8px; padding: 10px 16px; cursor: pointer; font-weight: 700;
      background: #4267B2; color: #fff; transition: transform .1s ease, box-shadow .2s ease, background .2s ease;
    }
    .btn:hover { transform: translateY(-1px); box-shadow: 0 6px 16px rgba(66,103,178,0.28); background: #365899; }
    .btn.secondary { background: #0084ff; } .btn.secondary:hover { background: #006dda; }
    .btn.neutral { background: #757575; } .btn.neutral:hover { background: #616161; }
    .btn.warn { background: #ef6c00; } .btn.warn:hover { background: #e65100; }

    .table-wrap { position: relative; padding: 22px 24px; background: #fff; }
    table {
      width: 100%; border-collapse: separate; border-spacing: 0; overflow: hidden;
      background: #fff; border: 1px solid #eee; border-radius: 10px;
      box-shadow: 0 2px 12px rgba(0,0,0,0.06);
    }
    thead { background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); color:#fff; }
    th, td { padding: 12px 14px; text-align: left; vertical-align: top; }
    th { font-weight: 700; font-size: 0.85rem; letter-spacing: 0.3px; text-transform: uppercase; }
    tbody tr { background: #fff; transition: background .15s ease; }
    tbody tr:hover { background: #f8f9fd; }
    .mono {
      background: #263238; color: #c3e88d; padding: 10px 12px; border-radius: 8px;
      font-family: ui-monospace, SFMono-Regular, Menlo, Monaco, Consolas, "Liberation Mono", monospace;
      font-size: 12.5px; white-space: pre-wrap; word-wrap: break-word; line-height: 1.25; max-width: 460px;
    }

    .badge {
      display: inline-block; padding: 4px 10px; border-radius: 999px;
      font-size: 0.75rem; font-weight: 800; letter-spacing: .2px;
    }
    .priority-critical { background: #ffebee; color: #c62828; }
    .priority-high { background: #fff3e0; color: #e65100; }
    .priority-medium { background: #fff8e1; color: #f57c00; }
    .priority-low { background: #e8f5e9; color: #2e7d32; }

    .status-open { background: #e3f2fd; color: #1565c0; }
    .status-under_review { background: #fce4ec; color: #c2185b; }
    .status-resolved { background: #e8f5e9; color: #2e7d32; }
    .status-escalated { background: #fff8e1; color: #f57c00; }
    .status-closed { background: #eceff1; color: #455a64; }

    .loading-overlay {
      position: absolute; inset: 0; background: rgba(255,255,255,0.9);
      display: none; align-items: center; justify-content: center; z-index: 10;
    }
    .loading-overlay.active { display: flex; }
    .spinner {
      width: 46px; height: 46px; border-radius: 50%;
      border: 4px solid #e0e0e0; border-top-color: #4267B2; animation: spin 1s linear infinite;
    }
    @keyframes spin { to { transform: rotate(360deg); } }

    .toolbar { display: flex; gap: 8px; flex-wrap: wrap; }

    /* ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ */
    /* MODALS                                                          */
    /* ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ */
    .modal {
      position: fixed; inset: 0; background: rgba(0,0,0,0.55);
      display: none; align-items: center; justify-content: center; z-index: 100;
      padding: 18px;
    }
    .modal.active { display: flex; }
    .modal-card {
      width: min(680px, 96vw); max-height: 86vh; overflow: auto;
      background: #fff; border-radius: 14px; padding: 18px 18px 20px;
      box-shadow: 0 24px 68px rgba(0,0,0,0.35); animation: slideIn .18s ease;
    }
    @keyframes slideIn { from { transform: translateY(-18px); opacity: 0; } to { transform: translateY(0); opacity: 1; } }
    .modal-header { padding: 6px 6px 12px 6px; border-bottom: 1px solid #eee; margin-bottom: 16px; }
    .modal-header h2 { margin: 0; }
    .form { display: grid; gap: 12px; }
    .form .row { display: grid; gap: 8px; }
    .form label { font-weight: 700; font-size: 0.95rem; }
    .form textarea, .form select, .form input[type="text"], .form input[type="number"] {
      width: 100%; padding: 9px 10px; border: 1px solid #ddd; border-radius: 8px; resize: vertical;
    }
    .modal-actions { display: flex; gap: 10px; justify-content: flex-end; margin-top: 8px; }
    .hint { color: #6b7280; font-size: 0.85rem; }

    /* ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ */
    /* RESPONSIVE                                                      */
    /* ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ */
    @media (max-width: 900px) {
      .stats-bar { grid-template-columns: repeat(2, 1fr); }
      .mono { max-width: 280px; }
    }
    @media (max-width: 640px) {
      .stats-bar { grid-template-columns: 1fr; }
      .controls { flex-direction: column; align-items: stretch; gap: 10px; }
    }
  </style>
</head>
<body>
  <div class="container">
    <!-- ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ -->
    <!-- HEADER                                                        -->
    <!-- ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ -->
    <div class="header">
      <div class="alert-icon">üö®</div>
      <h1>CERTEUS ‚Äî Konsola Niezgodno≈õci</h1>
      <p>Human-In-The-Loop (HITL) ¬∑ RozwiƒÖzywanie konflikt√≥w solver√≥w SMT</p>
    </div>

    <!-- ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ -->
    <!-- STATS BAR                                                     -->
    <!-- ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ -->
    <div class="stats-bar">
      <div class="stat">
        <div class="value" id="stat-total">0</div>
        <div class="label">Wszystkie bilety</div>
      </div>
      <div class="stat">
        <div class="value" id="stat-open">0</div>
        <div class="label">Otwarte</div>
      </div>
      <div class="stat">
        <div class="value" id="stat-review">0</div>
        <div class="label">W trakcie</div>
      </div>
      <div class="stat">
        <div class="value" id="stat-resolved">0</div>
        <div class="label">RozwiƒÖzane</div>
      </div>
    </div>

    <!-- ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ -->
    <!-- CONTROLS                                                      -->
    <!-- ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ -->
    <div class="controls">
      <div class="filters">
        <label for="filter-status">Status:</label>
        <select id="filter-status">
          <option value="">Wszystkie</option>
          <option value="open">Otwarte</option>
          <option value="under_review">W trakcie</option>
          <option value="resolved">RozwiƒÖzane</option>
          <option value="escalated">Eskalowane</option>
          <option value="closed">Zamkniƒôte</option>
        </select>

        <label for="filter-priority">Priorytet:</label>
        <select id="filter-priority">
          <option value="">Wszystkie</option>
          <option value="critical">Krytyczny</option>
          <option value="high">Wysoki</option>
          <option value="medium">≈öredni</option>
          <option value="low">Niski</option>
        </select>
      </div>

      <div class="toolbar">
        <button class="btn secondary" id="btn-refresh" title="Od≈õwie≈º (Alt+R)">üîÑ Od≈õwie≈º</button>
      </div>
    </div>

    <!-- ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ -->
    <!-- TABLE                                                         -->
    <!-- ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ -->
    <div class="table-wrap">
      <div class="loading-overlay" id="loading"><div class="spinner"></div></div>
      <table id="tickets">
        <thead>
          <tr>
            <th>ID Biletu</th>
            <th>ID Sprawy</th>
            <th>Priorytet</th>
            <th>Status</th>
            <th>Formu≈Ça</th>
            <th>Niezgodno≈õƒá (skr√≥t)</th>
            <th>Utworzono</th>
            <th>Akcje</th>
          </tr>
        </thead>
        <tbody id="tbody">
          <tr><td colspan="8" style="padding: 36px; text-align:center;">≈Åadowanie‚Ä¶</td></tr>
        </tbody>
      </table>
    </div>
  </div>

  <!-- ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ -->
  <!-- RESOLVE MODAL                                                   -->
  <!-- ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ -->
  <div class="modal" id="resolve-modal" aria-hidden="true">
    <div class="modal-card" role="dialog" aria-modal="true" aria-labelledby="resolve-title">
      <div class="modal-header">
        <h2 id="resolve-title">RozwiƒÖ≈º bilet: <span id="resolve-ticket-id"></span></h2>
      </div>
      <div class="form">
        <div class="row">
          <label for="resolution-type">Typ rozwiƒÖzania</label>
          <select id="resolution-type">
            <option value="human_override">Decyzja eksperta</option>
            <option value="solver_update">Aktualizacja solvera</option>
            <option value="formula_correction">Korekta formu≈Çy</option>
            <option value="false_positive">Fa≈Çszywy alarm</option>
            <option value="known_limitation">Znane ograniczenie</option>
          </select>
        </div>
        <div class="row">
          <label for="chosen-result">Wyb√≥r wyniku</label>
          <select id="chosen-result">
            <option value="sat">SAT (spe≈Çnialne)</option>
            <option value="unsat">UNSAT (niespe≈Çnialne)</option>
            <option value="unknown">UNKNOWN (nieznane)</option>
          </select>
        </div>
        <div class="row">
          <label for="resolution-notes">Uzasadnienie</label>
          <textarea id="resolution-notes" placeholder="Opisz kr√≥tko motywy decyzji (min 10 znak√≥w)‚Ä¶" rows="4"></textarea>
          <div class="hint">Wskaz√≥wka: wpis trafia do log√≥w audytowych.</div>
        </div>
        <div class="row">
          <label for="resolved-by">RozwiƒÖzujƒÖcy</label>
          <input id="resolved-by" type="text" placeholder="Twoje imiƒô / ID" />
        </div>
        <div class="row">
          <label for="confidence">Pewno≈õƒá (0‚Äì1)</label>
          <input id="confidence" type="number" min="0" max="1" step="0.1" value="0.8" />
        </div>
      </div>
      <div class="modal-actions">
        <button class="btn neutral" id="btn-cancel-resolve">Anuluj</button>
        <button class="btn" id="btn-submit-resolve">RozwiƒÖ≈º bilet</button>
      </div>
    </div>
  </div>

  <!-- ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ -->
  <!-- ESCALATE MODAL                                                  -->
  <!-- ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ -->
  <div class="modal" id="escalate-modal" aria-hidden="true">
    <div class="modal-card" role="dialog" aria-modal="true" aria-labelledby="escalate-title">
      <div class="modal-header">
        <h2 id="escalate-title">Eskaluj bilet: <span id="escalate-ticket-id"></span></h2>
      </div>
      <div class="form">
        <div class="row">
          <label for="escalate-reason">Pow√≥d eskalacji</label>
          <textarea id="escalate-reason" placeholder="Dlaczego eskalujesz?" rows="3"></textarea>
        </div>
        <div class="row">
          <label for="escalated-by">EskalujƒÖcy</label>
          <input id="escalated-by" type="text" placeholder="Twoje imiƒô / ID" />
        </div>
        <div class="hint">Priorytet wzro≈õnie do ‚Äûcritical‚Äù, status ‚Üí ‚Äûescalated‚Äù.</div>
      </div>
      <div class="modal-actions">
        <button class="btn neutral" id="btn-cancel-escalate">Anuluj</button>
        <button class="btn warn" id="btn-submit-escalate">Eskaluj</button>
      </div>
    </div>
  </div>

  <script>
    // ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
    // CONFIG
    // ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
    const API_BASE = 'http://localhost:8000/v1/mismatch';

    // State
    let TICKETS = [];
    let CURRENT_RESOLVE_ID = null;
    let CURRENT_ESCALATE_ID = null;

    // Elements
    const $ = (sel) => document.querySelector(sel);
    const $$ = (sel) => Array.from(document.querySelectorAll(sel));
    const el = {
      tbody: $('#tbody'),
      loading: $('#loading'),
      stat: {
        total: $('#stat-total'),
        open: $('#stat-open'),
        review: $('#stat-review'),
        resolved: $('#stat-resolved'),
      },
      filters: {
        status: $('#filter-status'),
        priority: $('#filter-priority'),
      },
      buttons: {
        refresh: $('#btn-refresh'),
      },
      modals: {
        resolve: $('#resolve-modal'),
        escalate: $('#escalate-modal'),
      },
      resolve: {
        id: $('#resolve-ticket-id'),
        type: $('#resolution-type'),
        chosen: $('#chosen-result'),
        notes: $('#resolution-notes'),
        by: $('#resolved-by'),
        conf: $('#confidence'),
        submit: $('#btn-submit-resolve'),
        cancel: $('#btn-cancel-resolve'),
      },
      escalate: {
        id: $('#escalate-ticket-id'),
        reason: $('#escalate-reason'),
        by: $('#escalated-by'),
        submit: $('#btn-submit-escalate'),
        cancel: $('#btn-cancel-escalate'),
      }
    };

    // ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
    // HELPERS
    // ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
    function showLoading(on) { el.loading.classList.toggle('active', !!on); }

    function truncate(s, n = 72) {
      if (!s) return '';
      return s.length > n ? s.slice(0, n) + '‚Ä¶' : s;
    }

    function fmtDate(iso) {
      if (!iso) return 'N/A';
      const d = new Date(iso);
      const now = new Date();
      const diff = now - d;
      if (diff < 60 * 60 * 1000) return `${Math.max(1, Math.floor(diff / 60000))} min temu`;
      if (diff < 24 * 60 * 60 * 1000) return `${Math.floor(diff / 3600000)} godz. temu`;
      return d.toLocaleString('pl-PL', { hour: '2-digit', minute: '2-digit', day: '2-digit', month: '2-digit', year: 'numeric' });
    }

    function badgePriority(p) {
      const cls = `badge priority-${p}`;
      return `<span class="${cls}">${p}</span>`;
    }
    function badgeStatus(s) {
      const cls = `badge status-${s}`;
      const map = { open: 'Otwarty', under_review: 'W trakcie', resolved: 'RozwiƒÖzany', escalated: 'Eskalowany', closed: 'Zamkniƒôty' };
      return `<span class="${cls}">${map[s] || s}</span>`;
    }

    function mismatchSummary(results) {
      if (!results || !results.length) return 'N/A';
      return results.map(r => `<strong>${r.solver_name}</strong>: ${r.status}`).join('<br>');
    }

    function renderRows(rows) {
      if (!rows.length) {
        el.tbody.innerHTML = `<tr><td colspan="8" style="padding:32px; text-align:center;">Brak bilet√≥w do wy≈õwietlenia</td></tr>`;
        return;
      }
      el.tbody.innerHTML = rows.map(t => `
        <tr>
          <td><strong>${t.ticket_id}</strong></td>
          <td>${t.case_id}</td>
          <td>${badgePriority(t.priority)}</td>
          <td>${badgeStatus(t.status)}</td>
          <td><div class="mono">${truncate(t.formula_str, 220)}</div></td>
          <td><small>${mismatchSummary(t.results)}</small></td>
          <td>${fmtDate(t.created_at)}</td>
          <td>
            ${t.status === 'resolved'
              ? `<button class="btn" disabled>‚úì RozwiƒÖzany</button>`
              : `
                <div class="toolbar">
                  <button class="btn" onclick="openResolve('${t.ticket_id}')">RozwiƒÖ≈º</button>
                  <button class="btn warn" onclick="openEscalate('${t.ticket_id}')">Eskaluj</button>
                </div>
              `}
          </td>
        </tr>
      `).join('');
    }

    function applyFilters() {
      const status = el.filters.status.value;
      const prio = el.filters.priority.value;
      let rows = [...TICKETS];
      if (status) rows = rows.filter(t => t.status === status);
      if (prio) rows = rows.filter(t => t.priority === prio);
      renderRows(rows);
    }

    // ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
    // API
    // ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
    async function api(path, options = {}) {
      const res = await fetch(`${API_BASE}${path}`, {
        headers: { 'Content-Type': 'application/json' },
        ...options,
      });
      if (!res.ok) {
        let msg = `HTTP ${res.status}`;
        try { const body = await res.json(); if (body?.detail) msg += `: ${body.detail}`; } catch {}
        throw new Error(msg);
      }
      const ct = res.headers.get('content-type') || '';
      return ct.includes('application/json') ? res.json() : res.text();
    }

    async function loadStats() {
      try {
        const s = await api('/statistics');
        el.stat.total.textContent = s.total_tickets ?? 0;
        el.stat.open.textContent = s.open_tickets ?? 0;
        el.stat.review.textContent = s.under_review_tickets ?? 0;
        el.stat.resolved.textContent = s.resolved_tickets ?? 0;
      } catch (e) {
        console.warn('Statistics error:', e.message);
      }
    }

    async function loadTickets() {
      showLoading(true);
      try {
        TICKETS = await api('/tickets');
        applyFilters();
      } catch (e) {
        el.tbody.innerHTML = `<tr><td colspan="8" style="padding:32px; text-align:center; color:#c62828;">‚ùå ${e.message}</td></tr>`;
      } finally {
        showLoading(false);
      }
    }

    // ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
    // MODALS: RESOLVE
    // ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
    function openResolve(id) {
      CURRENT_RESOLVE_ID = id;
      el.resolve.id.textContent = id;
      el.resolve.notes.value = '';
      el.resolve.by.value = '';
      el.resolve.conf.value = '0.8';
      el.modals.resolve.classList.add('active');
      el.modals.resolve.setAttribute('aria-hidden', 'false');
    }
    function closeResolve() {
      el.modals.resolve.classList.remove('active');
      el.modals.resolve.setAttribute('aria-hidden', 'true');
      CURRENT_RESOLVE_ID = null;
    }
    async function submitResolve() {
      if (!CURRENT_RESOLVE_ID) return;
      const payload = {
        resolution_type: el.resolve.type.value,
        chosen_result: el.resolve.chosen.value,
        notes: el.resolve.notes.value?.trim(),
        resolved_by: el.resolve.by.value?.trim() || 'Anonymous',
        confidence: parseFloat(el.resolve.conf.value || '0.8')
      };
      if (!payload.notes || payload.notes.length < 10) {
        alert('Uzasadnienie musi mieƒá co najmniej 10 znak√≥w.');
        return;
      }
      try {
        await api(`/tickets/${CURRENT_RESOLVE_ID}/resolve`, { method: 'POST', body: JSON.stringify(payload) });
        closeResolve();
        await Promise.all([loadTickets(), loadStats()]);
        alert('‚úÖ Bilet rozwiƒÖzany.');
      } catch (e) {
        alert('‚ùå B≈ÇƒÖd: ' + e.message);
      }
    }

    // ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
    // MODALS: ESCALATE
    // ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
    function openEscalate(id) {
      CURRENT_ESCALATE_ID = id;
      el.escalate.id.textContent = id;
      el.escalate.reason.value = '';
      el.escalate.by.value = '';
      el.modals.escalate.classList.add('active');
      el.modals.escalate.setAttribute('aria-hidden', 'false');
    }
    function closeEscalate() {
      el.modals.escalate.classList.remove('active');
      el.modals.escalate.setAttribute('aria-hidden', 'true');
      CURRENT_ESCALATE_ID = null;
    }
    async function submitEscalate() {
      if (!CURRENT_ESCALATE_ID) return;
      const payload = {
        reason: el.escalate.reason.value?.trim(),
        escalated_by: el.escalate.by.value?.trim() || 'Anonymous'
      };
      if (!payload.reason || payload.reason.length < 6) {
        alert('Podaj kr√≥tki pow√≥d eskalacji (>= 6 znak√≥w).');
        return;
      }
      try {
        await api(`/tickets/${CURRENT_ESCALATE_ID}/escalate`, { method: 'POST', body: JSON.stringify(payload) });
        closeEscalate();
        await Promise.all([loadTickets(), loadStats()]);
        alert('‚ö†Ô∏è Bilet eskalowany.');
      } catch (e) {
        alert('‚ùå B≈ÇƒÖd: ' + e.message);
      }
    }

    // ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
    // INIT & EVENTS
    // ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
    document.addEventListener('DOMContentLoaded', async () => {
      // listeners
      el.buttons.refresh.addEventListener('click', () => { loadTickets(); loadStats(); });
      el.filters.status.addEventListener('change', applyFilters);
      el.filters.priority.addEventListener('change', applyFilters);

      el.resolve.cancel.addEventListener('click', closeResolve);
      el.resolve.submit.addEventListener('click', submitResolve);

      el.escalate.cancel.addEventListener('click', closeEscalate);
      el.escalate.submit.addEventListener('click', submitEscalate);

      // keyboard shortcuts
      document.addEventListener('keydown', (ev) => {
        if (ev.altKey && (ev.key === 'r' || ev.key === 'R')) {
          el.buttons.refresh.click();
        }
        if (ev.key === 'Escape') {
          closeResolve(); closeEscalate();
        }
      });

      // initial load + auto-refresh
      await Promise.all([loadTickets(), loadStats()]);
      setInterval(() => { loadTickets(); loadStats(); }, 30000);
    });

    // Expose for inline onclick
    window.openResolve = openResolve;
    window.openEscalate = openEscalate;
  </script>
</body>
</html>

```


===== FILE: clients/web/proof_visualizer/README.md =====
```text
Proof Visualizer ‚Äì szkic.

```


===== FILE: clients/web/proof_visualizer/case_manager.js =====
```text
/* ============================================================================
 *  CERTEUS ‚Äî Case Manager (UI helper)
 *  PL: Prosty selektor spraw + pamiƒôƒá ostatnich (localStorage).
 *  EN: Simple case picker + recent cases memory (localStorage).
 * ----------------------------------------------------------------------------
 *  Zasady / Rules:
 *   - Monochromatycznie (brak w≈Çasnych kolor√≥w, dziedziczy motyw strony).
 *   - Brak zale≈ºno≈õci; czysty JS.
 *   - Maks. 10 ostatnich spraw; deduplikacja po `id`.
 *   - I18N: PL/EN (auto wg `lang`, fallback "pl").
 *   - Linie ‚â§ 100 znak√≥w.
 * ==========================================================================*/

(() => {
  "use strict";

  /** PL: Klucze LS. EN: LocalStorage keys. */
  const LS_KEYS = {
    recent: "certeus:recent_cases",
    active: "certeus:active_case",
  };

  /** PL: Maks. liczba zapamiƒôtanych spraw. EN: Max number of stored recents. */
  const MAX_RECENTS = 10;

  /** PL/EN: Minimal i18n. */
  const I18N = {
    pl: {
      pickerLabel: "Sprawa",
      newCase: "Nowa sprawa‚Ä¶",
      placeholderId: "ID sprawy",
      placeholderTitle: "Tytu≈Ç (opcjonalnie)",
      btnAdd: "Dodaj",
      none: "Brak",
    },
    en: {
      pickerLabel: "Case",
      newCase: "New case‚Ä¶",
      placeholderId: "Case ID",
      placeholderTitle: "Title (optional)",
      btnAdd: "Add",
      none: "None",
    },
  };

  /** PL: Odczyt jƒôzyka z `document.documentElement.lang`. EN: Read page lang. */
  function getLang() {
    const lang = (document.documentElement.lang || "pl").toLowerCase();
    return lang.startsWith("en") ? "en" : "pl";
  }

  /** PL/EN: Safe JSON parse. */
  function safeParse(str, fallback) {
    try {
      return JSON.parse(str);
    } catch {
      return fallback;
    }
  }

  /** PL/EN: Read recent cases array. */
  function readRecents() {
    const raw = localStorage.getItem(LS_KEYS.recent);
    const arr = safeParse(raw || "[]", []);
    return Array.isArray(arr) ? arr : [];
  }

  /** PL/EN: Write recent cases array. */
  function writeRecents(arr) {
    localStorage.setItem(LS_KEYS.recent, JSON.stringify(arr));
  }

  /** PL/EN: Get active case id. */
  function getActiveCase() {
    return localStorage.getItem(LS_KEYS.active) || "";
  }

  /** PL/EN: Set active case id. */
  function setActiveCase(id) {
    if (typeof id === "string") localStorage.setItem(LS_KEYS.active, id);
  }

  /** PL/EN: Add or refresh a case (id, title?), keep MAX_RECENTS, de-dup by id. */
  function addCase(id, title) {
    if (!id || typeof id !== "string") return;
    const now = Date.now();
    const recents = readRecents().filter((x) => x && x.id);
    const without = recents.filter((x) => x.id !== id);
    const next = [{ id, title: title || "", ts: now }, ...without].slice(0, MAX_RECENTS);
    writeRecents(next);
    setActiveCase(id);
  }

  /** PL/EN: List recent cases (sorted by ts desc). */
  function listCases() {
    const arr = readRecents().filter((x) => x && x.id);
    return arr.sort((a, b) => (b.ts || 0) - (a.ts || 0));
  }

  /** PL/EN: Helper to create element. */
  function el(tag, props = {}, children = []) {
    const node = document.createElement(tag);
    Object.entries(props).forEach(([k, v]) => {
      if (k === "class") node.className = String(v || "");
      else if (k === "for") node.htmlFor = String(v || "");
      else if (k in node) node[k] = v;
      else node.setAttribute(k, String(v));
    });
    [].concat(children).forEach((c) => {
      if (c == null) return;
      if (typeof c === "string") node.appendChild(document.createTextNode(c));
      else node.appendChild(c);
    });
    return node;
  }

  /**
   * PL: Renderuje selektor spraw do `container` i rejestruje zdarzenia.
   * EN: Renders case picker into `container` and wires events.
   *
   * @param {HTMLElement|string} container - element lub selektor CSS
   * @param {Object} opts
   *  - onChange(id): callback przy zmianie aktywnej sprawy
   *  - showNewForm: bool, czy pokazaƒá formularz "Nowa sprawa‚Ä¶"
   */
  function renderCasePicker(container, opts = {}) {
    const lang = getLang();
    const T = I18N[lang];

    const root =
      typeof container === "string" ? document.querySelector(container) : container;
    if (!root) return;

    // Wrapper (monochromatyczny, dziedziczy style)
    const wrap = el("div", { class: "certeus-case-picker", style: "display:grid;gap:.5rem" });

    const label = el("label", { for: "certeus-case-select" }, T.pickerLabel);
    const select = el("select", { id: "certeus-case-select" });

    // Opcje: None + recent cases
    select.appendChild(el("option", { value: "" }, `‚Äî ${T.none} ‚Äî`));
    listCases().forEach((c) => {
      const optTitle = c.title ? `${c.id} ‚Äî ${c.title}` : c.id;
      const opt = el("option", { value: c.id }, optTitle);
      select.appendChild(opt);
    });

    // Ustaw aktywnƒÖ
    const active = getActiveCase();
    if (active) select.value = active;

    // Zmiana aktywnej sprawy
    select.addEventListener("change", () => {
      setActiveCase(select.value);
      if (typeof opts.onChange === "function") opts.onChange(select.value);
    });

    wrap.appendChild(label);
    wrap.appendChild(select);

    // Formularz "Nowa sprawa‚Ä¶" (opcjonalnie)
    if (opts.showNewForm !== false) {
      const form = el("div", { class: "certeus-new-case", style: "display:grid;gap:.25rem" });
      const heading = el("div", { class: "certeus-new-heading" }, T.newCase);
      const idInput = el("input", {
        type: "text",
        placeholder: T.placeholderId,
        id: "certeus-new-id",
        autocomplete: "off",
      });
      const titleInput = el("input", {
        type: "text",
        placeholder: T.placeholderTitle,
        id: "certeus-new-title",
        autocomplete: "off",
      });
      const addBtn = el("button", { type: "button", id: "certeus-new-add" }, T.btnAdd);

      addBtn.addEventListener("click", () => {
        const id = idInput.value.trim();
        const title = titleInput.value.trim();
        if (!id) return;
        addCase(id, title);
        // Re-render select
        while (select.firstChild) select.removeChild(select.firstChild);
        select.appendChild(el("option", { value: "" }, `‚Äî ${T.none} ‚Äî`));
        listCases().forEach((c) => {
          const t = c.title ? `${c.id} ‚Äî ${c.title}` : c.id;
          select.appendChild(el("option", { value: c.id }, t));
        });
        select.value = id;
        if (typeof opts.onChange === "function") opts.onChange(id);
        idInput.value = "";
        titleInput.value = "";
      });

      form.appendChild(heading);
      form.appendChild(idInput);
      form.appendChild(titleInput);
      form.appendChild(addBtn);
      wrap.appendChild(form);
    }

    root.innerHTML = "";
    root.appendChild(wrap);
  }

  // Eksport prostego API do `window.CerteusCaseManager`
  window.CerteusCaseManager = {
    addCase,
    listCases,
    getActiveCase,
    setActiveCase,
    renderCasePicker,
  };
})();

```


===== FILE: clients/web/proof_visualizer/file_list.js =====
```text
/* ============================================================================
 *  CERTEUS ‚Äî File List (mini viewer navigator)
 *  PL: Prosta lista plik√≥w (miniatura + tytu≈Ç), klikalna, z pod≈õwietleniem.
 *      Monochromatycznie, bez zale≈ºno≈õci. Exports: window.CerteusFileList.
 *  EN: Simple clickable file list (thumb + title), with selection highlight.
 *      Monochrome, zero deps. Exports: window.CerteusFileList.
 * ----------------------------------------------------------------------------
 *  API (public):
 *    render(container, items, opts?)
 *      - container: HTMLElement|string (selector)
 *      - items: [{ id, name, url, kind, meta? }]
 *          kind ‚àà {"pdf","image","text","other"} (affects icon)
 *      - opts:
 *          onSelect(id, item)   // called when user clicks an item
 *          activeId             // preselected id
 *          lang: "pl"|"en"      // optional; auto from <html lang="...">
 *          compact: boolean     // tighter paddings
 *          enableToggleKeyM: true|false  // press 'M' to collapse/expand
 *    setItems(items)            // rerender with new items
 *    setActive(id)              // highlight by id
 *    collapse()/expand()/toggle()
 *  Notes:
 *    - Lines ‚â§ 100 chars, LF EOL, no trailing spaces.
 * ==========================================================================*/

(() => {
  "use strict";

  const I18N = {
    pl: { header: "Pliki", empty: "Brak plik√≥w", toggle: "Poka≈º/ukryj listƒô (M)" },
    en: { header: "Files", empty: "No files", toggle: "Show/hide list (M)" },
  };

  function getLang() {
    const lang = (document.documentElement.lang || "pl").toLowerCase();
    return lang.startsWith("en") ? "en" : "pl";
  }

  function el(tag, props = {}, children = []) {
    const n = document.createElement(tag);
    Object.entries(props).forEach(([k, v]) => {
      if (k === "class") n.className = String(v || "");
      else if (k === "for") n.htmlFor = String(v || "");
      else if (k in n) n[k] = v;
      else n.setAttribute(k, String(v));
    });
    ([]).concat(children).forEach((c) => {
      if (c == null) return;
      n.appendChild(typeof c === "string" ? document.createTextNode(c) : c);
    });
    return n;
  }

  function icon(kind) {
    // PL/EN: simple mono icons via emojis (no external assets)
    if (kind === "pdf") return "üìÑ";
    if (kind === "image") return "üñºÔ∏è";
    if (kind === "text") return "üìù";
    return "üì¶";
  }

  function sanitize(s, fallback = "") {
    return typeof s === "string" ? s : fallback;
  }

  let _state = {
    root: null,
    listEl: null,
    items: [],
    activeId: null,
    lang: getLang(),
    collapsed: false,
    opts: {},
  };

  function _buildHeader(T) {
    const btn = el(
      "button",
      {
        type: "button",
        title: T.toggle,
        class: "cf-list-toggle",
        style:
          "border:1px solid currentColor;background:transparent;padding:.25rem .5rem;" +
          "cursor:pointer;border-radius:.5rem;",
      },
      T.header
    );
    btn.addEventListener("click", toggle);
    return el(
      "div",
      {
        class: "cf-list-head",
        style:
          "display:flex;align-items:center;justify-content:space-between;" +
          "gap:.5rem;margin-bottom:.5rem;",
      },
      [el("div", {}, T.header), btn]
    );
  }

  function _buildItem(it, active) {
    const pad = _state.opts.compact ? ".25rem .5rem" : ".5rem .75rem";
    const li = el(
      "button",
      {
        type: "button",
        class: "cf-item",
        style:
          "width:100%;text-align:left;border:1px solid currentColor;" +
          `padding:${pad};margin-bottom:.25rem;display:flex;align-items:center;gap:.5rem;` +
          "background:transparent;border-radius:.5rem;cursor:pointer;" +
          (active ? "outline:2px solid currentColor;" : "outline:none;"),
      },
      [el("span", { "aria-hidden": "true" }, icon(it.kind)), el("span", {}, sanitize(it.name, it.id))]
    );
    li.addEventListener("click", () => {
      setActive(it.id);
      if (typeof _state.opts.onSelect === "function") _state.opts.onSelect(it.id, it);
    });
    li.dataset.id = it.id;
    return li;
  }

  function _renderList() {
    if (!_state.root) return;
    const T = I18N[_state.lang] || I18N.pl;

    _state.root.innerHTML = "";
    const boxPad = _state.opts.compact ? ".5rem" : ".75rem";
    const box = el(
      "div",
      {
        class: "cf-box",
        style:
          "border:1px solid currentColor;border-radius:.75rem;padding:" +
          boxPad +
          ";display:grid;gap:.25rem;",
      },
      []
    );

    box.appendChild(_buildHeader(T));

    const list = el(
      "div",
      {
        class: "cf-list",
        style:
          (_state.collapsed ? "display:none;" : "display:block;") +
          "max-height:240px;overflow:auto;",
      },
      []
    );
    _state.listEl = list;

    if (!_state.items.length) {
      list.appendChild(el("div", { class: "cf-empty", style: "opacity:.7;" }, T.empty));
    } else {
      _state.items.forEach((it) => {
        list.appendChild(_buildItem(it, it.id === _state.activeId));
      });
    }

    box.appendChild(list);
    _state.root.appendChild(box);
  }

  function setItems(items) {
    _state.items = Array.isArray(items) ? items.slice() : [];
    if (_state.activeId && !_state.items.find((x) => x.id === _state.activeId)) {
      _state.activeId = null;
    }
    _renderList();
  }

  function setActive(id) {
    _state.activeId = id || null;
    if (_state.listEl) {
      _state.listEl.querySelectorAll(".cf-item").forEach((node) => {
        const isActive = node.dataset.id === _state.activeId;
        node.style.outline = isActive ? "2px solid currentColor" : "none";
      });
    }
  }

  function collapse() {
    _state.collapsed = true;
    _renderList();
  }
  function expand() {
    _state.collapsed = false;
    _renderList();
  }
  function toggle() {
    _state.collapsed = !_state.collapsed;
    _renderList();
  }

  function _bindKeyM() {
    if (_state.opts.enableToggleKeyM === false) return;
    window.addEventListener("keydown", (e) => {
      if ((e.key || "").toLowerCase() === "m") toggle();
    });
  }

  function render(container, items, opts = {}) {
    const root =
      typeof container === "string" ? document.querySelector(container) : container;
    if (!root) return;
    _state.root = root;
    _state.lang = opts.lang || getLang();
    _state.opts = opts || {};
    _state.activeId = opts.activeId || null;
    _bindKeyM();
    setItems(items || []);
  }

  window.CerteusFileList = {
    render,
    setItems,
    setActive,
    collapse,
    expand,
    toggle,
  };
})();

```


===== FILE: clients/web/proof_visualizer/file_list_bridge.js =====
```text
/* ============================================================================
 *  CERTEUS ‚Äî File List Bridge (uploads ‚Üî viewer)
 *  PL: Spina dropzone/uploady z mini listƒÖ i viewerem (+ prev/next).
 *  EN: Bridges uploads to mini file list and viewer (+ prev/next).
 *  Zasady: mono UI, brak zale≈ºno≈õci, linie ‚â§ 100 znak√≥w.
 * ==========================================================================*/

(() => {
  "use strict";

  const S = {
    listSel: "#file-list",
    prevBtn: "#prevFile",
    nextBtn: "#nextFile",
    indicator: "#fileIndicator",
    viewerSel:
      "#previewFrame, #viewerFrame, #previewObject, #viewerObject, " +
      "#previewImage, #viewerImage, #viewerEmbed",
  };

  const state = {
    items: [],        // [{id,name,url,kind,meta}]
    idx: -1,          // aktywny indeks
  };

  function _viewerEl() {
    return document.querySelector(S.viewerSel);
  }

  function _kindFromType(ct) {
    const t = String(ct || "").toLowerCase();
    if (t === "application/pdf") return "pdf";
    if (t.startsWith("image/")) return "image";
    if (t.startsWith("text/")) return "text";
    return "other";
  }

  function _applyToViewer(url) {
    const v = _viewerEl();
    if (!v || !url) return;
    if (v.tagName === "IMG") v.src = url;
    else if ("data" in v) v.data = url;  // <object>
    else v.src = url;                    // <iframe>/<embed>
  }

  function _updateIndicator() {
    const el = document.querySelector(S.indicator);
    if (!el) return;
    const total = state.items.length;
    const pos = state.idx >= 0 ? state.idx + 1 : 0;
    el.textContent = `${pos}/${total}`;
  }

  function _refreshList(renderActiveOnly) {
    if (!window.CerteusFileList) return;
    window.CerteusFileList.setItems(state.items);
    if (state.idx >= 0 && state.items[state.idx]) {
      const id = state.items[state.idx].id;
      window.CerteusFileList.setActive(id);
      if (!renderActiveOnly) _applyToViewer(state.items[state.idx].url);
    }
    _updateIndicator();
  }

  function setItems(arr) {
    state.items = Array.isArray(arr) ? arr.slice() : [];
    state.idx = state.items.length ? 0 : -1;
    if (window.CerteusFileList) {
      window.CerteusFileList.render(S.listSel, state.items, {
        activeId: state.items[0]?.id || null,
        onSelect: (id, it) => {
          const i = state.items.findIndex((x) => x.id === id);
          if (i >= 0) {
            state.idx = i;
            _applyToViewer(state.items[i].url);
            _updateIndicator();
          } else if (it?.url) {
            _applyToViewer(it.url);
          }
        },
        enableToggleKeyM: true,
      });
    }
    if (state.idx >= 0) _applyToViewer(state.items[state.idx].url);
    _updateIndicator();
  }

  function addFile(obj) {
    // obj: {id,name,url,type|kind,meta?}
    if (!obj) return;
    const id = String(obj.id ?? (Date.now() + "-" + Math.random().toString(36).slice(2)));
    const name = obj.name || "plik";
    const url = obj.url || "";
    const kind = obj.kind || _kindFromType(obj.type);
    const meta = obj.meta || {};
    const item = { id, name, url, kind, meta };

    // deduplikacja po id
    const without = state.items.filter((x) => x.id !== id);
    state.items = [...without, item];
    // je≈õli nic nieaktywne ‚Äî ustaw pierwszy
    if (state.idx < 0) state.idx = 0;
    _refreshList(false);
    return item;
  }

  function removeFile(id) {
    if (!id) return;
    const i = state.items.findIndex((x) => x.id === id);
    if (i < 0) return;
    state.items.splice(i, 1);
    if (state.items.length === 0) state.idx = -1;
    else if (state.idx >= state.items.length) state.idx = state.items.length - 1;
    _refreshList(true);
  }

  function selectIndex(i) {
    if (i < 0 || i >= state.items.length) return;
    state.idx = i;
    _refreshList(false);
  }

  function next() {
    if (!state.items.length) return;
    state.idx = (state.idx + 1) % state.items.length;
    _refreshList(false);
  }

  function prev() {
    if (!state.items.length) return;
    state.idx = (state.idx - 1 + state.items.length) % state.items.length;
    _refreshList(false);
  }

  function bindNav() {
    const prevBtn = document.querySelector(S.prevBtn);
    const nextBtn = document.querySelector(S.nextBtn);
    prevBtn && prevBtn.addEventListener("click", prev);
    nextBtn && nextBtn.addEventListener("click", next);
  }

  // Auto-bind na DOMContentLoaded
  document.addEventListener("DOMContentLoaded", bindNav);

  // Eksport prostego API
  window.CerteusFileBridge = {
    setItems, addFile, removeFile, selectIndex, next, prev,
  };
})();

```


===== FILE: clients/web/proof_visualizer/index.html =====
```text
<!--
+======================================================================+
|               CERTEUS - Proof Visualizer (v0.5, mono)                |
+======================================================================+
| FILE / PLIK: clients/web/proof_visualizer/index.html                 |
| ROLE / ROLA:                                                         |
|  EN: Human-friendly UI to inspect CERTEUS analysis (ALI payload).    |
|  PL: Przyjazny interfejs do wglƒÖdu w analizƒô (ALI payload).          |
+======================================================================+
| DESIGN CONSTRAINTS:                                                  |
|  - Monochrome palette only: white / black / dark gray / anthracite   |
|  - Two themes: Light / Dark (dark ‚â† pure black)                      |
|  - Simple, intuitive layout                                          |
|  - Multi-file upload: PDF/DOCX/TXT/JPG/PNG; preview via /v1/preview  |
+======================================================================+
-->

<!DOCTYPE html>
<html lang="pl" data-theme="dark">
<head>
  <!-- [META] -->
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width,initial-scale=1.0"/>
  <title>CERTEUS ‚Ä¢ Wizualizator Dowodu</title>

  <!-- [STYLE] Strict monochrome, responsive, no external deps -->
  <style>
    :root{
      /* DARK (anthracite) */
      --bg:#111315;    --bg2:#1a1c20;   --card:#181b20;   --elev:#14171b;
      --txt:#f2f2f3;   --muted:#9aa0a6; --border:#2a2d33; --ring:#8a8f98;
      --chip:#20242a;  --good:#c8f2d2;  --bad:#f2c8cc;    --warn:#f0e3c0;
      --shadow:0 10px 30px rgba(0,0,0,.35);
    }
    [data-theme="light"]{
      /* LIGHT (grays + white) */
      --bg:#f7f7f8;    --bg2:#f2f3f5;   --card:#ffffff;   --elev:#f7f8fa;
      --txt:#111215;   --muted:#61656d; --border:#e4e6ea; --ring:#6d727c;
      --chip:#eef0f4;  --good:#1f6f3a;  --bad:#8f2a36;    --warn:#7a5f15;
      --shadow:0 8px 22px rgba(0,0,0,.08);
    }

    *{box-sizing:border-box}
    html,body{height:100%}
    body{
      margin:0;
      font-family: ui-sans-serif,system-ui,-apple-system,"Segoe UI",Roboto,Arial;
      color:var(--txt);
      background:linear-gradient(180deg,var(--bg) 0%,var(--bg2) 100%);
    }

    .container{max-width:1180px;margin:24px auto;padding:0 16px}
    .card{
      background:linear-gradient(180deg,rgba(255,255,255,.02),rgba(255,255,255,.01));
      border:1px solid var(--border); border-radius:16px; padding:18px;
      box-shadow:var(--shadow); backdrop-filter: blur(4px);
    }
    .row{display:flex; flex-wrap:wrap; gap:16px}
    .col{flex:1 1 320px; min-width:320px}
    h1{font-size:26px;margin:0 0 6px; letter-spacing:.2px}
    h2{font-size:18px;margin:8px 0 10px;color:var(--muted)}
    p.muted{color:var(--muted);margin:6px 0 14px}

    label{font-weight:600;color:var(--txt)}
    .input,.select,.btn{
      border-radius:12px; border:1px solid var(--border);
      background:var(--elev); color:var(--txt);
    }
    .input{padding:10px 12px; outline:none; width:100%}
    .select{padding:8px 10px}
    .btn{
      appearance:none; padding:10px 14px; font-weight:600; cursor:pointer;
      background:linear-gradient(180deg,var(--elev),var(--card));
      color:var(--txt); border:1px solid var(--border);
      transition:transform .08s ease, background .12s;
    }
    .btn:hover{transform:translateY(-1px); background:var(--card)}
    .btn.secondary{background:transparent}
    .btn:disabled{opacity:.6; cursor:not-allowed}

    .stack{display:flex;gap:10px;align-items:center;flex-wrap:wrap}
    .pill{display:inline-flex; align-items:center; gap:8px; padding:6px 10px;
      border-radius:999px; font-size:13px; background:var(--chip);
      border:1px solid var(--border)}
    .pill.sat{outline:2px solid var(--good)}
    .pill.unsat{outline:2px solid var(--bad)}
    .pill.unknown{outline:2px solid var(--ring)}

    .chips{display:flex; flex-wrap:wrap; gap:8px}
    .chip{background:var(--chip); border:1px solid var(--border);
      padding:6px 8px; border-radius:999px; font-size:12px}

    .json{
      background:var(--elev); border:1px solid var(--border);
      border-radius:12px; padding:12px;
      white-space:pre-wrap; word-break:break-word;
      font-family:ui-monospace,SFMono-Regular,Consolas,monospace; font-size:12px
    }

    .placeholder{
      border:2px dashed var(--border); border-radius:12px; padding:24px;
      text-align:center; color:var(--muted)
    }

    .grid-2{display:grid; grid-template-columns:1fr 1fr; gap:16px}

    /* Tabs */
    .tabs{display:flex; gap:8px; margin-bottom:8px}
    .tab{padding:8px 12px; border-radius:10px; border:1px solid var(--border);
      background:var(--card); cursor:pointer; font-weight:600; color:var(--txt)}
    .tab[aria-selected="true"]{outline:2px solid var(--ring); outline-offset:1px}
    .tabpanel{display:none}
    .tabpanel.active{display:block}

    /* Dropzone */
    .dropzone{
      border:2px dashed var(--border); background:transparent; border-radius:14px;
      padding:16px; text-align:center; color:var(--muted);
      transition:border-color .15s ease, background .15s
    }
    .dropzone.drag{border-color:var(--ring); background:rgba(140,140,140,.08)}

    /* Toast */
    .toast{position:fixed; right:16px; bottom:16px; display:flex;
      flex-direction:column; gap:8px; z-index:50}
    .toast .item{
      background:var(--card); border:1px solid var(--border); color:var(--txt);
      padding:10px 12px; border-radius:12px; box-shadow:var(--shadow);
      min-width:240px
    }

    /* Viewer */
    .viewer{
      border:1px solid var(--border); border-radius:12px; background:var(--card);
      height:420px; display:flex; align-items:center; justify-content:center;
      overflow:hidden
    }
    .viewer iframe{width:100%; height:100%; border:0; background:var(--card)}
    .viewer img{max-width:100%; max-height:100%; display:block}
    .viewer .text{padding:12px; width:100%; height:100%; overflow:auto}

    /* Case Picker (dark-friendly inputs/buttons) */
    #case-picker input,#case-picker button,#case-picker select{
      background:var(--elev); color:var(--txt);
      border:1px solid var(--border); border-radius:12px; padding:8px 10px
    }
    #case-picker input::placeholder{ color:var(--muted) }
    #case-picker .certeus-new-heading{ color:var(--muted) }

    /* Responsive tweaks */
    @media (max-width: 720px){
      .col{min-width:100%}
      .grid-2{grid-template-columns:1fr}
      .viewer{height:360px}
    }
  </style>
</head>
<body>
  <div class="container">
    <!-- HEADER -->
    <div class="card" style="margin-bottom:16px;">
      <div class="row" style="align-items:center;">
        <div class="col" style="min-width:260px;flex:2 1 520px;">
          <h1 data-i18n="title" style="margin:0">Wizualizator Dowodu ‚Ä¢ CERTEUS</h1>
          <p class="muted" data-i18n="subtitle" style="margin:4px 0 0">
            Status, przes≈Çanki, ≈Ça≈Ñcuch pochodzenia, surowy ALI. Prosto i czytelnie.
          </p>
        </div>
        <div class="col" style="min-width:auto; flex:0 0 auto; display:flex; gap:8px;
             justify-content:flex-end">
          <select id="lang" class="select" title="Language">
            <option value="pl">PL</option>
            <option value="en">EN</option>
          </select>
          <button class="btn" id="themeToggle" title="Prze≈ÇƒÖcz motyw" data-i18n="theme">
            Motyw
          </button>
          <a class="btn secondary" id="apiDocs" href="/docs" target="_blank"
             rel="noreferrer" data-i18n="api_docs">API Docs</a>
        </div>
      </div>

      <!-- CASE PICKER -->
      <div class="row" style="margin-top:8px">
        <div class="col" style="min-width:260px">
          <div id="case-picker"></div>
        </div>
      </div>

      <!-- FORM -->
      <div class="row" style="margin-top:12px">
        <div class="col">
          <div class="card" style="padding:14px">
            <div class="row" style="gap:10px; align-items:flex-end">
              <div style="flex:1 1 260px">
                <label for="caseId" data-i18n="case_id">Case ID</label>
                <input id="caseId" class="input" type="text"
                       placeholder="np. pl-286kk-0001" value="pl-286kk-0001"/>
              </div>
              <div class="stack">
                <button id="analyzeBtn" class="btn" aria-label="Analyze">
                  <span class="spinner" id="spinAnalyze" style="display:none"></span>
                  <span data-i18n="analyze">Analizuj</span> (Ctrl+Enter)
                </button>
                <button id="mockBtn" class="btn secondary" title="Dane demo, bez backendu"
                        data-i18n="demo">Demo</button>
                <button id="exportBtn" class="btn secondary" disabled
                        data-i18n="export">Generuj raport (Ctrl+E)</button>
              </div>
            </div>

            <div id="dropzone" class="dropzone" style="margin-top:10px">
              <div>
                <strong data-i18n="drop_strong">PrzeciƒÖgnij plik</strong>
                <span data-i18n="drop_text">tutaj lub</span>
                <label id="chooseLabel" for="file"
                       style="text-decoration:underline; cursor:pointer;"
                       data-i18n="drop_choose">wybierz</label>
              </div>
              <input id="file" type="file" multiple
                     style="position:absolute; left:-9999px"/>
              <div id="fileList" class="list"
                   style="margin-top:10px; text-align:left"></div>
            </div>
          </div>
          <div class="footer" data-i18n="paste_tip">
            Wklej ALI JSON (Ctrl+V), by zobaczyƒá wynik bez API.
          </div>
        </div>

        <!-- SUMMARY -->
        <div class="col">
          <div class="grid-2">
            <div class="card">
              <div style="display:flex;align-items:center;justify-content:space-between;
                          gap:8px">
                <div data-i18n="status">Status:</div>
                <div id="statusPill" class="pill unknown" aria-live="polite">‚Äî</div>
              </div>
              <div style="margin-top:8px">
                <div style="font-size:12px;color:var(--muted)" data-i18n="model">Model:</div>
                <div id="modelVal" class="json" style="margin-top:6px">‚Äî</div>
                <div class="stack" style="margin-top:6px">
                  <button class="btn secondary" id="copyModel" data-i18n="copy_model">
                    Kopiuj model
                  </button>
                </div>
              </div>
            </div>
            <div class="card">
              <div style="font-size:12px;color:var(--muted)" data-i18n="ledger_chain">
                ≈Åa≈Ñcuch pochodzenia
              </div>
              <div id="ledger" class="list" style="margin-top:8px">
                <div class="placeholder" data-i18n="no_data">Brak danych</div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>

    <!-- TABS -->
    <div class="card">
      <div class="tabs" role="tablist" aria-label="Sekcje">
        <button class="tab" role="tab" aria-selected="true" aria-controls="tab-overview"
                id="tabbtn-overview" data-i18n="tab_overview">PrzeglƒÖd</button>
        <button class="tab" role="tab" aria-selected="false" aria-controls="tab-premises"
                id="tabbtn-premises" data-i18n="tab_premises">Przes≈Çanki</button>
        <button class="tab" role="tab" aria-selected="false" aria-controls="tab-ledger"
                id="tabbtn-ledger" data-i18n="tab_ledger">Ledger</button>
        <button class="tab" role="tab" aria-selected="false" aria-controls="tab-viewer"
                id="tabbtn-viewer" data-i18n="tab_viewer">PodglƒÖd pliku</button>
        <button class="tab" role="tab" aria-selected="false" aria-controls="tab-raw"
                id="tabbtn-raw" data-i18n="tab_raw">Surowe</button>
      </div>

      <section id="tab-overview" class="tabpanel active" role="tabpanel"
               aria-labelledby="tabbtn-overview">
        <div class="row">
          <div class="col">
            <h2 data-i18n="satisfied_title">Przes≈Çanki ‚Ä¢ satisfied</h2>
            <div id="satisfied" class="chips">
              <div class="placeholder" style="width:100%" data-i18n="not_computed">
                Jeszcze nic nie policzono
              </div>
            </div>
          </div>
          <div class="col">
            <h2 data-i18n="missing_title">Przes≈Çanki ‚Ä¢ missing</h2>
            <div id="missing" class="chips">
              <div class="placeholder" style="width:100%" data-i18n="no_gaps">
                Brak brak√≥w (albo brak analizy)
              </div>
            </div>
          </div>
        </div>
      </section>

      <section id="tab-premises" class="tabpanel" role="tabpanel"
               aria-labelledby="tabbtn-premises">
        <div class="row">
          <div class="col">
            <h2 data-i18n="premises_list">Lista przes≈Çanek</h2>
            <div class="json" id="premisesJson">‚Äî</div>
            <div class="stack" style="margin-top:6px">
              <button class="btn secondary" data-copy-target="#premisesJson"
                      data-i18n="copy_json">Kopiuj JSON</button>
            </div>
          </div>
        </div>
      </section>

      <section id="tab-ledger" class="tabpanel" role="tabpanel"
               aria-labelledby="tabbtn-ledger">
        <h2 data-i18n="ledger_full">≈Åa≈Ñcuch pochodzenia</h2>
        <div id="ledgerFull" class="json">‚Äî</div>
        <div class="stack" style="margin-top:6px">
          <button class="btn secondary" data-copy-target="#ledgerFull"
                  data-i18n="copy_json">Kopiuj JSON</button>
        </div>
      </section>

      <!-- FILE VIEWER -->
      <section id="tab-viewer" class="tabpanel" role="tabpanel"
               aria-labelledby="tabbtn-viewer">
        <h2 data-i18n="viewer_title">PodglƒÖd pliku</h2>

        <!-- FILE LIST (mini) -->
        <div class="row" style="margin-top:8px">
          <div class="col" style="min-width:260px">
            <div id="file-list"></div>
          </div>
        </div>

        <!-- VIEWER -->
        <div class="stack" style="margin-bottom:8px">
          <button class="btn" id="prevFile" aria-label="Previous file">‚óÄ</button>
          <div id="fileIndicator" class="muted">0/0</div>
          <button class="btn" id="nextFile" aria-label="Next file">‚ñ∂</button>
          <button class="btn secondary" id="openInNew" data-i18n="open_new">
            Otw√≥rz w nowej karcie
          </button>
          <button class="btn" id="requestPreview" data-i18n="request_preview"
                  title="DOCX ‚Üí PDF przez API">
            Za≈ºƒÖdaj podglƒÖdu (API)
          </button>
        </div>
        <div class="viewer" id="viewer">
          <div class="placeholder" data-i18n="viewer_hint">
            Wybierz plik z listy powy≈ºej, aby zobaczyƒá podglƒÖd.
          </div>
        </div>
      </section>

      <section id="tab-raw" class="tabpanel" role="tabpanel"
               aria-labelledby="tabbtn-raw">
        <h2 data-i18n="raw_title">Surowy wynik (ALI payload)</h2>
        <div id="raw" class="json">‚Äî</div>
        <div class="stack" style="margin-top:6px">
          <button class="btn secondary" data-copy-target="#raw" data-i18n="copy_json">
            Kopiuj JSON
          </button>
        </div>
      </section>
    </div>

    <div class="footer">
      ¬© CERTEUS ‚Ä¢ UI v0.5 ‚Ä¢ <span data-i18n="mode">Tryb</span>:
      <span id="modeInfo">gotowy</span>
    </div>
  </div>

  <div class="toast" id="toasts" aria-live="polite" aria-atomic="true"></div>

  <!-- Case Manager -->
  <script src="./case_manager.js"></script>
  <script>
    // init case picker + sync with #caseId
    window.CerteusCaseManager.renderCasePicker("#case-picker", {
      onChange: (id) => { document.getElementById("caseId").value = id || ""; }
    });
    (function(){
      const a = window.CerteusCaseManager.getActiveCase?.() || "";
      if (a) document.getElementById("caseId").value = a;
    })();
  </script>

  <!-- File List + Bridge -->
  <script src="./file_list.js"></script>
  <script src="./file_list_bridge.js"></script>

  <!-- MAIN SCRIPT -->
  <script>
    // ====================== I18N ============================== //
    const I18N = {
      pl: {
        title:"Wizualizator Dowodu ‚Ä¢ CERTEUS",
        subtitle:"Status, przes≈Çanki, ≈Ça≈Ñcuch pochodzenia, surowy ALI. Prosto i czytelnie.",
        api_docs:"API Docs", theme:"Motyw", case_id:"Case ID",
        analyze:"Analizuj", demo:"Demo", export:"Generuj raport",
        drop_strong:"PrzeciƒÖgnij plik", drop_text:"tutaj lub", drop_choose:"wybierz",
        paste_tip:"Wklej ALI JSON (Ctrl+V), by zobaczyƒá wynik bez API.",
        status:"Status:", model:"Model:", copy_model:"Kopiuj model",
        ledger_chain:"≈Åa≈Ñcuch pochodzenia", no_data:"Brak danych",
        tab_overview:"PrzeglƒÖd", tab_premises:"Przes≈Çanki", tab_ledger:"Ledger",
        tab_viewer:"PodglƒÖd pliku", tab_raw:"Surowe",
        satisfied_title:"Przes≈Çanki ‚Ä¢ satisfied", missing_title:"Przes≈Çanki ‚Ä¢ missing",
        not_computed:"Jeszcze nic nie policzono", no_gaps:"Brak brak√≥w (albo brak analizy)",
        premises_list:"Lista przes≈Çanek", copy_json:"Kopiuj JSON",
        ledger_full:"≈Åa≈Ñcuch pochodzenia", raw_title:"Surowy wynik (ALI payload)",
        mode:"Tryb", viewer_title:"PodglƒÖd pliku",
        viewer_hint:"U≈ºyj ‚óÄ ‚ñ∂ aby prze≈ÇƒÖczaƒá pliki (nie strony PDF).",
        open_new:"Otw√≥rz w nowej karcie", request_preview:"Za≈ºƒÖdaj podglƒÖdu (API)",
        toast_analyzed:"Analiza zako≈Ñczona.", toast_demo:"Za≈Çadowano dane demo.",
        toast_export_ok:"Raport wygenerowany", toast_error:"B≈ÇƒÖd", toast_copied:"Skopiowano.",
        err_case:"Podaj Case ID", err_file:"Wybierz plik sprawy", err_http:"B≈ÇƒÖd HTTP",
        preview_btn:"PodglƒÖd"
      },
      en: {
        title:"Proof Visualizer ‚Ä¢ CERTEUS",
        subtitle:"Status, premises, provenance chain, raw ALI. Simple and clear.",
        api_docs:"API Docs", theme:"Theme", case_id:"Case ID",
        analyze:"Analyze", demo:"Demo", export:"Generate report",
        drop_strong:"Drag file", drop_text:"here or", drop_choose:"choose",
        paste_tip:"Paste ALI JSON (Ctrl+V) to render without API.",
        status:"Status:", model:"Model:", copy_model:"Copy model",
        ledger_chain:"Ledger chain", no_data:"No data",
        tab_overview:"Overview", tab_premises:"Premises", tab_ledger:"Ledger",
        tab_viewer:"File preview", tab_raw:"Raw",
        satisfied_title:"Premises ‚Ä¢ satisfied", missing_title:"Premises ‚Ä¢ missing",
        not_computed:"Nothing computed yet", no_gaps:"No gaps (or no analysis)",
        premises_list:"Premises list", copy_json:"Copy JSON",
        ledger_full:"Provenance chain", raw_title:"Raw result (ALI payload)",
        mode:"Mode", viewer_title:"File preview",
        viewer_hint:"Use ‚óÄ ‚ñ∂ to switch files (not PDF pages).",
        open_new:"Open in new tab", request_preview:"Request preview (API)",
        toast_analyzed:"Analysis completed.", toast_demo:"Demo data loaded.",
        toast_export_ok:"Report generated", toast_error:"Error", toast_copied:"Copied.",
        err_case:"Provide Case ID", err_file:"Choose a case file", err_http:"HTTP error",
        preview_btn:"Preview"
      }
    };

    // ====================== PREFS ============================= //
    const THEME_KEY='certeus-theme', LANG_KEY='certeus-lang';
    function applyTheme(theme){
      document.documentElement.setAttribute('data-theme', theme);
      localStorage.setItem(THEME_KEY, theme);
    }
    function t(key){
      const lang = localStorage.getItem(LANG_KEY) || 'pl';
      return I18N[lang][key] ?? key;
    }
    function applyI18N(){
      const lang = localStorage.getItem(LANG_KEY) || 'pl';
      document.documentElement.lang = lang;
      document.querySelectorAll('[data-i18n]').forEach(el=>{
        const k = el.getAttribute('data-i18n'); if(k) el.textContent = t(k);
      });
      const caseId = document.getElementById('caseId');
      caseId.placeholder = lang==='pl' ? 'np. pl-286kk-0001' : 'e.g. pl-286kk-0001';
      // zaktualizuj etykiety przycisk√≥w listy plik√≥w (je≈õli istniejƒÖ)
      document.querySelectorAll('[data-i18n-dyn=preview_btn]')
        .forEach(btn=> btn.textContent = t('preview_btn'));
    }

    // ====================== CONFIG ============================ //
    const API_BASE = ""; // pusty => ten sam origin

    // ====================== ELEMENTS ========================== //
    const $ = sel => document.querySelector(sel);
    const elLang=$('#lang'), elCaseId=$('#caseId'), elFile=$('#file');
    const elFileList=$('#fileList'), elDrop=$('#dropzone');
    const elAnalyze=$('#analyzeBtn'), elMock=$('#mockBtn'), elExport=$('#exportBtn');
    const elSpinAnalyze=$('#spinAnalyze'), elModeInfo=$('#modeInfo');
    const elStatus=$('#statusPill'), elModel=$('#modelVal');
    const elLedger=$('#ledger'), elLedgerFull=$('#ledgerFull');
    const elSat=$('#satisfied'), elMiss=$('#missing'), elRaw=$('#raw');
    const elThemeToggle=$('#themeToggle'), elViewer=$('#viewer');
    const elFileIndicator=$('#fileIndicator'), elPrevFile=$('#prevFile');
    const elNextFile=$('#nextFile'), elOpenInNew=$('#openInNew');
    const elRequestPreview=$('#requestPreview');
    const elChooseLabel=document.getElementById('chooseLabel');
    const tabs=[
      {btn:$('#tabbtn-overview'), panel:$('#tab-overview')},
      {btn:$('#tabbtn-premises'), panel:$('#tab-premises')},
      {btn:$('#tabbtn-ledger'), panel:$('#tab-ledger')},
      {btn:$('#tabbtn-viewer'), panel:$('#tab-viewer')},
      {btn:$('#tabbtn-raw'), panel:$('#tab-raw')},
    ];

    // ====================== INIT ============================== //
    (function init(){
      applyTheme(localStorage.getItem(THEME_KEY) || 'dark');
      const savedLang = localStorage.getItem(LANG_KEY) || 'pl';
      document.getElementById('lang').value = savedLang; applyI18N();
    })();
    elThemeToggle.addEventListener('click', ()=>{
      const now = document.documentElement.getAttribute('data-theme')==='dark'
        ? 'light' : 'dark'; applyTheme(now);
    });
    elLang.addEventListener('change', ()=>{
      localStorage.setItem(LANG_KEY, elLang.value); applyI18N();
    });

    // ====================== UTILS ============================= //
    function toast(msg){
      const wrap=document.getElementById('toasts');
      const div=document.createElement('div'); div.className='item';
      div.textContent = msg; wrap.appendChild(div);
      setTimeout(()=> div.remove(), 3000);
    }
    function setBusy(btn, busy){
      if(btn===elAnalyze){ elSpinAnalyze.style.display = busy?'inline-block':'none'; }
      btn.disabled = !!busy;
    }
    function setStatusPill(status){
      elStatus.classList.remove('sat','unsat','unknown');
      const s=(status||'unknown').toLowerCase();
      elStatus.classList.add(s); elStatus.textContent = s;
    }
    function renderList(target, items){
      target.innerHTML = '';
      if(!items || !items.length){
        const div=document.createElement('div');
        div.className='placeholder'; div.textContent=t('no_data');
        target.appendChild(div); return;
      }
      items.forEach(v=>{
        const chip=document.createElement('div'); chip.className='chip';
        chip.textContent=String(v); target.appendChild(chip);
      });
    }
    function renderLedgerSimple(target, chain){
      target.innerHTML=''; if(!chain || !chain.length){
        const d=document.createElement('div'); d.className='placeholder';
        d.textContent=t('no_data'); target.appendChild(d); return;
      }
      chain.forEach((h,idx)=>{
        const line=document.createElement('div');
        line.textContent=`${idx+1}. ${h}`; target.appendChild(line);
      });
    }
    function prettyJSON(obj){ return JSON.stringify(obj, null, 2); }

    // ================== FILE LIST HELPER ====================== //
    function registerFileInList(name, url, type){
      if(!url || !window.CerteusFileBridge) return;
      const id = Date.now()+"-"+Math.random().toString(36).slice(2,7);
      window.CerteusFileBridge.addFile({
        id, name: name||"plik", url,
        type: type||"application/octet-stream", meta:{}
      });
    }

    // ====================== FILES ============================= //
    let files=[]; let fileIdx=-1;

    function listFiles(){
      elFileList.innerHTML='';
      if(!files.length){
        const p=document.createElement('div'); p.className='placeholder';
        p.textContent=t('no_data'); elFileList.appendChild(p); return;
      }
      files.forEach((f,i)=>{
        const row=document.createElement('div');
        row.style.display='flex'; row.style.justifyContent='space-between';
        row.style.alignItems='center'; row.style.gap='8px';
        const left=document.createElement('div');
        left.textContent=`${i+1}. ${f.name} (${f.type||'unknown'})`;
        const right=document.createElement('div');
        const btn=document.createElement('button'); btn.className='btn secondary';
        btn.setAttribute('data-i18n-dyn','preview_btn');
        btn.textContent=t('preview_btn');
        btn.onclick=()=>{
          fileIdx=i; updateIndicator(); openViewerFor(files[fileIdx]);
        };
        right.appendChild(btn); row.appendChild(left); row.appendChild(right);
        elFileList.appendChild(row);
      });
      updateIndicator();
    }

    function updateIndicator(){
      elFileIndicator.textContent = files.length ? `${(fileIdx+1)}/${files.length}`:'0/0';
    }
    function setFilesFromFileList(list){
      files=Array.from(list||[]); fileIdx=files.length?0:-1; listFiles();
      if(fileIdx>=0){ openViewerFor(files[fileIdx]); }
    }

    // Label nie dubluje klikniƒôcia dropzone
    elChooseLabel?.addEventListener('click', (e)=> e.stopPropagation());

    // Klik w dropzone: czy≈õƒá value, ≈ºeby 'change' dzia≈Ça≈Ç dla tego samego pliku
    elDrop.addEventListener('click', (e)=>{
      if(e.target===elFile || e.target===elChooseLabel) return;
      elFile.value=''; elFile.click();
    });
    elDrop.addEventListener('dragover',(e)=>{ e.preventDefault(); elDrop.classList.add('drag');});
    elDrop.addEventListener('dragleave',()=> elDrop.classList.remove('drag'));
    elDrop.addEventListener('drop',(e)=>{
      e.preventDefault(); elDrop.classList.remove('drag');
      if(e.dataTransfer.files && e.dataTransfer.files.length){
        setFilesFromFileList(e.dataTransfer.files); elFile.value='';
      }
    });
    elFile.addEventListener('change',()=>{
      setFilesFromFileList(elFile.files); elFile.value='';
    });

    elPrevFile.addEventListener('click',()=>{
      if(!files.length) return;
      fileIdx=(fileIdx-1+files.length)%files.length;
      updateIndicator(); openViewerFor(files[fileIdx]);
    });
    elNextFile.addEventListener('click',()=>{
      if(!files.length) return;
      fileIdx=(fileIdx+1)%files.length;
      updateIndicator(); openViewerFor(files[fileIdx]);
    });

    function openViewerFor(file){
      const type=(file.type||'').toLowerCase();
      elViewer.innerHTML='';

      // NEW TAB handler: generuj ≈õwie≈ºy URL dopiero przy klikniƒôciu
      elOpenInNew.onclick=()=>{
        try{
          const newUrl = URL.createObjectURL(file);
          window.open(newUrl,'_blank');
          setTimeout(()=> URL.revokeObjectURL(newUrl), 15000);
        }catch(e){ toast(String(e)); }
      };

      if(type.startsWith('image/')){
        const url=URL.createObjectURL(file);
        const img=document.createElement('img');
        img.alt=file.name;
        img.src=url;
        elViewer.appendChild(img);
        // nie revoke ‚Äî pozw√≥l przeglƒÖdarce posprzƒÖtaƒá po zamkniƒôciu
        return;
      }
      if(type==='application/pdf'){
        const url=URL.createObjectURL(file);
        const frame=document.createElement('iframe');
        frame.title=file.name;
        frame.src=url;
        elViewer.appendChild(frame);
        return;
      }
      if(type.startsWith('text/')){
        const reader=new FileReader();
        reader.onload=()=>{
          const pre=document.createElement('pre');
          pre.className='text'; pre.textContent=reader.result;
          elViewer.appendChild(pre);
        };
        reader.readAsText(file); return;
      }
      // For DOCX / others ‚Üí suggest API preview
      const msg=document.createElement('div');
      msg.className='placeholder'; msg.textContent=t('request_preview');
      elViewer.appendChild(msg);
    }

    // Request preview via API (e.g., DOCX ‚Üí PDF)
    elRequestPreview.addEventListener('click', async ()=>{
      if(fileIdx<0 || !files[fileIdx]) return; const f=files[fileIdx];
      try{
        const fd=new FormData(); fd.append('file', f, f.name);
        const res=await fetch(`${API_BASE}/v1/preview`,{method:'POST', body:fd});
        if(!res.ok){
          const txt=await res.text().catch(()=>String(res.status));
          return toast(`${t('err_http')} ${res.status}: ${txt}`);
        }
        const data=await res.json(); if(!data.url) return toast(t('toast_error'));
        // Load returned URL in viewer
        elViewer.innerHTML='';
        const frame=document.createElement('iframe');
        frame.src=data.url; frame.title=f.name; elViewer.appendChild(frame);
        // NEW TAB handler for preview URL
        elOpenInNew.onclick=()=>{ try{ window.open(data.url,'_blank'); }catch(e){ toast(String(e)); } };
        // Register preview in mini list
        registerFileInList((f && f.name) || "DOCX preview", data.url, "application/pdf");
      }catch(e){ toast(String(e)); }
    });

    // ====================== RENDER (ALI) ======================= //
    let lastAnalysis=null;
    function renderALI(payload){
      const ar=payload?.analysis_result || payload;
      setStatusPill(ar?.status);
      elModel.textContent = typeof ar?.model==='object'
        ? prettyJSON(ar.model) : (ar?.model ?? '‚Äî');
      renderList(elSat, ar?.trace?.satisfied);
      renderList(elMiss, ar?.trace?.missing);
      renderLedgerSimple(elLedger, ar?.provenance?.ledger_chain);
      elRaw.textContent=prettyJSON(payload);
      elLedgerFull.textContent=prettyJSON(ar?.provenance || {});
      lastAnalysis=payload; elExport.disabled=false;
      elModeInfo.textContent = (localStorage.getItem(LANG_KEY)||'pl')==='pl'
        ? 'analizowano' : 'analyzed';
    }

    function renderError(msg){
      setStatusPill('unknown'); elModel.textContent='‚Äî';
      renderList(elSat,[]); renderList(elMiss,[]);
      renderLedgerSimple(elLedger,[]);
      elRaw.textContent=prettyJSON({status:'unknown', reasons: msg||t('toast_error')});
      elLedgerFull.textContent=prettyJSON({});
      lastAnalysis=null; elExport.disabled=true;
      elModeInfo.textContent=(localStorage.getItem(LANG_KEY)||'pl')==='pl'
        ? 'b≈ÇƒÖd' : 'error';
      toast(msg||t('toast_error'));
    }

    // ====================== ACTIONS =========================== //
    async function doAnalyze(){
      try{
        setBusy(elAnalyze,true);
        elModeInfo.textContent=(localStorage.getItem(LANG_KEY)||'pl')==='pl'
          ? 'analizujƒô' : 'analyzing';
        const caseId=elCaseId.value.trim();
        const file=files[0] || elFile.files[0];
        if(!caseId) return renderError(t('err_case'));
        if(!file) return renderError(t('err_file'));
        const fd=new FormData(); fd.append('file', file, file.name);
        const res=await fetch(
          `${API_BASE}/v1/analyze?case_id=${encodeURIComponent(caseId)}`,
          { method:'POST', body:fd }
        );
        if(!res.ok){
          const ttxt=await res.text().catch(()=>String(res.status));
          return renderError(`${t('err_http')} ${res.status}: ${ttxt}`);
        }
        const data=await res.json(); renderALI(data); toast(t('toast_analyzed'));
      }catch(e){ renderError(String(e)); }
      finally{ setBusy(elAnalyze,false); }
    }

    function loadMock(){
      const mock={
        case_id: elCaseId.value || 'pl-286kk-0001',
        analysis_result:{
          status:'sat', model:'[oszustwo_stwierdzone = True]',
          trace:{ satisfied:['P_CEL','P_WPROWADZENIE','P_ROZPORZADZENIE'], missing:[] },
          provenance:{ rule_id:'R_286_OSZUSTWO',
            ledger_chain:['stub://ingest','stub://lexlog','stub://smt'] }
        }
      };
      renderALI(mock); toast(t('toast_demo'));
    }

    async function doExport(){
      try{
        if(!lastAnalysis) return;
        setBusy(elExport,true);
        elModeInfo.textContent=(localStorage.getItem(LANG_KEY)||'pl')==='pl'
          ? 'eksportujƒô' : 'exporting';
        const payload={
          case_id: lastAnalysis.case_id
            || (lastAnalysis.analysis_result?.provenance?.rule_id ?? 'unknown'),
          analysis_result: lastAnalysis.analysis_result || lastAnalysis
        };
        const res=await fetch(`${API_BASE}/v1/export`,{
          method:'POST', headers:{'Content-Type':'application/json'},
          body: JSON.stringify(payload)
        });
        if(!res.ok){
          const ttxt=await res.text().catch(()=>String(res.status));
          return toast(`${t('err_http')} ${res.status} ${ttxt}`);
        }
        const data=await res.json();
        toast(`${t('toast_export_ok')}: ${data.path || '(response)'}`);
      }catch(e){ toast(`${t('toast_error')}: ${String(e)}`); }
      finally{
        elExport.disabled = !lastAnalysis;
        elModeInfo.textContent = lastAnalysis
          ? ((localStorage.getItem(LANG_KEY)||'pl')==='pl'?'analizowano':'analyzed')
          : ((localStorage.getItem(LANG_KEY)||'pl')==='pl'?'gotowy':'ready');
      }
    }

    document.getElementById('analyzeBtn').addEventListener('click', doAnalyze);
    document.getElementById('mockBtn').addEventListener('click', loadMock);
    document.getElementById('exportBtn').addEventListener('click', doExport);

    // Tabs
    tabs.forEach(({btn,panel})=>{
      btn.addEventListener('click',()=>{
        tabs.forEach(({btn:b,panel:p})=>{
          b.setAttribute('aria-selected','false'); p.classList.remove('active');
        });
        btn.setAttribute('aria-selected','true'); panel.classList.add('active');
      });
    });

    // Shortcuts
    document.addEventListener('keydown',(e)=>{
      if((e.ctrlKey||e.metaKey) && e.key==='Enter'){ e.preventDefault(); doAnalyze(); }
      if((e.ctrlKey||e.metaKey) && (e.key.toLowerCase()==='e')){
        e.preventDefault(); doExport();
      }
      if(!e.ctrlKey && !e.metaKey && e.key.toLowerCase()==='m'){ loadMock(); }
    });

    // Paste raw JSON to view
    window.addEventListener('paste',(ev)=>{
      try{
        const text=ev.clipboardData.getData('text');
        if(text && text.trim().startsWith('{')){
          const obj=JSON.parse(text); renderALI(obj);
          toast((localStorage.getItem(LANG_KEY)||'pl')==='pl'
            ? 'Za≈Çadowano z JSON.' : 'Loaded from JSON.');
        }
      }catch{}
    });

    // Copy model
    document.getElementById('copyModel').addEventListener(
      'click',()=> navigator.clipboard.writeText(elModel.textContent||'')
        .then(()=> toast(t('toast_copied')))
    );
  </script>
</body>
</html>

```


===== FILE: clients/web/tpl_diff/index.html =====
```text
<!--
+=====================================================================+
|                              CERTEUS                                |
+=====================================================================+
| FILE:   clients/web/tpl_diff/index.html                             |
| ROLE:   TPL Diff (stub) ‚Äì health page for timeline/provenance UI    |
| DATE:   2025-08-17                                                  |
+=====================================================================+
-->
<!doctype html>
<html lang="pl">
<head>
  <meta charset="utf-8" />
  <meta name="viewport" content="width=device-width,initial-scale=1" />
  <title>CERTEUS ‚Äì TPL Diff (stub)</title>
  <style>
    body { font-family: system-ui, sans-serif; background:#f0f2f5; color:#111; margin:0; }
    .wrap { max-width: 900px; margin: 40px auto; padding: 24px; background:#fff; border-radius:12px; box-shadow:0 10px 30px rgba(0,0,0,.08); }
    h1 { margin-top:0; color:#0d2c4e; }
    .card { border:2px dashed #cbd5e1; background:#f8fafc; border-radius:12px; padding:24px; text-align:center; }
  </style>
</head>
<body>
  <main class="wrap">
    <h1>TPL Diff (stub)</h1>
    <div class="card">[ Przysz≈Çy interaktywny timeline TPL / diff ≈∫r√≥de≈Ç ]</div>
    <p>Status: <strong>health: OK</strong></p>
  </main>
</body>
</html>

```


===== FILE: core/api.py =====
```text
# +=====================================================================+
# |                          CERTEUS                                    |
# +=====================================================================+
# | MODULE:  F:/projekty/certeus/core/api.py                             |
# | DATE:    2025-08-17                                                  |
# +=====================================================================+


# +-------------------------------------------------------------+

# |                          CERTEUS                            |

# +-------------------------------------------------------------+

# | FILE: core/api.py                                         |

# | ROLE: Project module.                                       |

# | PLIK: core/api.py                                         |

# | ROLA: Modu≈Ç projektu.                                       |

# +-------------------------------------------------------------+


"""



PL: Modu≈Ç CERTEUS ‚Äì uzupe≈Çnij opis funkcjonalny.



EN: CERTEUS module ‚Äì please complete the functional description.



"""


# +-------------------------------------------------------------+


# |                          CERTEUS                            |


# +-------------------------------------------------------------+


# | FILE: core/api.py                                         |


# | ROLE: Project module.                                       |


# | PLIK: core/api.py                                         |


# | ROLA: Modu≈Ç projektu.                                       |


# +-------------------------------------------------------------+


class PluginAPI:
    def __init__(self):
        self._plugins = {}

        self.adapters = {}

        self.rules = {}

        self.exporters = {}

    # bookkeeping

    def register_plugin(self, name: str, meta: dict):
        self._plugins[name] = meta

    def list_plugins(self):
        return self._plugins.keys()

    # domains

    def register_adapter(self, key: str, fn):
        self.adapters[key] = fn

    def register_rule(self, key: str, data):
        self.rules[key] = data

    def register_exporter(self, key: str, fn):
        self.exporters[key] = fn

```


===== FILE: core/pco/__init__.py =====
```text
#!/usr/bin/env python3
# +=====================================================================+
# |                              CERTEUS                                |
# +=====================================================================+
# | PACKAGE / PAKIET: core/pco                                          |
# | DATE / DATA: 2025-08-19                                             |
# +=====================================================================+
# | EN: Core PCO utilities: canonical hashing, Merkle operations, and   |
# |     Ed25519 signing/verification for public, zero-PII evidence.     |
# | PL: JƒÖdro PCO: kanoniczne hashowanie, operacje Merkle oraz           |
# |     podpis/weryfikacja Ed25519 dla publicznych dowod√≥w 0 PII.       |
# +=====================================================================+

from __future__ import annotations

__all__ = [
    "b64u_encode",
    "b64u_decode",
    "sha256_hex",
    "canonical_bundle_hash_hex",
    "compute_leaf_hex",
    "canonical_digest_hex",
    "ed25519_sign_b64u",
    "ed25519_verify_b64u",
    "load_pubkey_bytes_from_env",
    "MerkleStep",
    "parse_merkle_proof",
    "apply_merkle_path",
    "PublicPCO",
]

from .crypto import (  # noqa: E402
    b64u_decode,
    b64u_encode,
    canonical_bundle_hash_hex,
    canonical_digest_hex,
    compute_leaf_hex,
    ed25519_sign_b64u,
    ed25519_verify_b64u,
    load_pubkey_bytes_from_env,
    sha256_hex,
)
from .merkle import (  # noqa: E402
    MerkleStep,
    apply_merkle_path,
    parse_merkle_proof,
)
from .public_payload import PublicPCO  # noqa: E402

```


===== FILE: core/pco/crypto.py =====
```text
#!/usr/bin/env python3
# +=====================================================================+
# |                              CERTEUS                                |
# +=====================================================================+
# | MODULE / MODU≈Å: core/pco/crypto.py                                  |
# | DATE / DATA: 2025-08-19                                             |
# +=====================================================================+
# | EN: Canonical hashing and Ed25519 signing/verification helpers.     |
# | PL: Pomocnicze: kanoniczne hashowanie i podpis/weryfikacja Ed25519. |
# +=====================================================================+

from __future__ import annotations

# ----Bloki----- IMPORTY
import base64
import hashlib
import json
import os

from cryptography.hazmat.primitives.asymmetric.ed25519 import (
    Ed25519PrivateKey,
    Ed25519PublicKey,
)


# ----Bloki----- B64URL
def b64u_encode(data: bytes) -> str:
    return base64.urlsafe_b64encode(data).rstrip(b"=").decode("ascii")


def b64u_decode(s: str) -> bytes:
    pad = "=" * (-len(s) % 4)
    return base64.urlsafe_b64decode(s + pad)


# ----Bloki----- HASH
def sha256_hex(data: bytes | str) -> str:
    if isinstance(data, str):
        data = data.encode("utf-8")
    return hashlib.sha256(data).hexdigest()


def _lfsc_sha256(lfsc_text: str) -> str:
    return sha256_hex(lfsc_text)


def _drat_sha256_maybe(drat_text: str | None) -> str | None:
    return None if drat_text is None else sha256_hex(drat_text)


def canonical_bundle_hash_hex(smt2_hash_hex: str, lfsc_text: str, drat_text: str | None = None) -> str:
    """
    EN/PL: Canonical bundle hash = SHA256( JSON({lfsc_sha256, smt2_hash[, drat_sha256]}) ),
           where JSON is compact and key-sorted (separators=(',', ':'), sort_keys=True).
    """
    payload: dict[str, str] = {
        "lfsc_sha256": _lfsc_sha256(lfsc_text),
        "smt2_hash": smt2_hash_hex.lower(),
    }
    drat = _drat_sha256_maybe(drat_text)
    if drat is not None:
        payload["drat_sha256"] = drat
    blob = json.dumps(payload, separators=(",", ":"), sort_keys=True).encode("utf-8")
    return sha256_hex(blob)


def compute_leaf_hex(rid: str, bundle_hash_hex: str) -> str:
    """
    EN/PL: Leaf = sha256( sha256(rid) || bundle_hash ).
    """
    rid_hash = hashlib.sha256(rid.encode("utf-8")).digest()
    bundle_hash = bytes.fromhex(bundle_hash_hex)
    return hashlib.sha256(rid_hash + bundle_hash).hexdigest()


def canonical_digest_hex(
    *,
    rid: str,
    smt2_hash_hex: str,
    lfsc_text: str,
    merkle_root_hex: str,
    drat_text: str | None = None,
) -> str:
    """
    EN/PL: Canonical digest over public payload parts:
      sha256(
        sha256(rid) ||
        smt2_hash ||
        sha256(lfsc) ||
        [sha256(drat)?] ||
        merkle_root
      )
    """
    parts_hex: list[str] = [
        sha256_hex(rid.encode("utf-8")),
        smt2_hash_hex.lower(),
        _lfsc_sha256(lfsc_text),
    ]
    drat = _drat_sha256_maybe(drat_text)
    if drat is not None:
        parts_hex.append(drat)
    parts_hex.append(merkle_root_hex.lower())

    data = b"".join(bytes.fromhex(h) for h in parts_hex)
    return sha256_hex(data)


# ----Bloki----- Ed25519
def ed25519_sign_b64u(private_key_bytes: bytes, msg_hex: str) -> str:
    sk = Ed25519PrivateKey.from_private_bytes(private_key_bytes)
    sig = sk.sign(bytes.fromhex(msg_hex))
    return b64u_encode(sig)


def ed25519_verify_b64u(public_key_bytes: bytes, signature_b64u: str, msg_hex: str) -> None:
    pk = Ed25519PublicKey.from_public_bytes(public_key_bytes)
    pk.verify(b64u_decode(signature_b64u), bytes.fromhex(msg_hex))  # raises on failure


def load_pubkey_bytes_from_env() -> bytes:
    """
    EN/PL: Load Ed25519 public key from ENV: ED25519_PUBKEY_B64URL or ED25519_PUBKEY_HEX.
    """
    b64u = os.getenv("ED25519_PUBKEY_B64URL")
    if b64u:
        return b64u_decode(b64u)
    hexv = os.getenv("ED25519_PUBKEY_HEX")
    if hexv:
        return bytes.fromhex(hexv)
    raise RuntimeError("Missing ED25519_PUBKEY_B64URL or ED25519_PUBKEY_HEX")

```


===== FILE: core/pco/merkle.py =====
```text
#!/usr/bin/env python3
# +=====================================================================+
# |                              CERTEUS                                |
# +=====================================================================+
# | MODULE / MODU≈Å: core/pco/merkle.py                                  |
# | DATE / DATA: 2025-08-19                                             |
# +=====================================================================+
# | EN: Merkle step type, proof parsing (MVP / legacy), and root apply. |
# | PL: Typ kroku Merkle, parser dowodu (MVP/legacy) i obliczanie korza.|
# +=====================================================================+

from __future__ import annotations

# ----Bloki----- IMPORTY
import hashlib
from dataclasses import dataclass
from typing import Any, Literal

# ----Bloki----- TYPY
Dir = Literal["L", "R"]


@dataclass(frozen=True, slots=True)
class MerkleStep:
    sibling: str  # hex
    dir: Dir  # "L" | "R"


# ----Bloki----- HASH
def _h(b: bytes) -> bytes:
    return hashlib.sha256(b).digest()


# ----Bloki----- MERKLE
def parse_merkle_proof(raw: Any) -> list[MerkleStep]:
    """
    EN/PL: Accept:
      ‚Ä¢ [] (MVP)
      ‚Ä¢ [{"sibling":HEX, "dir":"L|R"}]
      ‚Ä¢ {"path":[.]} legacy; alias 'position' ‚â° 'dir'
    """
    if raw is None:
        return []
    if isinstance(raw, dict) and "path" in raw:
        raw = raw["path"]
    if isinstance(raw, list):
        out: list[MerkleStep] = []
        for step in raw:
            if isinstance(step, MerkleStep):
                out.append(step)
                continue
            if not isinstance(step, dict):
                raise ValueError("Invalid merkle step: must be object")
            d = step.get("dir") or step.get("position")
            sib = step.get("sibling")
            if d not in ("L", "R") or not isinstance(sib, str) or not sib:
                raise ValueError("Invalid merkle step fields")
            out.append(MerkleStep(sibling=sib, dir=d))  # type: ignore[arg-type]
        return out
    raise ValueError("merkle_proof must be list or {path:[.]}")


def apply_merkle_path(leaf_hex: str, path: list[MerkleStep]) -> str:
    cur = bytes.fromhex(leaf_hex)
    for step in path:
        sib = bytes.fromhex(step.sibling)
        if step.dir == "L":
            cur = _h(sib + cur)
        else:  # "R"
            cur = _h(cur + sib)
    return cur.hex()

```


===== FILE: core/pco/public_payload.py =====
```text
#!/usr/bin/env python3
# +=====================================================================+
# |                              CERTEUS                                |
# +=====================================================================+
# | MODULE / MODU≈Å: core/pco/public_payload.py                          |
# | DATE / DATA: 2025-08-19                                             |
# +=====================================================================+
# | EN: Public PCO object: builds/verifies zero-PII payload with        |
# |     canonical hashing, Merkle, and Ed25519 signature.               |
# | PL: Obiekt publicznego PCO: budowa/weryfikacja payloadu 0 PII       |
# |     (kanoniczne hashowanie, Merkle, podpis Ed25519).                |
# +=====================================================================+

from __future__ import annotations

# ----Bloki----- IMPORTY
from dataclasses import asdict, dataclass
from typing import Any

from .crypto import (
    canonical_bundle_hash_hex,
    canonical_digest_hex,
    compute_leaf_hex,
    ed25519_sign_b64u,
    ed25519_verify_b64u,
)
from .merkle import MerkleStep, apply_merkle_path, parse_merkle_proof

# ----Bloki----- KONSTANTY
FORBIDDEN_KEYS: set[str] = {
    "name",
    "first_name",
    "last_name",
    "pesel",
    "email",
    "phone",
    "address",
    "dob",
    "ssn",
    "patient_id",
    "person_id",
    "user_id",
    "ip",
    "session_id",
    "headers",
}


# ----Bloki----- MODEL
@dataclass(slots=True)
class PublicPCO:
    rid: str
    smt2_hash: str
    lfsc: str
    merkle_proof: list[MerkleStep]
    signature: str
    drat: str | None = None
    issued_at: str | None = None  # informacyjne, niewchodzƒÖce do digestu

    # ----Bloki----- BUDOWA
    @staticmethod
    def build_and_sign(
        *,
        rid: str,
        smt2_hash: str,
        lfsc: str,
        merkle_proof_raw: Any,
        ed25519_private_bytes: bytes,
        drat: str | None = None,
        issued_at: str | None = None,
    ) -> PublicPCO:
        proof = parse_merkle_proof(merkle_proof_raw)
        bundle_hash = canonical_bundle_hash_hex(smt2_hash, lfsc, drat)
        merkle_root = (
            apply_merkle_path(compute_leaf_hex(rid, bundle_hash), proof)
            if proof
            else compute_leaf_hex(rid, bundle_hash)
        )
        digest = canonical_digest_hex(
            rid=rid,
            smt2_hash_hex=smt2_hash,
            lfsc_text=lfsc,
            drat_text=drat,
            merkle_root_hex=merkle_root,
        )
        sig = ed25519_sign_b64u(ed25519_private_bytes, digest)
        return PublicPCO(
            rid=rid,
            smt2_hash=smt2_hash.lower(),
            lfsc=lfsc,
            drat=drat,
            merkle_proof=proof,
            signature=sig,
            issued_at=issued_at,
        )

    # ----Bloki----- WERYFIKACJA
    def verify(self, *, ed25519_public_bytes: bytes) -> None:
        # 0 PII ‚Äì kontrola kluczy nazewniczo (sam payload ma tylko pola dozwolone)
        forbidden = sorted(set(asdict(self).keys()) & FORBIDDEN_KEYS)
        if forbidden:
            raise ValueError(f"PII field(s) present: {forbidden}")

        bundle_hash = canonical_bundle_hash_hex(self.smt2_hash, self.lfsc, self.drat)
        leaf = compute_leaf_hex(self.rid, bundle_hash)
        root = apply_merkle_path(leaf, self.merkle_proof) if self.merkle_proof else leaf
        digest = canonical_digest_hex(
            rid=self.rid,
            smt2_hash_hex=self.smt2_hash,
            lfsc_text=self.lfsc,
            drat_text=self.drat,
            merkle_root_hex=root,
        )
        ed25519_verify_b64u(ed25519_public_bytes, self.signature, digest)

```


===== FILE: core/plugin_loader.py =====
```text
# +=====================================================================+
# |                          CERTEUS                                    |
# +=====================================================================+
# | MODULE:  F:/projekty/certeus/core/plugin_loader.py                   |
# | DATE:    2025-08-17                                                  |
# +=====================================================================+


# +-------------------------------------------------------------+

# |                          CERTEUS                            |

# +-------------------------------------------------------------+

# | FILE: core/plugin_loader.py                               |

# | ROLE: Project module.                                       |

# | PLIK: core/plugin_loader.py                               |

# | ROLA: Modu≈Ç projektu.                                       |

# +-------------------------------------------------------------+


"""



PL: Modu≈Ç CERTEUS ‚Äì uzupe≈Çnij opis funkcjonalny.



EN: CERTEUS module ‚Äì please complete the functional description.



"""


# +-------------------------------------------------------------+


# |                    CERTEUS - Plugin Loader                  |


# +-------------------------------------------------------------+


# | PLIK / FILE: core/plugin_loader.py                          |


# | ROLA / ROLE: Wyszukuje i ≈Çaduje pluginy z katalogu          |


# |              'plugins/<name>/{plugin.yaml, src/main.py}'.   |


# |              Scans & loads plugins from the canonical tree. |


# +-------------------------------------------------------------+

from __future__ import annotations

import importlib
import logging
import os
from dataclasses import dataclass
from pathlib import Path
from typing import Any

try:
    import yaml  # PyYAML (preferowane)


except Exception:  # pragma: no cover
    yaml = None  # type: ignore[assignment]


log = logging.getLogger("certeus.plugins")


if not log.handlers:
    logging.basicConfig(level=logging.INFO, format="%(levelname)s %(name)s: %(message)s")


# === KONFIG / CONFIG ===


REPO_ROOT = Path(__file__).resolve().parents[1]


PLUGINS_DIR = REPO_ROOT / "plugins"


# Dopuszczamy entrypointy:


# - modu≈Ç:  module: "plugins.lexlog_rules_pl.src.main"


# - opcjonalnie: register: "register"  (funkcja)


#   w braku: class Plugin z metodƒÖ register(api)


@dataclass(frozen=True, slots=True)
class PluginSpec:
    name: str

    module: str

    register: str | None = None

    enabled: bool = True

    version: str | None = None


def _parse_plugin_yaml(path: Path) -> PluginSpec | None:
    """PL: Parsuje plugin.yaml ‚Üí PluginSpec. EN: Parse plugin.yaml ‚Üí PluginSpec."""

    try:
        raw = path.read_text(encoding="utf-8")

    except FileNotFoundError:
        return None

    data: dict[str, Any]

    if yaml:
        data = yaml.safe_load(raw) or {}

    else:  # fallback na prosty parser klucz: warto≈õƒá
        data = {}

        for line in raw.splitlines():
            line = line.strip()

            if not line or line.startswith("#") or ":" not in line:
                continue

            k, v = line.split(":", 1)

            data[k.strip()] = v.strip().strip("'\"")

    name = str(data.get("name") or path.parent.name)

    module = str(data.get("module") or "")

    register = str(data["register"]) if "register" in data else None

    enabled = bool(data.get("enabled", True))

    version = data.get("version")

    if not module:
        log.warning("Plugin '%s' has empty 'module' in %s", name, path)

        return None

    return PluginSpec(name=name, module=module, register=register, enabled=enabled, version=version)


def _discover_plugins(base_dir: Path = PLUGINS_DIR) -> list[PluginSpec]:
    """PL: Znajd≈∫ wszystkie plugin.yaml. EN: Find all plugin.yaml files."""

    specs: list[PluginSpec] = []

    if not base_dir.exists():
        log.info("Plugins dir not found: %s", base_dir)

        return specs

    for plugin_root in sorted(base_dir.iterdir()):
        if not plugin_root.is_dir():
            continue

        yml = plugin_root / "plugin.yaml"

        spec = _parse_plugin_yaml(yml)

        if spec and spec.enabled:
            specs.append(spec)

    return specs


def _import_module(module_path: str) -> Any:
    """PL/EN: Import by module path (importlib)."""

    return importlib.import_module(module_path)


def _register_into_api(api: Any, spec: PluginSpec, mod: Any) -> str | None:
    """



    PL: Pr√≥buje wywo≈Çaƒá rejestracjƒô; wspiera:



        - funkcjƒô module-level: register(api[, name])



        - klasƒô Plugin z metodƒÖ register(api)



        - API.register(plugin) lub API.register(name, plugin)



    EN: Perform registration via module function or Plugin class.



    """

    # 1) Preferuj module-level register(...)

    if spec.register and hasattr(mod, spec.register):
        fn = getattr(mod, spec.register)

        try:
            fn(api, spec.name)  # register(api, name)

        except TypeError:
            fn(api)  # register(api)

        return spec.name

    # 2) Szukaj klasy Plugin z metodƒÖ register(api)

    plugin_obj = None

    if hasattr(mod, "Plugin"):
        try:
            plugin_obj = mod.Plugin()  # type: ignore[call-arg]

        except Exception as e:  # pragma: no cover
            log.warning("Cannot instantiate Plugin() for %s: %s", spec.name, e)

    if plugin_obj and hasattr(plugin_obj, "register"):
        hook = (
            getattr(api, "register", None)
            or getattr(api, "add", None)
            or getattr(api, "attach", None)
        )

        if not callable(hook):
            raise RuntimeError("Plugin API is missing a register/add/attach method")

        try:
            hook(plugin_obj)  # API.register(plugin)

        except TypeError:
            hook(spec.name, plugin_obj)  # API.register(name, plugin)

        return spec.name

    # 3) Brak znanego sposobu rejestracji

    log.warning("Plugin '%s' has neither register() nor Plugin.register()", spec.name)

    return None


def load_all_plugins(api: Any) -> list[str]:
    """



    PL: ≈Åaduje wszystkie pluginy i rejestruje je w przekazanym API.



    EN: Loads all plugins and registers them into the provided API.



    """

    # Umo≈ºliwiamy wskazanie innego pakietu/katalogu (np. do test√≥w) przez ENV

    custom_dir = os.getenv("CERTEUS_PLUGINS_DIR")

    base_dir = Path(custom_dir) if custom_dir else PLUGINS_DIR

    loaded: list[str] = []

    for spec in _discover_plugins(base_dir):
        try:
            mod = _import_module(spec.module)

            name = _register_into_api(api, spec, mod)

            if name:
                loaded.append(name)

                log.info("Plugin loaded: %s (%s)", name, spec.module)

        except ModuleNotFoundError as e:
            log.warning("Module not found for plugin '%s': %s", spec.name, e)

        except Exception as e:  # pragma: no cover
            log.warning("Failed to load plugin '%s': %s", spec.name, e)

    return loaded


# --- Helpery do introspekcji punktu rejestracji pluginu / Plugin registration helpers ---


def has_register(candidate: Any) -> bool:
    """



    PL: Sprawdza, czy obiekt/modu≈Ç udostƒôpnia punkt rejestracji pluginu.



        Wspierane style:



          1) Funkcja modu≈Çowa:    register(api)



          2) Klasa Plugin:        class Plugin: def register(self, api) -> None



    EN: Checks whether the given object/module exposes a plugin registration entrypoint.



        Supported styles:



          1) Module-level function: register(api)



          2) Plugin class:          class Plugin: def register(self, api) -> None



    """

    try:
        reg = getattr(candidate, "register", None)

        if callable(reg):
            return True

        plugin_cls = getattr(candidate, "Plugin", None)

        if plugin_cls is not None and callable(getattr(plugin_cls, "register", None)):
            return True

        return False

    except Exception:
        return False


# Zadeklaruj publiczny interfejs modu≈Çu / Public module API


__all__ = ["PluginSpec", "load_all_plugins", "has_register"]

```


===== FILE: core/truthops/engine.py =====
```text
# +=====================================================================+
# |                          CERTEUS ‚Äî HEART                            |
# +=====================================================================+
# | FILE: core/truthops/engine.py                                       |
# | ROLE:                                                               |
# |  PL: Silnik TruthOps w dw√≥ch fazach (pre/post) dla decyzji          |
# |      publikacji.                                                    |
# |  EN: Two-phase TruthOps engine (pre/post) for publication decisions.|
# +=====================================================================+

"""PL: Faza PRE: GoP/EUQ/TTDE (klasyfikacja HOT/WARM/COLD + plan).
POST: ATT/MTV (kontrtesty i sp√≥jno≈õƒá) ‚Üí PUBLISH/CONDITIONAL/ABSTAIN.
EN:  PRE: GoP/EUQ/TTDE (HOT/WARM/COLD + plan). POST: ATT/MTV ‚Üí verdict.
"""

from __future__ import annotations

from dataclasses import dataclass
from typing import Any, Literal

Decision = Literal["PUBLISH", "CONDITIONAL", "PENDING", "ABSTAIN"]
Heat = Literal["HOT", "WARM", "COLD"]


@dataclass(frozen=True)
class PreSolveResult:
    """PL: Wynik fazy PRE. EN: PRE phase result."""

    heat: Heat
    reasons: dict[str, Any]
    plan: dict[str, Any]  # initial plan-of-evidence for non-PUBLISH


def evaluate_gop(ctx: dict[str, Any], policy: dict[str, Any]) -> dict[str, Any]:
    """PL: Ocena GoP. EN: GoP evaluation."""
    return {"ok": True, "sources": ctx.get("sources_count", 0)}


def evaluate_euq(ctx: dict[str, Any], policy: dict[str, Any]) -> dict[str, Any]:
    """PL: Ocena EUQ (dolny przedzia≈Ç wiarygodno≈õci). EN: EUQ lower bound."""
    return {"lb": float(ctx.get("lb", 0.5))}


def evaluate_ttde(ctx: dict[str, Any], policy: dict[str, Any]) -> dict[str, Any]:
    """PL: Datowanie/wyga≈õniƒôcie. EN: Temporal validity/expiry."""
    return {"fresh": bool(ctx.get("fresh", True))}


def classify_heat(
    gop: dict[str, Any],
    euq: dict[str, Any],
    ttde: dict[str, Any],
    policy: dict[str, Any],
) -> Heat:
    """PL: Regu≈Ça doboru HOT/WARM/COLD. EN: Heat classification rule."""
    lb = float(euq.get("lb", 0))
    fresh = bool(ttde.get("fresh", False))
    lower = float(policy["EUQ"]["lower_bound_publish"])
    band_lo = float(policy["EUQ"]["conditional_band"][0])
    if lb >= lower and fresh:
        return "HOT"
    if lb >= band_lo:
        return "WARM"
    return "COLD"


def pre_solve(ctx: dict[str, Any], policy_profile: str = "default") -> PreSolveResult:
    """PL: Wykonaj fazƒô PRE. EN: Execute PRE phase."""
    # Policy mo≈ºe byƒá wstrzykniƒôte przez caller; zapewnij rozsƒÖdne domy≈õlne.
    policy = ctx.get("truthops_policy", {}).get(policy_profile) or {
        "EUQ": {"lower_bound_publish": 0.75, "conditional_band": [0.55, 0.75]}
    }
    gop = evaluate_gop(ctx, policy)
    euq = evaluate_euq(ctx, policy)
    ttde = evaluate_ttde(ctx, policy)
    heat = classify_heat(gop, euq, ttde, policy)
    plan = {"summary": "Conditional proof plan", "steps": []}
    reasons = {"gop": gop, "euq": euq, "ttde": ttde}
    return PreSolveResult(heat=heat, reasons=reasons, plan=plan)


def evaluate_att(artifacts: dict[str, Any], policy: dict[str, Any]) -> dict[str, Any]:
    """PL: Kontrprzyk≈Çady. EN: Adversarial tests."""
    # TODO: plug ATT results
    return {"passed": True, "missing_tests": []}


def evaluate_mtv(artifacts: dict[str, Any], policy: dict[str, Any]) -> dict[str, Any]:
    """PL: Samosp√≥jno≈õƒá. EN: Meta-theoretic validity."""
    # TODO: plug MTV results
    return {"contradiction": False, "self_inconsistency": False}


def post_solve(
    artifacts: dict[str, Any],
    policy_profile: str = "default",
) -> tuple[Decision, dict[str, Any]]:
    """PL: Wykonaj fazƒô POST i zwr√≥ƒá decyzjƒô. EN: Execute POST and return decision."""
    policy = {"ATT": {}, "MTV": {}}
    att = evaluate_att(artifacts, policy)
    mtv = evaluate_mtv(artifacts, policy)

    if mtv.get("contradiction") or mtv.get("self_inconsistency"):
        return "ABSTAIN", {"reason": "MTV rejection", "att": att, "mtv": mtv}

    if att.get("passed", False):
        return "PUBLISH", {"att": att, "mtv": mtv, "pco": artifacts.get("pco", {})}

    plan = {"summary": "Need additional tests/evidence", "steps": att.get("missing_tests", [])}
    return "CONDITIONAL", {"plan": plan, "att": att, "mtv": mtv}

```


===== FILE: data/public_pco/.json =====
```text
Ôªø
```


===== FILE: data/public_pco/demo-001.json =====
```text
{
  "rid": "demo-001",
  "smt2_hash": "2a97516c354b68848cdbd8f54a226a0a55b21ed138e207ad6c5cbb9c00aa5aea",
  "lfsc": "(proof (demo lfsc))",
  "merkle_proof": [],
  "signature": "ZbPJQuwx_jU9FUgZlFpeHvWtIA9w1pCeabbJQnd-dHBaU8YUn53R8rc395C8LVw_11_Eje4DFFO_B-urpVo2BA"
}
```


===== FILE: data/public_pco/demo-002.json =====
```text
{
    "rid": "demo-002",
    "smt2_hash": "b8a0b8f1a8c4e5f8c1a2b3c4d5e6f7089a0b1c2d3e4f5a6b7c8d9e0f1a2b3c4d",
    "lfsc": "(lfsc proof for demo-002)",
    "drat": null,
    "merkle_proof": [
        {
            "sibling": "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa",
            "dir": "L"
        },
        {
            "sibling": "bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb",
            "dir": "R"
        }
    ],
    "signature": "P7nZt6b9lqT0j4bD1QwX2e3r4t5y6u7v8w9x0y1z2a3b4c5d6e7f8g9h0i1j2k",
    "issued_at": "2025-08-19T12:00:00Z"
}
```


===== FILE: docs/adr/000-architecture-overview.md =====
```text
Decyzje architektoniczne ‚Äì ADR-000.

```


===== FILE: docs/api/openapi.yaml =====
```text
openapi: 3.0.3
info:
  title: CERTEUS API
  version: 0.0.1
paths: {}

```


===== FILE: docs/dsl/AXIOMLOG.md =====
```text
AXIOMLOG ‚Äì szkic.

```


===== FILE: docs/dsl/LEXLOG.md =====
```text
# LEXLOG ‚Äî Jƒôzyk Prawdy v0.1

+-------------------------------------------------------------+
|              CERTEUS - Jƒôzyk LEXLOG v0.1                    |
+-------------------------------------------------------------+
| PLIK: LEXLOG.md                                             |
| ROLA/ROLE: Specyfikacja jƒôzyka dziedzinowego (DSL) do       |
|            formalizacji regu≈Ç i fakt√≥w prawnych.            |
+-------------------------------------------------------------+

## LEXLOG ‚Äî A Language for Formalizing Legal Logic

## 1. Wprowadzenie / Introduction

PL: **LEXLOG** to precyzyjny, deklaratywny jƒôzyk do opisu logiki prawnej w spos√≥b zrozumia≈Çy dla solver√≥w SMT. Celem jest eliminacja niejednoznaczno≈õci i zapewnienie weryfikowalno≈õci rozumowania.
EN: **LEXLOG** is a precise, declarative language to describe legal logic in a machine-understandable way for SMT solvers. The goal is to eliminate ambiguity and ensure verifiable reasoning.

## 2. Podstawowe Konstrukcje (v0.1) / Basic Constructs (v0.1)

### Definicja (DEFINE)

PL: Definiuje sta≈Çe/zmienne logiczne reprezentujƒÖce kluczowe pojƒôcia.
EN: Defines logical constants/variables representing key concepts.

```lexlog
DEFINE czyn_ma_charakter_oszukanczy: Bool
DEFINE kwota_szkody: Real
```

### Przes≈Çanka (PREMISE)

PL: Warunek, kt√≥ry musi byƒá spe≈Çniony. Mo≈ºe odwo≈Çywaƒá siƒô do fakt√≥w z FACTLOG.
EN: A condition that must be met. May refer to facts from FACTLOG.

```lexlog
PREMISE P1: "Wprowadzenie w b≈ÇƒÖd"
    EXISTS (fact: FACTLOG WHERE role = 'introduction_into_error')
```

### Regu≈Ça (RULE)

PL: ≈ÅƒÖczy przes≈Çanki w implikacjƒô prowadzƒÖcƒÖ do konkluzji.
EN: Combines premises into an implication leading to a conclusion.

```lexlog
RULE R_OSZUSTWO (P1, P2, P3) -> K1
```

### Konkluzja (CONCLUSION)

PL: Logiczny wniosek wynikajƒÖcy z regu≈Çy.
EN: Logical conclusion resulting from a rule.

```lexlog
CONCLUSION K1: "Czyn wype≈Çnia znamiona oszustwa z art. 286 k.k."
    ASSERT (czyn_ma_charakter_oszukanczy == True)
```

## 3. Przyk≈Çad dla Art. 286 k.k. (MVP) / Example for Art. 286 (MVP)

```lexlog
# --- Definicje dla Art. 286 k.k. ---
DEFINE cel_korzysci_majatkowej: Bool
DEFINE wprowadzenie_w_blad: Bool
DEFINE niekorzystne_rozporzadzenie_mieniem: Bool

# --- Przes≈Çanki ---
PREMISE P_CEL: "Sprawca dzia≈Ça≈Ç w celu osiƒÖgniƒôcia korzy≈õci majƒÖtkowej"
    EXISTS (fact: FACTLOG WHERE role = 'intent_financial_gain')

PREMISE P_WPROWADZENIE: "Sprawca wprowadzi≈Ç ofiarƒô w b≈ÇƒÖd"
    EXISTS (fact: FACTLOG WHERE role = 'act_deception')

PREMISE P_ROZPORZADZENIE: "NastƒÖpi≈Ço niekorzystne rozporzƒÖdzenie mieniem"
    EXISTS (fact: FACTLOG WHERE role = 'detrimental_property_disposal')

# --- G≈Ç√≥wna regu≈Ça ---
RULE R_286_OSZUSTWO (P_CEL, P_WPROWADZENIE, P_ROZPORZADZENIE) -> K_OSZUSTWO_STWIERDZONE

# --- Konkluzja ---
CONCLUSION K_OSZUSTWO_STWIERDZONE: "Czyn wype≈Çnia znamiona z art. 286 k.k."
    ASSERT (cel_korzysci_majatkowej AND wprowadzenie_w_blad AND niekorzystne_rozporzadzenie_mieniem)
```

## 4. Konwencje / Conventions

- ID przes≈Çanek: `P_*`, konkluzje: `K_*`.
- Aliasowanie do silnik√≥w (MAPS_TO) jest opcjonalne w DSL ‚Äî twarde mapowanie trzymamy w JSON `kk.mapping.json`.
- Dwujƒôzyczne komentarze i nag≈Ç√≥wki ASCII zgodnie z ‚ÄûStandard Kodowania ‚Äì Premium Code Style‚Äù (README).

```


===== FILE: docs/dsl/LEXLOG.md.bak =====
```text
Ôªø# LEXLOG ‚Äî Jzyk Prawdy v0.1

# LEXLOG ‚Äî Jzyk Prawdy v0.1

+-------------------------------------------------------------+
|              CERTEUS - J√Ñ‚Ñ¢zyk LEXLOG v0.1                    |
+-------------------------------------------------------------+
| PLIK: LEXLOG.md                                             |
| ROLA/ROLE: Specyfikacja j√Ñ‚Ñ¢zyka dziedzinowego (DSL) do       |
|            formalizacji reguƒπ‚Äö i faktƒÇ≈Çw prawnych.            |
+-------------------------------------------------------------+

# LEXLOG √¢‚Ç¨‚Äù A Language for Formalizing Legal Logic

## 1. Wprowadzenie / Introduction

PL: **LEXLOG** to precyzyjny, deklaratywny j√Ñ‚Ñ¢zyk do opisu logiki prawnej w sposƒÇ≈Çb zrozumiaƒπ‚Äöy dla solverƒÇ≈Çw SMT. Celem jest eliminacja niejednoznacznoƒπ‚Ä∫ci i zapewnienie weryfikowalnoƒπ‚Ä∫ci rozumowania.
EN: **LEXLOG** is a precise, declarative language to describe legal logic in a machine-understandable way for SMT solvers. The goal is to eliminate ambiguity and ensure verifiable reasoning.

## 2. Podstawowe Konstrukcje (v0.1) / Basic Constructs (v0.1)

### Definicja (DEFINE)
PL: Definiuje staƒπ‚Äöe/zmienne logiczne reprezentuj√Ñ‚Ä¶ce kluczowe poj√Ñ‚Ñ¢cia.
EN: Defines logical constants/variables representing key concepts.

```lexlog
DEFINE czyn_ma_charakter_oszukanczy: Bool
DEFINE kwota_szkody: Real
```

### Przesƒπ‚Äöanka (PREMISE)
PL: Warunek, ktƒÇ≈Çry musi by√Ñ‚Ä° speƒπ‚Äöniony. MoƒπƒΩe odwoƒπ‚Äöywa√Ñ‚Ä° si√Ñ‚Ñ¢ do faktƒÇ≈Çw z FACTLOG.
EN: A condition that must be met. May refer to facts from FACTLOG.

```lexlog
PREMISE P1: "Wprowadzenie w bƒπ‚Äö√Ñ‚Ä¶d"
    EXISTS (fact: FACTLOG WHERE role = 'introduction_into_error')
```

### Reguƒπ‚Äöa (RULE)
PL: ƒπ¬Å√Ñ‚Ä¶czy przesƒπ‚Äöanki w implikacj√Ñ‚Ñ¢ prowadz√Ñ‚Ä¶c√Ñ‚Ä¶ do konkluzji.
EN: Combines premises into an implication leading to a conclusion.

```lexlog
RULE R_OSZUSTWO (P1, P2, P3) -> K1
```

### Konkluzja (CONCLUSION)
PL: Logiczny wniosek wynikaj√Ñ‚Ä¶cy z reguƒπ‚Äöy.
EN: Logical conclusion resulting from a rule.

```lexlog
CONCLUSION K1: "Czyn wypeƒπ‚Äönia znamiona oszustwa z art. 286 k.k."
    ASSERT (czyn_ma_charakter_oszukanczy == True)
```

## 3. Przykƒπ‚Äöad dla Art. 286 k.k. (MVP) / Example for Art. 286 (MVP)

```lexlog
# --- Definicje dla Art. 286 k.k. ---
DEFINE cel_korzysci_majatkowej: Bool
DEFINE wprowadzenie_w_blad: Bool
DEFINE niekorzystne_rozporzadzenie_mieniem: Bool

# --- Przesƒπ‚Äöanki ---
PREMISE P_CEL: "Sprawca dziaƒπ‚Äöaƒπ‚Äö w celu osi√Ñ‚Ä¶gni√Ñ‚Ñ¢cia korzyƒπ‚Ä∫ci maj√Ñ‚Ä¶tkowej"
    EXISTS (fact: FACTLOG WHERE role = 'intent_financial_gain')

PREMISE P_WPROWADZENIE: "Sprawca wprowadziƒπ‚Äö ofiar√Ñ‚Ñ¢ w bƒπ‚Äö√Ñ‚Ä¶d"
    EXISTS (fact: FACTLOG WHERE role = 'act_deception')

PREMISE P_ROZPORZADZENIE: "Nast√Ñ‚Ä¶piƒπ‚Äöo niekorzystne rozporz√Ñ‚Ä¶dzenie mieniem"
    EXISTS (fact: FACTLOG WHERE role = 'detrimental_property_disposal')

# --- Gƒπ‚ÄöƒÇ≈Çwna reguƒπ‚Äöa ---
RULE R_286_OSZUSTWO (P_CEL, P_WPROWADZENIE, P_ROZPORZADZENIE) -> K_OSZUSTWO_STWIERDZONE

# --- Konkluzja ---
CONCLUSION K_OSZUSTWO_STWIERDZONE: "Czyn wypeƒπ‚Äönia znamiona z art. 286 k.k."
    ASSERT (cel_korzysci_majatkowej AND wprowadzenie_w_blad AND niekorzystne_rozporzadzenie_mieniem)
```

## 4. Konwencje / Conventions

- ID przesƒπ‚Äöanek: `P_*`, konkluzje: `K_*`.
- Aliasowanie do silnikƒÇ≈Çw (MAPS_TO) jest opcjonalne w DSL √¢‚Ç¨‚Äù twarde mapowanie trzymamy w JSON `kk.mapping.json`.
- Dwuj√Ñ‚Ñ¢zyczne komentarze i nagƒπ‚ÄöƒÇ≈Çwki ASCII zgodnie z √¢‚Ç¨≈æStandard Kodowania √¢‚Ç¨‚Äú Premium Code Style√¢‚Ç¨≈• (README).

```


===== FILE: docs/dsl/OPTLOG.md =====
```text
OPTLOG ‚Äì szkic.

```


===== FILE: docs/guides/dev-setup.md =====
```text
Instalacja, uv/pip, uruchomienie.

```


===== FILE: docs/guides/lkew-handbook.md =====
```text
Handbook in≈ºynierii wiedzy (EVIDENCE-LOG, klasy metadanych).

```


===== FILE: docs/legal/provisional_patent/placeholder.txt =====
```text
placeholder

```


===== FILE: governance/pcu_breakglass.py =====
```text
# +=====================================================================+
# |                          CERTEUS ‚Äî HEART                            |
# +=====================================================================+
# | FILE: governance/pcu_breakglass.py                                  |
# | ROLE:                                                               |
# |  PL: Procedura Break-Glass (TTL ‚â§14 dni) + log Merkle.              |
# |  EN: Break-Glass procedure (TTL ‚â§14 days) + Merkle log.             |
# +=====================================================================+

"""PL: Otwieranie i odwo≈Çanie Break-Glass z logiem. EN: Open/revoke with logging."""

from __future__ import annotations

from datetime import datetime, timedelta, timezone

MAX_TTL_DAYS = 14


def approve_break_glass(request_id: str, reason: str, until: datetime, merkle_log: list[dict[str, str]]) -> bool:
    """PL: Zgoda na BG. EN: Approve BG."""
    now = datetime.now(timezone.utc)
    if until - now > timedelta(days=MAX_TTL_DAYS):
        raise ValueError("Break-Glass TTL exceeds 14 days.")
    merkle_log.append(
        {"type": "break_glass_open", "request_id": request_id, "reason": reason, "until": until.isoformat()}
    )
    return True


def revoke_break_glass(request_id: str, merkle_log: list[dict[str, str]]) -> bool:
    """PL: Odwo≈Çaj BG. EN: Revoke BG."""
    merkle_log.append(
        {"type": "break_glass_revoke", "request_id": request_id, "ts": datetime.now(timezone.utc).isoformat()}
    )
    return True

```


===== FILE: kernel/__init__.py =====
```text
# +=====================================================================+
# |                          CERTEUS                                    |
# +=====================================================================+
# | MODULE:  F:/projekty/certeus/kernel/__init__.py                      |
# | DATE:    2025-08-17                                                  |
# +=====================================================================+


"""
PL: Pakiet inicjalizacyjny modu≈Çu.
EN: Package initializer.
"""

```


===== FILE: kernel/dual_core/__init__.py =====
```text
# +=====================================================================+
# |                          CERTEUS                                    |
# +=====================================================================+
# | MODULE:  F:/projekty/certeus/kernel/dual_core/__init__.py            |
# | DATE:    2025-08-17                                                  |
# +=====================================================================+


"""
PL: Pakiet inicjalizacyjny modu≈Çu.
EN: Package initializer.
"""

```


===== FILE: kernel/dual_core/cvc5_adapter.py =====
```text
# +=====================================================================+
# |                          CERTEUS                                    |
# +=====================================================================+
# | MODULE:  F:/projekty/certeus/kernel/dual_core/cvc5_adapter.py        |
# | DATE:    2025-08-17                                                  |
# +=====================================================================+


# +-------------------------------------------------------------+

# |                          CERTEUS                            |

# +-------------------------------------------------------------+

# | FILE: kernel/dual_core/cvc5_adapter.py                    |

# | ROLE: Project module.                                       |

# | PLIK: kernel/dual_core/cvc5_adapter.py                    |

# | ROLA: Modu≈Ç projektu.                                       |

# +-------------------------------------------------------------+


"""



PL: Modu≈Ç CERTEUS ‚Äì uzupe≈Çnij opis funkcjonalny.



EN: CERTEUS module ‚Äì please complete the functional description.



"""


# +-------------------------------------------------------------+


# |                          CERTEUS                            |


# +-------------------------------------------------------------+


# | FILE: kernel/dual_core/cvc5_adapter.py                    |


# | ROLE: Project module.                                       |


# | PLIK: kernel/dual_core/cvc5_adapter.py                    |


# | ROLA: Modu≈Ç projektu.                                       |


# +-------------------------------------------------------------+


def solve(assumptions):
    # stub for CVC5 integration

    return {
        "status": "unsat",
        "unsat_core": ["a1", "a3"],
        "proof_path": "proof-artifacts/cvc5.lfsc",
    }

```


===== FILE: kernel/dual_core/z3_adapter.py =====
```text
#!/usr/bin/env python3
# +=====================================================================+
# |                          CERTEUS                                    |
# +=====================================================================+
# | MODULE:  F:/projekty/certeus/kernel/dual_core/z3_adapter.py          |
# | DATE:    2025-08-17                                                  |
# +=====================================================================+

"""
PL: Adapter dla Z3 i zale≈ºno≈õci SMT.
EN: Adapter for Z3 and SMT.
"""

from __future__ import annotations

import logging
from typing import Any, cast

import z3  # type: ignore[reportMissingTypeStubs]

from kernel.smt_translator import (
    compile_bool_ast,
    validate_ast,
)  # <- wszystkie importy nad kodem

_Z3 = cast(Any, z3)
logger = logging.getLogger(__name__)


def compile_from_ast(ast_root: Any, *, validate: bool = True) -> z3.ExprRef:
    """
    PL: Kompiluje AST do formu≈Çy Z3 bez eval().
    EN: Compile AST to Z3 formula without eval().
    Zwraca ExprRef (BoolRef dziedziczy po ExprRef w naszych stubach).
    """
    if validate:
        validate_ast(cast(Any, ast_root))
    expr, symbols = compile_bool_ast(cast(Any, ast_root), declare_on_use=True, validate=False)
    logger.debug("Z3 adapter compiled expr with symbols: %s", list(symbols.keys()))
    return expr


class Z3Adapter:
    """
    Minimalny adapter wykonawczy dla Core-1:
    - solve(assertions): odpala solver Z3 i zwraca ujednolicony dict wyniku.
    """

    def solve(self, assertions: list[z3.ExprRef]) -> dict[str, Any]:
        s = z3.Solver()
        for a in assertions:
            s.add(a)
        status = s.check()
        result: dict[str, Any] = {
            "status": str(status).lower(),  # "sat" / "unsat" / "unknown"
            "time_ms": None,
            "model": None,
            "error": None,
            "version": z3.get_version_string() if hasattr(z3, "get_version_string") else None,
        }
        try:
            if status == z3.sat:
                m = s.model()
                model_bindings = {d.name(): str(m[d]) for d in m.decls()}
                result["model"] = model_bindings
        except Exception as e:  # best-effort
            logger.exception("Model extraction failed: %s", e)
            result["error"] = f"model_error: {e}"
        return result

```


===== FILE: kernel/e2e_verifier.py =====
```text
#!/usr/bin/env python3
# +=====================================================================+
# |                          CERTEUS                                    |
# +=====================================================================+
# | MODULE:  F:/projekty/certeus/kernel/e2e_verifier.py                  |
# | DATE:    2025-08-17                                                  |
# +=====================================================================+

"""
PL: Weryfikator E2E przep≈Çyw√≥w CERTEUS.
EN: E2E verifier for CERTEUS flows.
"""

from __future__ import annotations

import logging
from typing import Any, cast

import z3  # type: ignore[reportMissingTypeStubs]

from .smt_translator import compile_bool_ast, validate_ast

logger = logging.getLogger(__name__)

# -----------------------------------------------------------------------------
# Adapter selection (no type redefinition conflicts for Pylance)
# -----------------------------------------------------------------------------
try:
    # Prefer project adapter; name kept distinct to avoid redefinition issues.
    from .dual_core.z3_adapter import Z3Adapter as _AdapterClass  # type: ignore[assignment]
except Exception:  # pragma: no cover - emergency fallback

    class _AdapterClass:  # type: ignore[no-redef]
        """Fallback adapter: solve a list of Z3 assertions with z3.Solver()."""

        def solve(self, assertions: list[z3.ExprRef]) -> dict[str, Any]:
            s = z3.Solver()
            for a in assertions:
                s.add(a)
            status = s.check()
            result: dict[str, Any] = {
                "status": str(status).lower(),
                "time_ms": None,
                "model": None,
                "error": None,
                "version": z3.get_version_string() if hasattr(z3, "get_version_string") else None,
            }
            if status == z3.sat:
                try:
                    m = s.model()
                    result["model"] = {d.name(): str(m[d]) for d in m.decls()}
                except Exception as e:  # best-effort
                    result["error"] = f"model_error: {e}"
            return result


class E2EVerifier:
    """
    PL: Prosty weryfikator E2E:
        - verify_ast: kompiluje AST do Z3 i rozwiƒÖzuje.
        - verify_smt2: parsuje SMT-LIB2 i rozwiƒÖzuje.
    EN: Simple E2E verifier:
        - verify_ast: compile boolean AST to Z3 and solve.
        - verify_smt2: parse SMT-LIB2 and solve.
    """

    def __init__(self) -> None:
        # use runtime-selected adapter without static class-name conflicts
        self.z3: Any = _AdapterClass()

    # ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
    # AST ‚Üí Z3
    # ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
    def compile_ast_to_z3(self, ast_root: Any, *, do_validate: bool = True) -> z3.ExprRef:
        """
        Compile CERTEUS boolean AST to a single Z3 expression.
        """
        if do_validate:
            validate_ast(cast(Any, ast_root))
        expr, _symbols = compile_bool_ast(cast(Any, ast_root), declare_on_use=True, validate=False)
        return expr  # ExprRef (BoolRef derives from ExprRef in stubs)

    def verify_ast(self, ast_root: Any, *, do_validate: bool = True) -> dict[str, Any]:
        """
        PL: Kompiluje AST do jednej formu≈Çy i rozwiƒÖzuje jƒÖ Z3.
        EN: Compile AST to a single assertion and solve it with Z3.
        """
        expr = self.compile_ast_to_z3(ast_root, do_validate=do_validate)
        return self.z3.solve([expr])

    # ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
    # SMT-LIB2 ‚Üí Z3
    # ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
    def _parse_smt2_assertions(self, smt2: str) -> list[z3.ExprRef]:
        vec = z3.parse_smt2_string(smt2)
        return [vec[i] for i in range(len(vec))]

    def verify_smt2(self, smt2: str) -> dict[str, Any]:
        """
        PL: Parsuje SMT-LIB2, wysy≈Ça wszystkie asercje do solvera i zwraca wynik.
        EN: Parse SMT-LIB2, send all assertions to the solver and return the result.
        """
        assertions = self._parse_smt2_assertions(smt2)
        return self.z3.solve(assertions)

```


===== FILE: kernel/mismatch_protocol.py =====
```text
#!/usr/bin/env python3
# +=====================================================================+
# |                          CERTEUS                                    |
# +=====================================================================+
# | MODULE:  F:/projekty/certeus/kernel/mismatch_protocol.py             |
# | DATE:    2025-08-17                                                  |
# +=====================================================================+


"""Protok√≥≈Ç uruchamiany przy rozbie≈ºno≈õci solver√≥w ‚Äî tworzy bilet."""

from __future__ import annotations

from typing import Any

from services.mismatch_service.service import mismatch_service


class MismatchError(RuntimeError):
    """Rzucane gdy wykryto niezgodno≈õƒá wynik√≥w solver√≥w."""


def handle_mismatch(case_id: str, formula_str: str, results: dict[str, Any]) -> None:
    ticket = mismatch_service.create_ticket(
        case_id=case_id,
        formula_str=formula_str,
        results=results,
        formula_ast=None,
    )
    raise MismatchError(f"Solver results are inconsistent. See ticket {ticket.ticket_id}.")

```


===== FILE: kernel/smt_translator.py =====
```text
#!/usr/bin/env python3
# +=====================================================================+
# |                          CERTEUS                                    |
# +=====================================================================+
# | MODULE:  F:/projekty/certeus/kernel/smt_translator.py                |
# | DATE:    2025-08-17                                                  |
# +=====================================================================+

"""
PL: Translator SMT i powiƒÖzana logika.
EN: SMT translator and related logic.
"""

from __future__ import annotations

from collections.abc import Mapping
from typing import Any, Literal, TypedDict, cast

import z3  # type: ignore[reportMissingTypeStubs]

_Z3 = cast(Any, z3)  # ‚úÖ correct use of typing.cast


# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
# AST (TypedDict)
# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
class VarNode(TypedDict):
    kind: Literal["var"]
    name: str


class UnaryNode(TypedDict):
    kind: Literal["unary"]
    op: Literal["NOT"]
    arg: Any


class BinaryNode(TypedDict):
    kind: Literal["binary"]
    op: Literal["AND", "OR", "IMPLIES", "XOR"]
    left: Any
    right: Any


class NaryNode(TypedDict):
    kind: Literal["nary"]
    op: Literal["AND", "OR", "XOR"]
    args: list[Any]


ASTNode = VarNode | UnaryNode | BinaryNode | NaryNode


# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
# Helpers
# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
def _normalize(node: ASTNode | Mapping[str, Any]) -> ASTNode:
    """Allow Mapping (dict-like) in public API; normalize to plain dict."""
    return cast(ASTNode, dict(node)) if isinstance(node, Mapping) else node


def validate_ast(node: ASTNode | Mapping[str, Any]) -> None:
    n0 = _normalize(node)
    k = n0.get("kind")  # type: ignore[assignment]
    if k == "var":
        n = cast(VarNode, n0)
        if not n["name"] or not isinstance(n["name"], str):
            raise ValueError("Var.name must be non-empty string")
    elif k == "unary":
        u = cast(UnaryNode, n0)
        if u["op"] != "NOT":
            raise ValueError("unary.op must be 'NOT'")
        validate_ast(cast(ASTNode, u["arg"]))
    elif k == "binary":
        b = cast(BinaryNode, n0)
        if b["op"] not in {"AND", "OR", "IMPLIES", "XOR"}:
            raise ValueError("binary.op invalid")
        validate_ast(cast(ASTNode, b["left"]))
        validate_ast(cast(ASTNode, b["right"]))
    elif k == "nary":
        n = cast(NaryNode, n0)
        if n["op"] not in {"AND", "OR", "XOR"}:
            raise ValueError("nary.op invalid")
        for a in n["args"]:
            validate_ast(cast(ASTNode, a))
    else:
        raise ValueError("Unknown AST kind")


def _ensure_sym(symbols: dict[str, z3.ExprRef], name: str) -> z3.ExprRef:
    if name not in symbols:
        # In some local stubs BoolRef may not subclass ExprRef ‚Üí cast to keep Pylance happy
        symbols[name] = cast("z3.ExprRef", _Z3.Bool(name))
    return symbols[name]


def _compile(node: ASTNode, symbols: dict[str, z3.ExprRef]) -> z3.ExprRef:
    k = node["kind"]
    if k == "var":
        name = cast(VarNode, node)["name"]
        return _ensure_sym(symbols, name)

    if k == "unary":
        arg = _compile(cast(UnaryNode, node)["arg"], symbols)
        return cast("z3.ExprRef", _Z3.Not(arg))

    if k == "binary":
        b = cast(BinaryNode, node)
        lhs = _compile(cast(ASTNode, b["left"]), symbols)  # ‚úÖ no ambiguous 'l'
        rhs = _compile(cast(ASTNode, b["right"]), symbols)
        op = b["op"]
        if op == "AND":
            return cast("z3.ExprRef", _Z3.And(lhs, rhs))
        if op == "OR":
            return cast("z3.ExprRef", _Z3.Or(lhs, rhs))
        if op == "IMPLIES":
            return cast("z3.ExprRef", _Z3.Implies(lhs, rhs))
        if op == "XOR":
            return cast("z3.ExprRef", _Z3.Xor(lhs, rhs))
        raise AssertionError("unreachable")

    # nary
    n = cast(NaryNode, node)
    args = [_compile(cast(ASTNode, a), symbols) for a in n["args"]]
    if n["op"] == "AND":
        return cast("z3.ExprRef", _Z3.And(*args))
    if n["op"] == "OR":
        return cast("z3.ExprRef", _Z3.Or(*args))
    if n["op"] == "XOR":
        return cast("z3.ExprRef", _Z3.Xor(*args))
    raise AssertionError("unreachable")


# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
# Public API
# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
def compile_bool_ast(
    node: ASTNode | Mapping[str, Any],
    *,
    declare_on_use: bool = True,  # kept for API symmetry
    validate: bool = True,
) -> tuple[z3.ExprRef, dict[str, z3.ExprRef]]:
    if validate:
        validate_ast(node)
    ast = _normalize(node)
    symbols: dict[str, z3.ExprRef] = {}
    expr = _compile(ast, symbols)
    return expr, symbols


__all__ = [
    "VarNode",
    "UnaryNode",
    "BinaryNode",
    "NaryNode",
    "ASTNode",
    "validate_ast",
    "compile_bool_ast",
]

```


===== FILE: kernel/truth_engine.py =====
```text
#!/usr/bin/env python3
# +=====================================================================+
# |                          CERTEUS                                    |
# +=====================================================================+
# | MODULE:  F:/projekty/certeus/kernel/truth_engine.py                  |
# | DATE:    2025-08-17                                                  |
# +=====================================================================+

"""
PL: Modu≈Ç systemu CERTEUS.
EN: CERTEUS system module.
"""

from __future__ import annotations

import time
from typing import Any, Protocol, cast

import z3  # type: ignore[reportMissingTypeStubs]

from .mismatch_protocol import handle_mismatch  # ‚úÖ import at top to avoid E402

_Z3 = cast(Any, z3)


class _Z3AdapterProto(Protocol):
    def solve(self, assertions: list[z3.ExprRef]) -> dict[str, Any]: ...


# Import adapter class if dostƒôpny; w przeciwnym razie fallback.
try:
    from .dual_core.z3_adapter import Z3Adapter as _AdapterClass  # type: ignore[assignment]
except Exception:

    class _AdapterClass:  # type: ignore[no-redef]
        """Fallback adapter: solves a list of Z3 assertions with Z3.Solver()."""

        def solve(self, assertions: list[z3.ExprRef]) -> dict[str, Any]:
            start = time.perf_counter()
            s = z3.Solver()
            for a in assertions:
                s.add(a)
            status = s.check()
            elapsed = (time.perf_counter() - start) * 1000.0
            result: dict[str, Any] = {
                "status": str(status).lower(),  # "sat" / "unsat" / "unknown"
                "time_ms": round(elapsed, 3),
                "model": None,
                "error": None,
                "version": z3.get_version_string() if hasattr(z3, "get_version_string") else None,
            }
            if status == z3.sat:
                m = s.model()
                try:
                    model_bindings = {d.name(): str(m[d]) for d in m.decls()}
                except Exception:
                    model_bindings = {}
                result["model"] = model_bindings
            return result


class DualCoreVerifier:
    """Dual-Core verifier: Core-1(Z3) + Core-2(stub)."""

    def __init__(self) -> None:
        # ‚úÖ unikamy konfliktu typ√≥w klas; instancja spe≈Çnia Protocol
        self.z3_adapter: _Z3AdapterProto = cast(_Z3AdapterProto, _AdapterClass())

    def _parse_smt2(self, smt2: str) -> list[Any]:
        assertions: Any = _Z3.parse_smt2_string(smt2)
        return [assertions[i] for i in range(len(assertions))]

    def _solve_core2_stub(
        self, core1_result: dict[str, Any], *, force_mismatch: bool
    ) -> dict[str, Any]:
        r = dict(core1_result)
        if force_mismatch:
            if r.get("status") == "sat":
                r["status"] = "unsat"
            elif r.get("status") == "unsat":
                r["status"] = "sat"
            else:
                r["status"] = "unknown"
        return r

    def verify(
        self,
        formula: str,
        *,
        lang: str = "smt2",
        case_id: str | None = None,
        force_mismatch: bool = False,
    ) -> dict[str, Any]:
        if lang != "smt2":
            raise ValueError("Only 'smt2' formulas are accepted in this MVP.")

        assertions = self._parse_smt2(formula)

        # Core-1
        result_z3 = self.z3_adapter.solve(assertions)
        status_norm = (result_z3.get("status") or "").lower()
        if status_norm in {"sat", "unsat", "unknown"}:
            result_z3["status"] = status_norm

        # Core-2
        result_core2 = self._solve_core2_stub(result_z3, force_mismatch=force_mismatch)

        # Divergence?
        if (result_z3.get("status") or "").lower() != (result_core2.get("status") or "").lower():
            handle_mismatch(
                case_id=case_id or "temp-case-id",
                formula_str=formula,
                results={"z3": result_z3, "cvc5_stub": result_core2},
            )

        return result_z3

```


===== FILE: monitoring/alert-rules.yaml =====
```text
# +=====================================================================+
# |                          CERTEUS ‚Äî HEART                            |
# +=====================================================================+
# | FILE: monitoring/alert-rules.yaml                                   |
# | ROLE:                                                                |
# |  PL: Regu≈Çy SLO/Goodhart (Prometheus).                               |
# |  EN: SLO/Goodhart alerting rules (Prometheus).                       |
# +=====================================================================+

groups:
- name: slo-gates
  rules:
  - alert: LatencyBudgetBreach
    expr: histogram_quantile(0.95, sum(rate(http_request_duration_seconds_bucket{route=~"/defx/reason"}[5m])) by (le)) > 0.150
    for: 10m
    labels: { severity: page }
    annotations: { summary: "p95 latency > 150ms on HOT path" }

  - alert: InstrumentationFloorViolation
    expr: histogram_quantile(0.95, sum(rate(http_request_duration_seconds_bucket{route=~"/defx/reason"}[5m])) by (le)) < 0.010
    for: 15m
    labels: { severity: warn }
    annotations: { summary: "Suspiciously low p95 (instrumentation floor)" }

  - alert: QueueDepthHigh
    expr: sum(proof_queue_depth) > 1000
    for: 10m
    labels: { severity: warn }
    annotations: { summary: "Proof queue depth high" }

  - alert: ETAInaccuracy
    expr: rate(eta_hint_mad[15m]) > 0.25
    for: 30m
    labels: { severity: warn }
    annotations: { summary: "ETA MAD > 25%" }

- name: goodhart
  rules:
  - alert: GoodhartSentinel
    expr: (rate(truth_contradiction_rate_total[24h]) > 0.15)
          and on() (rate(ece_metric[24h]) < 0 or rate(brier_metric[24h]) < 0)
    for: 1h
    labels: { severity: warn }
    annotations: { summary: "ECE/Brier‚Üì with contradictions‚Üë >15%/24h" }

```


===== FILE: monitoring/metrics_goodhart.py =====
```text
# +=====================================================================+
# |                          CERTEUS ‚Äî HEART                            |
# +=====================================================================+
# | FILE: monitoring/metrics_goodhart.py                                |
# | ROLE:                                                               |
# |  PL: Liczniki Goodhart (novel/contradictions).                      |
# |  EN: Goodhart counters (novel/contradictions).                      |
# +=====================================================================+

"""PL: Eksport licznik√≥w do /metrics. EN: Export counters to /metrics."""

from __future__ import annotations

from prometheus_client import Counter

truth_novel_case_rate = Counter("truth_novel_case_rate", "Novel case detections")
truth_contradiction_rate = Counter("truth_contradiction_rate", "Contradictions detected")


def observe_novel_case() -> None:
    """PL: Zg≈Ço≈õ nowy przypadek. EN: Report novel case."""
    truth_novel_case_rate.inc()


def observe_contradiction() -> None:
    """PL: Zg≈Ço≈õ sprzeczno≈õƒá. EN: Report contradiction."""
    truth_contradiction_rate.inc()

```


===== FILE: observability/slo_gate/alerts.yaml =====
```text
# +=====================================================================+
# |                              CERTEUS                                |
# +=====================================================================+
# | FILE: observability/slo_gate/alerts.yaml                            |
# | ROLE: Alerts for floor violation and SLO degradation                 |
# +=====================================================================+

groups:
  - name: certeus-alerts
    rules:
      - alert: FloorViolation
        expr: |
          histogram_quantile(0.95, sum(rate(http_request_duration_seconds_bucket{job="api"}[5m])) by (le)) < 0.01
        for: 10m
        labels: { severity: critical }
        annotations:
          summary: "Latency floor breached"
          description: "p95 too low ‚Äî suspect metric issue or bad regression bypass."

      - alert: SLODegradation
        expr: slo:global_ok == 0
        for: 10m
        labels: { severity: warning }
        annotations:
          summary: "SLO Gate not satisfied"
          description: "At least one SLO metric is out of threshold."

```


===== FILE: observability/slo_gate/rules.yaml =====
```text
# +=====================================================================+
# |                              CERTEUS                                |
# +=====================================================================+
# | FILE: observability/slo_gate/rules.yaml                             |
# | ROLE: SLO recording rules (global; split by domain later if needed) |
# +=====================================================================+

groups:
  - name: certeus-slo
    interval: 30s
    rules:
      - record: slo:latency_p95_ok
        expr: |
          histogram_quantile(0.95, sum(rate(http_request_duration_seconds_bucket{job="api"}[5m])) by (le)) <= 0.25
      - record: slo:error_rate_ok
        expr: |
          (sum(rate(http_requests_total{job="api",status=~"5.."}[5m])) /
           sum(rate(http_requests_total{job="api"}[5m]))) <= 0.005
      - record: slo:ece_ok
        expr: |
          avg_over_time(certeus_model_ece[5m]) <= 0.05
      - record: slo:global_ok
        expr: min(slo:latency_p95_ok, slo:error_rate_ok, slo:ece_ok)

```


===== FILE: ops/k8s/helm/README.md =====
```text
Helm chart ‚Äì szkic.

```


===== FILE: ops/k8s/opa_policies/README.md =====
```text
OPA ‚Äì szkic.

```


===== FILE: ops/terraform/README.md =====
```text
IaC ‚Äì szkic.

```


===== FILE: packs/domains/law/confidence_levels.md =====
```text
Poziomy Pewno≈õci ‚Äì szkic.

```


===== FILE: packs/domains/law/metrics.md =====
```text
Metryki ‚Äì szkic.

```


===== FILE: packs/jurisdictions/PL/benchmarks/pl-286kk-0001/expected/pca2.json =====
```text
{
  "case_id": "pl-286kk-0001"
}

```


===== FILE: packs/jurisdictions/PL/benchmarks/pl-286kk-0001/input/notes.txt =====
```text
Notatki do kazusu.

```


===== FILE: packs/jurisdictions/PL/evidence/evidence-log.csv =====
```text
id,role,date,thesis,source_path,sha256,operator

```


===== FILE: packs/jurisdictions/PL/rules/kk.lex =====
```text
+-------------------------------------------------------------+
|              CERTEUS - LEXLOG Rules for Poland              |
+-------------------------------------------------------------+
| PLIK: kk.lex                                                |
| ROLA/ROLE: Formalizacja regu≈Ç z polskiego Kodeksu Karnego.  |
|            MVP: art. 286 (Oszustwo).                        |
+-------------------------------------------------------------+

# === SEKCJA: Art. 286 k.k. - Oszustwo / SECTION: Art. 286 P.C. - Fraud ===

# --- Definicje Zmiennych Logicznych / Logical Variable Definitions ---
DEFINE oszustwo_stwierdzone: Bool
DEFINE cel_korzysci_majatkowej: Bool
DEFINE wprowadzenie_w_blad: Bool
DEFINE niekorzystne_rozporzadzenie_mieniem: Bool

# --- Przes≈Çanki (powiƒÖzanie z faktami) / Premises (link to facts) ---
PREMISE P_CEL: "Dzia≈Çanie w celu osiƒÖgniƒôcia korzy≈õci majƒÖtkowej"
    EXISTS (fact: FACTLOG WHERE role = 'intent_financial_gain')
    MAPS_TO (cel_korzysci_majatkowej)

PREMISE P_WPROWADZENIE: "Doprowadzenie do rozporzƒÖdzenia mieniem poprzez wprowadzenie w b≈ÇƒÖd"
    EXISTS (fact: FACTLOG WHERE role = 'act_deception')
    MAPS_TO (wprowadzenie_w_blad)

PREMISE P_ROZPORZADZENIE: "WystƒÖpi≈Ço niekorzystne rozporzƒÖdzenie mieniem"
    EXISTS (fact: FACTLOG WHERE role = 'detrimental_property_disposal')
    MAPS_TO (niekorzystne_rozporzadzenie_mieniem)

# --- Regu≈Ça Logiczna / Logical Rule ---
RULE R_286_OSZUSTWO (P_CEL, P_WPROWADZENIE, P_ROZPORZADZENIE) -> K_OSZUSTWO_STWIERDZONE

# --- Konkluzja / Conclusion ---
CONCLUSION K_OSZUSTWO_STWIERDZONE: "Czyn wype≈Çnia znamiona oszustwa z art. 286 k.k."
    ASSERT (oszustwo_stwierdzone == (cel_korzysci_majatkowej AND wprowadzenie_w_blad AND niekorzystne_rozporzadzenie_mieniem))

```


===== FILE: packs/jurisdictions/PL/rules/kk.mapping.json =====
```text
{
  "premise_to_flag": {
    "P_CEL": null,
    "P_WPROWADZENIE": "ZNAMIE_WPROWADZENIA_W_BLAD",
    "P_ROZPORZADZENIE": null
  },
  "conclusion_excludes": {
    "K_OSZUSTWO_STWIERDZONE": [
      "ZNAMIE_POWIERZENIA_MIENIA"
    ]
  }
}

```


===== FILE: plugins/exporter_pl/plugin.yaml =====
```text
name: exporter_pl
version: 0.1.0
module: plugins.exporter_pl.src.main
register: register

```


===== FILE: plugins/exporter_pl/src/main.py =====
```text
# +=====================================================================+
# |                          CERTEUS                                    |
# +=====================================================================+
# | MODULE:  F:/projekty/certeus/plugins/exporter_pl/src/main.py         |
# | DATE:    2025-08-17                                                  |
# +=====================================================================+


# +-------------------------------------------------------------+

# |                          CERTEUS                            |

# +-------------------------------------------------------------+

# | FILE: plugins/exporter_pl/src/main.py                     |

# | ROLE: Project module.                                       |

# | PLIK: plugins/exporter_pl/src/main.py                     |

# | ROLA: Modu≈Ç projektu.                                       |

# +-------------------------------------------------------------+


"""



PL: Modu≈Ç CERTEUS ‚Äì uzupe≈Çnij opis funkcjonalny.



EN: CERTEUS module ‚Äì please complete the functional description.



"""


# +-------------------------------------------------------------+


# |                          CERTEUS                            |


# +-------------------------------------------------------------+


# | FILE: plugins/exporter_pl/src/main.py                     |


# | ROLE: Project module.                                       |


# | PLIK: plugins/exporter_pl/src/main.py                     |


# | ROLA: Modu≈Ç projektu.                                       |


# +-------------------------------------------------------------+

from services.exporter_service.exporter import export_answer


def register(api):
    api.register_plugin("exporter_pl", {"version": "0.1.0"})

    # Register a concrete exporter that maps AnswerContract -> DOCX/PDF (stub uses exporter_service)

    api.register_exporter("pl.exporter.docx_pdf", export_answer)

```


===== FILE: plugins/init.py =====
```text
# +=====================================================================+
# |                          CERTEUS                                    |
# +=====================================================================+
# | MODULE:  F:/projekty/certeus/plugins/init.py                         |
# | DATE:    2025-08-17                                                  |
# +=====================================================================+


# +-------------------------------------------------------------+
# |                        CERTEUS - Plugins                    |
# +-------------------------------------------------------------+
# | PLIK / FILE: plugins/__init__.py                            |
# +-------------------------------------------------------------+

"""
PL: Pakiet ‚Äûplugins‚Äù ‚Äì katalog z modu≈Çami plugin√≥w (ka≈ºdy z plugin.yaml).
EN: The ‚Äúplugins‚Äù package ‚Äì directory with plugin modules (each has plugin.yaml).
"""

__all__: list[str] = []

```


===== FILE: plugins/isap_adapter_pl/plugin.yaml =====
```text
name: isap_adapter_pl
version: 0.1.0
module: plugins.isap_adapter_pl.src.main
register: register

```


===== FILE: plugins/isap_adapter_pl/src/main.py =====
```text
# +=====================================================================+
# |                          CERTEUS                                    |
# +=====================================================================+
# | MODULE:  F:/projekty/certeus/plugins/isap_adapter_pl/src/main.py     |
# | DATE:    2025-08-17                                                  |
# +=====================================================================+


# +-------------------------------------------------------------+

# |                          CERTEUS                            |

# +-------------------------------------------------------------+

# | FILE: plugins/isap_adapter_pl/src/main.py                 |

# | ROLE: Project module.                                       |

# | PLIK: plugins/isap_adapter_pl/src/main.py                 |

# | ROLA: Modu≈Ç projektu.                                       |

# +-------------------------------------------------------------+


"""



PL: Modu≈Ç CERTEUS ‚Äì uzupe≈Çnij opis funkcjonalny.



EN: CERTEUS module ‚Äì please complete the functional description.



"""


# +-------------------------------------------------------------+


# |                          CERTEUS                            |


# +-------------------------------------------------------------+


# | FILE: plugins/isap_adapter_pl/src/main.py                 |


# | ROLE: Project module.                                       |


# | PLIK: plugins/isap_adapter_pl/src/main.py                 |


# | ROLA: Modu≈Ç projektu.                                       |


# +-------------------------------------------------------------+

from services.sipp_indexer_service.index_isap import snapshot_pl


def register(api):
    api.register_plugin("isap_adapter_pl", {"version": "0.1.0"})

    # Adapter for ISAP snapshots with hash+timestamp persistence

    api.register_adapter("isap.pl.snapshot", snapshot_pl)

```


===== FILE: plugins/lexenith_pl/adapter.py =====
```text
# +=====================================================================+
# |                          CERTEUS ‚Äî HEART                            |
# +=====================================================================+
# | FILE: plugins/lexenith_pl/adapter.py                                |
# | ROLE:                                                               |
# |  PL: Adapter domenowy PL (LEXENITH) ‚Äì kontrakt IDomainPlugin.       |
# |  EN: PL domain adapter (LEXENITH) ‚Äì IDomainPlugin contract.         |
# +=====================================================================+

"""PL: Zwraca jurysdykcjƒô/pack i przekszta≈Çca wej≈õcie na FACTLOG + DSL.
EN: Returns jurisdiction/pack and builds FACTLOG + DSL.
"""

from __future__ import annotations

from typing import Any

# from core.plugins import IDomainPlugin, FACTLOG  # zachowaj importy jak w repo


class LexenithPLAdapter:  # (IDomainPlugin)
    """PL: Adapter PL. EN: Polish law adapter."""

    def jurisdiction(self) -> str:
        """PL: Jurysdykcja. EN: Jurisdiction."""
        return "PL"

    def norm_pack_id(self) -> str:
        """PL: Id packa. EN: Norm pack id."""
        return "lex.release.pl.v1"

    def extract_facts(self, unstructured: bytes | str) -> dict[str, Any]:  # FACTLOG
        """PL: Parsuj wej≈õcie ‚Üí fakty. EN: Parse input ‚Üí facts."""
        return {"facts": []}

    def get_domain_rules(self, ctx: dict[str, Any]) -> str:
        """PL: Z≈Ç√≥≈º regu≈Çy DSL (precedencja/temporalno≈õƒá). EN: Compose DSL rules."""
        return "RULES { /* LEXLOG rules go here */ }"

```


===== FILE: plugins/lexenith_pl/tests/gold_sets/example.yaml =====
```text
# +=====================================================================+
# |                          CERTEUS ‚Äî HEART                            |
# +=====================================================================+
# | FILE: plugins/lexenith_pl/tests/gold_sets/example.yaml              |
# | ROLE:                                                                |
# |  PL: Przyk≈Çadowy przypadek testowy kontraktu publikacji.             |
# |  EN: Example publication contract test case.                         |
# +=====================================================================+

case_id: "pl_kk_286_example_001"
input:
  tenant: "demo"
  sla: "pro"
  text: "Stan faktyczny X, kwalifikacja Y..."
expect:
  status: "CONDITIONAL"
  has_pco_plan: true
  fields_present: ["headers.X-Norm-Pack-ID","headers.X-Jurisdiction","pco.plan"]

```


===== FILE: plugins/lexlog_rules_pl/plugin.yaml =====
```text
# +-------------------------------------------------------------+
# |              CERTEUS - Plugin Manifest (plugin.yaml)        |
# +-------------------------------------------------------------+
name: lexlog_rules_pl
version: "0.1.0"
enabled: true

# Modu≈Ç, kt√≥ry zawiera funkcjƒô `register(api)` lub klasƒô `Plugin` z `register(api)`
module: plugins.lexlog_rules_pl.src.main

# (opcjonalnie) je≈õli jest funkcja modu≈Çowa:
register: register

```


===== FILE: plugins/lexlog_rules_pl/src/main.py =====
```text
# +=====================================================================+
# |                          CERTEUS                                    |
# +=====================================================================+
# | MODULE:  F:/projekty/certeus/plugins/lexlog_rules_pl/src/main.py     |
# | DATE:    2025-08-17                                                  |
# +=====================================================================+


# +-------------------------------------------------------------+

# |                          CERTEUS                            |

# +-------------------------------------------------------------+

# | FILE: plugins/lexlog_rules_pl/src/main.py                 |

# | ROLE: Project module.                                       |

# | PLIK: plugins/lexlog_rules_pl/src/main.py                 |

# | ROLA: Modu≈Ç projektu.                                       |

# +-------------------------------------------------------------+


"""



PL: Modu≈Ç CERTEUS ‚Äì uzupe≈Çnij opis funkcjonalny.



EN: CERTEUS module ‚Äì please complete the functional description.



"""


# +-------------------------------------------------------------+


# |                   CERTEUS - LEXLOG (PL) Plugin              |


# +-------------------------------------------------------------+


# | PLIK / FILE: plugins/lexlog_rules_pl/src/main.py            |


# | ROLA / ROLE: Przyk≈Çadowy plugin rejestrujƒÖcy regu≈Çy LEXLOG. |


# |              Sample plugin registering LEXLOG rules.        |


# +-------------------------------------------------------------+

from __future__ import annotations

from collections.abc import MutableMapping
from typing import Any, Final

PLUGIN_NAME: Final[str] = "lexlog_rules_pl"


def _safe_register(api: Any, plugin: Any, name: str) -> None:
    """



    PL: Rejestracja odporna na r√≥≈ºne interfejsy API.



        Obs≈Çugujemy kolejno:



          ‚Ä¢ register_plugin(name, plugin)



          ‚Ä¢ add_plugin(name, plugin)



          ‚Ä¢ register(plugin) / register(name, plugin)



          ‚Ä¢ add(plugin)      / add(name, plugin)



          ‚Ä¢ attach(plugin)   / attach(name, plugin)



        Fallback: mapy typu api.plugins / api.registry / api.plugin_registry.







    EN: Registration resilient to various API shapes.



        We support, in order:



          ‚Ä¢ register_plugin(name, plugin)



          ‚Ä¢ add_plugin(name, plugin)



          ‚Ä¢ register(plugin) / register(name, plugin)



          ‚Ä¢ add(plugin)      / add(name, plugin)



          ‚Ä¢ attach(plugin)   / attach(name, plugin)



        Fallback: dict-like registries api.plugins / api.registry / api.plugin_registry.



    """

    candidates: list[tuple[str, tuple[Any, ...]]] = [
        ("register_plugin", (name, plugin)),
        ("add_plugin", (name, plugin)),
        ("register", (plugin,)),
        ("register", (name, plugin)),
        ("add", (plugin,)),
        ("add", (name, plugin)),
        ("attach", (plugin,)),
        ("attach", (name, plugin)),
    ]

    for method, args in candidates:
        fn = getattr(api, method, None)

        if callable(fn):
            try:
                fn(*args)

                return

            except TypeError:
                # Spr√≥buj kolejny wariant sygnatury

                continue

    # Fallback: bezpo≈õrednie wpisanie do mapy rejestru

    for attr in ("plugins", "registry", "plugin_registry"):
        reg = getattr(api, attr, None)

        if isinstance(reg, dict) or isinstance(reg, MutableMapping):
            reg[name] = plugin

            return

    raise RuntimeError("No compatible registration hook or registry mapping found on Plugin API")


class Plugin:
    """



    PL: Minimalna implementacja pluginu. W realnym wdro≈ºeniu trzyma tu



        kompilowane regu≈Çy LEXLOG, walidatory itd.



    EN: Minimal plugin implementation. In production, keep compiled



        LEXLOG rules, validators, etc.



    """

    def __init__(self) -> None:
        self.ruleset_version: str = "pl.lexlog/1.0.0"

    def setup(self) -> None:
        # PL: Tu m√≥g≈Çby≈õ za≈Çadowaƒá regu≈Çy z packs/jurisdictions/PL/rules/

        # EN: Load rules here from packs/jurisdictions/PL/rules/

        pass

    def run(self, **kwargs: Any) -> dict[str, Any]:
        return {
            "status": "ok",
            "plugin": PLUGIN_NAME,
            "rules": self.ruleset_version,
            "kwargs": kwargs,
        }

    def register(self, api: Any) -> None:
        """



        PL: Rejestracja w rdzeniu ‚Äì odporna na r√≥≈ºne kszta≈Çty API.



        EN: Core registration ‚Äì resilient to various API shapes.



        """

        _safe_register(api, self, PLUGIN_NAME)


def register(api: Any, name: str | None = None) -> None:
    """



    PL: Styl modu≈Çowy (u≈ºywany przez loader, je≈õli w plugin.yaml podasz 'register: register').



    EN: Module-level style (used by loader when 'register: register' is present in plugin.yaml).



    """

    plugin = Plugin()

    plugin.setup()

    _safe_register(api, plugin, name or PLUGIN_NAME)

```


===== FILE: plugins/tpl_diff_pl/plugin.yaml =====
```text
name: tpl_diff_pl
version: 0.1.0
module: plugins.tpl_diff_pl.src.main
register: register

```


===== FILE: plugins/tpl_diff_pl/src/main.py =====
```text
# +=====================================================================+
# |                          CERTEUS                                    |
# +=====================================================================+
# | MODULE:  F:/projekty/certeus/plugins/tpl_diff_pl/src/main.py         |
# | DATE:    2025-08-17                                                  |
# +=====================================================================+


# +-------------------------------------------------------------+

# |                          CERTEUS                            |

# +-------------------------------------------------------------+

# | FILE: plugins/tpl_diff_pl/src/main.py                     |

# | ROLE: Project module.                                       |

# | PLIK: plugins/tpl_diff_pl/src/main.py                     |

# | ROLA: Modu≈Ç projektu.                                       |

# +-------------------------------------------------------------+


"""



PL: Modu≈Ç CERTEUS ‚Äì uzupe≈Çnij opis funkcjonalny.



EN: CERTEUS module ‚Äì please complete the functional description.



"""


# +-------------------------------------------------------------+


# |                          CERTEUS                            |


# +-------------------------------------------------------------+


# | FILE: plugins/tpl_diff_pl/src/main.py                     |


# | ROLE: Project module.                                       |


# | PLIK: plugins/tpl_diff_pl/src/main.py                     |


# | ROLA: Modu≈Ç projektu.                                       |


# +-------------------------------------------------------------+

from datetime import datetime


def _mock_diff(act_id: str, v_from: str, v_to: str):
    # Placeholder: returns a deterministic "diff" shape

    return {
        "act_id": act_id,
        "from": v_from,
        "to": v_to,
        "changes": [
            {"type": "amend", "article": "art. 1", "note": "placeholder change"},
            {"type": "repeal", "article": "art. 2", "note": "placeholder repeal"},
        ],
        "generated_at": datetime.utcnow().isoformat() + "Z",
    }


def register(api):
    api.register_plugin("tpl_diff_pl", {"version": "0.1.0"})

    # Register as an adapter-like callable; convention: 'tpl.diff.pl'

    api.register_adapter("tpl.diff.pl", _mock_diff)

```


===== FILE: policies/pco/lex.advisory.yaml =====
```text
# +=====================================================================+
# |                          CERTEUS ‚Äî HEART                            |
# +=====================================================================+
# | FILE: policies/pco/lex.advisory.yaml                                |
# | ROLE:                                                                |
# |  PL: Pack ‚Äûadvisory‚Äù dla prawa PL.                                   |
# |  EN: PL law 'advisory' pack.                                         |
# +=====================================================================+

name: "lex.advisory.pl.v1"
jurisdictions: ["PL"]
domains: ["law"]
expires_at: "2026-12-31T23:59:59Z"
min_truthops_profile: "default"
breakglass_allowed: false
public_payload_fields: ["rid","smt2_hash","lfsc","merkle_proof","signature"]
obligations:
  endpoint_pattern: "^/pco/public/[a-f0-9]{64}$"
  jwks_published: true
  drat_required: false

```


===== FILE: policies/pco/lex.release.yaml =====
```text
# +=====================================================================+
# |                          CERTEUS ‚Äî HEART                            |
# +=====================================================================+
# | FILE: policies/pco/lex.release.yaml                                 |
# | ROLE:                                                                |
# |  PL: Pack ‚Äûrelease‚Äù dla prawa PL (public fields, obligations).       |
# |  EN: PL law 'release' pack (public fields, obligations).             |
# +=====================================================================+

name: "lex.release.pl.v1"
jurisdictions: ["PL"]
domains: ["law"]
expires_at: "2026-12-31T23:59:59Z"
min_truthops_profile: "default"
breakglass_allowed: false
public_payload_fields: ["rid","smt2_hash","lfsc","drat","merkle_proof","signature"]
obligations:
  endpoint_pattern: "^/pco/public/[a-f0-9]{64}$"
  jwks_published: true
  drat_required: true

```


===== FILE: policies/pco/policy_pack.schema.v0.1.json =====
```text
{
  "$schema": "https://json-schema.org/draft-07/schema",
  "$id": "https://certeus.local/schemas/policy_pack.schema.v0.1.json",
  "title": "PCO Policy Pack v0.1",
  "description": "Contract for PCO publication policies: proof levels, latency floors, caching, and public payload fields per use-case.",
  "type": "object",
  "required": [
    "version",
    "defaults",
    "use_cases",
    "checks"
  ],
  "additionalProperties": false,
  "properties": {
    "version": {
      "type": "string"
    },
    "defaults": {
      "type": "object",
      "required": [
        "proof_levels",
        "latency",
        "cache",
        "obligations"
      ],
      "additionalProperties": false,
      "properties": {
        "proof_levels": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "minItems": 1
        },
        "latency": {
          "type": "object",
          "required": [
            "p95_ms",
            "floor_ms"
          ],
          "additionalProperties": false,
          "properties": {
            "p95_ms": {
              "type": "integer",
              "minimum": 1
            },
            "floor_ms": {
              "type": "integer",
              "minimum": 1
            }
          }
        },
        "cache": {
          "type": "object",
          "required": [
            "mode",
            "ttl_s"
          ],
          "additionalProperties": false,
          "properties": {
            "mode": {
              "type": "string",
              "enum": [
                "strict",
                "cautious",
                "relaxed"
              ]
            },
            "ttl_s": {
              "type": "integer",
              "minimum": 0
            }
          }
        },
        "obligations": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "minItems": 1
        }
      }
    },
    "use_cases": {
      "type": "object",
      "minProperties": 1,
      "additionalProperties": {
        "type": "object",
        "required": [
          "proof_levels",
          "latency",
          "cache",
          "publish"
        ],
        "additionalProperties": false,
        "properties": {
          "drat_required": {
            "type": "boolean",
            "default": false
          },
          "proof_levels": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "minItems": 1
          },
          "latency": {
            "type": "object",
            "required": [
              "p95_ms",
              "floor_ms"
            ],
            "additionalProperties": false,
            "properties": {
              "p95_ms": {
                "type": "integer",
                "minimum": 1
              },
              "floor_ms": {
                "type": "integer",
                "minimum": 1
              }
            }
          },
          "cache": {
            "type": "object",
            "required": [
              "mode",
              "ttl_s"
            ],
            "additionalProperties": false,
            "properties": {
              "mode": {
                "type": "string",
                "enum": [
                  "strict",
                  "cautious",
                  "relaxed"
                ]
              },
              "ttl_s": {
                "type": "integer",
                "minimum": 0
              }
            }
          },
          "publish": {
            "type": "object",
            "required": [
              "endpoint",
              "fields"
            ],
            "additionalProperties": false,
            "properties": {
              "endpoint": {
                "type": "string",
                "pattern": "^/pco/public/\\{case_id\\}$"
              },
              "fields": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "minItems": 4
              }
            }
          }
        }
      }
    },
    "checks": {
      "type": "array",
      "minItems": 1,
      "items": {
        "type": "object",
        "required": [
          "name",
          "rule"
        ],
        "additionalProperties": false,
        "properties": {
          "name": {
            "type": "string"
          },
          "rule": {
            "type": "string"
          }
        }
      }
    }
  }
}
```


===== FILE: policies/pco/policy_pack.v0.1.yaml =====
```text
# +=====================================================================+
# |                              CERTEUS                                |
# +=====================================================================+
# | FILE: policies/pco/policy_pack.v0.1.yaml                            |
# | ROLE: PCO Policy Pack (proof levels, latency, caching, publish)     |
# +=====================================================================+

version: "0.1"

defaults:
  proof_levels: ["LFSC", "MUS"]
  latency:
    p95_ms: 250
    floor_ms: 10
  cache:
    mode: "cautious"
    ttl_s: 300
  obligations:
    - "no_pii_public_payload"
    - "jwks_published"

use_cases:
  LEX.release:
    drat_required: true
    proof_levels: ["LFSC", "DRAT"]
    latency: { p95_ms: 250, floor_ms: 10 }
    cache:   { mode: "strict", ttl_s: 0 }
    publish:
      endpoint: "/pco/public/{case_id}"
      fields: ["rid", "smt2_hash", "lfsc", "drat", "merkle_proof", "signature"]

  FHIR.model_update:
    drat_required: true
    proof_levels: ["LFSC", "DRAT"]
    latency: { p95_ms: 300, floor_ms: 10 }
    cache:   { mode: "strict", ttl_s: 0 }
    publish:
      endpoint: "/pco/public/{case_id}"
      fields: ["rid", "smt2_hash", "lfsc", "drat", "merkle_proof", "signature"]

  IFC.schedule_change:
    drat_required: true
    proof_levels: ["LFSC", "DRAT"]
    latency: { p95_ms: 200, floor_ms: 10 }
    cache:   { mode: "strict", ttl_s: 0 }
    publish:
      endpoint: "/pco/public/{case_id}"
      fields: ["rid", "smt2_hash", "lfsc", "drat", "merkle_proof", "signature"]

  LEX.advisory:
    drat_required: false
    proof_levels: ["LFSC", "MUS"]
    latency: { p95_ms: 250, floor_ms: 10 }
    cache:   { mode: "cautious", ttl_s: 300 }
    publish:
      endpoint: "/pco/public/{case_id}"
      fields: ["rid", "smt2_hash", "lfsc", "merkle_proof", "signature"]  # bez 'drat'

checks:
  - name: "no_pii_in_fields"
    rule:  "publish.fields ‚à© {name,pesel,email} = ‚àÖ"
  - name: "endpoint_pattern"
    rule:  "publish.endpoint ~= ^/pco/public/{case_id}$"

```


===== FILE: proof_artifacts/cvc5.lfsc =====
```text
PROOF::format=lfsc::solver=cvc5::nonce=b8stuTuv9tKDiiYrI7DdscHz
```


===== FILE: proof_artifacts/input.cnf =====
```text
p cnf 1 0

```


===== FILE: proof_artifacts/input.smt2 =====
```text
(set-logic ALL)
(set-info :source |CERTEUS simulated SMT2 input|)
(assert true)
(check-sat)
(exit)
```


===== FILE: proof_artifacts/z3.drat =====
```text
PROOF::format=drat::solver=z3::nonce=IznhylXXqXOe4tfiYBiMafEq
```


===== FILE: runtime/complexity_estimator.py =====
```text
# +=====================================================================+
# |                          CERTEUS ‚Äî HEART                            |
# +=====================================================================+
# | FILE: runtime/complexity_estimator.py                               |
# | ROLE:                                                               |
# |  PL: Szacunek z≈Ço≈ºono≈õci ‚Üí klasy HEAT (HOT/WARM/COLD).              |
# |  EN: Complexity estimation ‚Üí HEAT classes (HOT/WARM/COLD).          |
# +=====================================================================+

"""PL: Prosty heurystyczny estymator HEAT. EN: Simple heuristic HEAT estimator."""

from __future__ import annotations

from typing import Literal

Heat = Literal["HOT", "WARM", "COLD"]


def estimate_heat(ctx: dict[str, object]) -> Heat:
    """PL: Wyznacz klasƒô HEAT. EN: Derive HEAT class."""
    score = float(ctx.get("complexity_score", 0.5) or 0.5)
    if score < 0.3:
        return "HOT"
    if score < 0.7:
        return "WARM"
    return "COLD"

```


===== FILE: runtime/proof_queue.py =====
```text
# +=====================================================================+
# |                          CERTEUS ‚Äî HEART                            |
# +=====================================================================+
# | FILE: runtime/proof_queue.py                                        |
# | ROLE:                                                               |
# |  PL: Kolejka dowod√≥w z wagami SLA i brakiem zag≈Çodzenia.            |
# |  EN: Proof queue with SLA weights and no-starvation guarantees.     |
# +=====================================================================+

"""PL: Zwraca proof_task_id i eta_hint; eksportuje g≈Çƒôboko≈õƒá kolejki.
EN: Returns proof_task_id & eta_hint; exposes queue depth metric.
"""

from __future__ import annotations

import heapq
import time
from dataclasses import dataclass, field
from typing import Any

from .complexity_estimator import Heat
from .complexity_firewall import parse_sla_weights

SLA_W = parse_sla_weights()


@dataclass(order=True)
class _QItem:
    priority: int
    ts: float = field(compare=True)
    id: str = field(compare=False)
    tenant: str = field(compare=False)
    heat: Heat = field(compare=False)
    payload: dict[str, Any] = field(compare=False)
    eta_hint: str = field(compare=False)


class ProofQueue:
    """PL: Minimalna kolejka z wagami; FIFO w klasie. EN: Minimal weighted queue; FIFO per class."""

    def __init__(self) -> None:
        self._heap: list[tuple[int, float, str, _QItem]] = []
        self._depth = 0

    def enqueue(self, tenant: str, heat: Heat, payload: dict[str, Any], sla: str) -> _QItem:
        prio = -SLA_W.get(sla, 1)
        now = time.time()
        qid = f"pt_{int(now * 1000)}_{tenant}"
        eta = "~3‚Äì8 min" if heat != "HOT" else "~0‚Äì0.15 s"
        item = _QItem(priority=prio, ts=now, id=qid, tenant=tenant, heat=heat, payload=payload, eta_hint=eta)
        heapq.heappush(self._heap, (item.priority, item.ts, item.id, item))
        self._depth += 1
        return item

    def dequeue(self) -> _QItem | None:
        if not self._heap:
            return None
        _, _, _, it = heapq.heappop(self._heap)
        self._depth -= 1
        return it

    @property
    def depth(self) -> int:  # ruff: allow simple property
        return self._depth


PROOF_QUEUE = ProofQueue()

```


===== FILE: runtime/truthops/policies.yaml =====
```text
# +=====================================================================+
# |                          CERTEUS ‚Äî HEART                            |
# +=====================================================================+
# | FILE: runtime/truthops/policies.yaml                                |
# | ROLE:                                                                |
# |  PL: Progi TruthOps (GoP/EUQ/TTDE/ATT/MTV) per domena.              |
# |  EN: TruthOps thresholds (GoP/EUQ/TTDE/ATT/MTV) per domain.         |
# +=====================================================================+

profiles:
  default:
    GoP:
      min_sources: 3
      min_pivot_level: P3
      max_source_correlation: 0.85
    EUQ:
      lower_bound_publish: 0.75
      conditional_band: [0.55, 0.75]
    TTDE:
      ttl_days: { prawo: 365, med: 90, fin: 7 }
      auto_reverify: true
    ATT:
      tests_per_claim: { P0: 50, P1: 25, P2: 10, P3: 7, P4: 5 }
    MTV:
      reject_contradictions: true
      reject_self_inconsistency: true

```


===== FILE: schemas/answer_contract_v1.json =====
```text
{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "$id": "https://certeus/schemas/answer_contract_v1.json",
  "title": "Certeus - Kontrakt Odpowiedzi v1 / Answer Contract v1",
  "description": "PL: Kanoniczny kontrakt odpowiedzi (tre≈õƒá, cytowania, metryki, model, podpisy). EN: Canonical answer contract (content, citations, metrics, model, signatures).",
  "type": "object",
  "additionalProperties": false,
  "$defs": {
    "uuid": {
      "type": "string",
      "description": "PL: UUID (dowolnej wersji). EN: UUID (any version).",
      "pattern": "^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$"
    },
    "sha256": {
      "type": "string",
      "description": "PL: Skr√≥t SHA-256 w hex. EN: SHA-256 hex digest.",
      "pattern": "^[A-Fa-f0-9]{64}$"
    },
    "uri": {
      "type": "string",
      "format": "uri",
      "description": "PL: URI/URL do zasobu. EN: URI/URL to a resource."
    },
    "citation": {
      "type": "object",
      "description": "PL: Cytowanie ≈∫r√≥d≈Ça. EN: Source citation.",
      "additionalProperties": false,
      "properties": {
        "type": {
          "type": "string",
          "description": "PL: Typ ≈∫r√≥d≈Ça. EN: Source type.",
          "enum": ["statute", "case_law", "doctrine", "web", "file", "other"]
        },
        "label": {
          "type": "string",
          "description": "PL: Etykieta/tytu≈Ç ≈∫r√≥d≈Ça. EN: Source label/title."
        },
        "ref": {
          "type": "string",
          "description": "PL: Referencja (sygnatura/URL/≈õcie≈ºka). EN: Reference (citation/URL/path)."
        },
        "locator": {
          "type": "string",
          "description": "PL: Lokalizator (art., ¬ß, strona). EN: Locator (article, ¬ß, page)."
        },
        "hash": {
          "$ref": "#/$defs/sha256",
          "description": "PL: Hash tre≈õci ≈∫r√≥d≈Ça (je≈õli dostƒôpny). EN: Hash of the source content (if available)."
        }
      },
      "required": ["type", "label", "ref"]
    },
    "signature": {
      "type": "object",
      "description": "PL: Podpis kryptograficzny. EN: Cryptographic signature.",
      "additionalProperties": false,
      "properties": {
        "alg": {
          "type": "string",
          "description": "PL: Algorytm podpisu. EN: Signature algorithm.",
          "enum": ["ed25519", "rsa-pss-sha256", "ecdsa-p256-sha256"]
        },
        "signer": {
          "type": "string",
          "description": "PL: Identyfikator podpisujƒÖcego. EN: Signer identifier."
        },
        "signature": {
          "type": "string",
          "description": "PL: Tre≈õƒá podpisu (base64/hex). EN: Signature payload (base64/hex)."
        },
        "created_at": {
          "type": "string",
          "format": "date-time",
          "description": "PL: Czas podpisu. EN: Signature timestamp."
        }
      },
      "required": ["alg", "signer", "signature"]
    }
  },
  "properties": {
    "answer_id": {
      "$ref": "#/$defs/uuid",
      "description": "PL: Unikalny identyfikator odpowiedzi. EN: Unique answer identifier."
    },
    "case_id": {
      "type": "string",
      "description": "PL: Identyfikator sprawy. EN: Case identifier."
    },
    "question": {
      "type": "object",
      "description": "PL: Tre≈õƒá pytania i kontekstu. EN: Question text and context.",
      "additionalProperties": false,
      "properties": {
        "text": { "type": "string", "description": "PL: Pytanie. EN: Question." },
        "lang": { "type": "string", "description": "PL: Jƒôzyk pytania (BCP-47). EN: Language tag (BCP-47)." },
        "context_hash": { "$ref": "#/$defs/sha256", "description": "PL: Hash kontekstu. EN: Context hash." }
      },
      "required": ["text"]
    },
    "answer": {
      "type": "object",
      "description": "PL: Tre≈õƒá odpowiedzi. EN: Answer content.",
      "additionalProperties": false,
      "properties": {
        "text": { "type": "string", "description": "PL: Tekst odpowiedzi. EN: Answer text." },
        "lang": { "type": "string", "description": "PL: Jƒôzyk odpowiedzi (BCP-47). EN: Language tag (BCP-47)." },
        "hash": { "$ref": "#/$defs/sha256", "description": "PL: Hash odpowiedzi. EN: Answer hash." }
      },
      "required": ["text"]
    },
    "citations": {
      "type": "array",
      "description": "PL: Lista cytowa≈Ñ. EN: List of citations.",
      "items": { "$ref": "#/$defs/citation" },
      "minItems": 0
    },
    "metrics": {
      "type": "object",
      "description": "PL: Metryki generacji i oceny. EN: Generation and evaluation metrics.",
      "additionalProperties": false,
      "properties": {
        "confidence": { "type": "number", "minimum": 0, "maximum": 1, "description": "PL: Pewno≈õƒá [0,1]. EN: Confidence [0,1]." },
        "safety_flags": { "type": "array", "items": { "type": "string" }, "description": "PL: Flagi bezpiecze≈Ñstwa. EN: Safety flags." },
        "latency_ms": { "type": "integer", "minimum": 0, "description": "PL: Latencja w ms. EN: Latency in ms." }
      }
    },
    "model": {
      "type": "object",
      "description": "PL: Informacje o modelu. EN: Model information.",
      "additionalProperties": false,
      "properties": {
        "provider": { "type": "string", "description": "PL: Dostawca. EN: Provider." },
        "name": { "type": "string", "description": "PL: Nazwa modelu. EN: Model name." },
        "version": { "type": "string", "description": "PL: Wersja. EN: Version." },
        "params": { "type": "object", "description": "PL: Parametry wywo≈Çania. EN: Call parameters." }
      },
      "required": ["provider", "name"]
    },
    "provenance": {
      "type": "object",
      "description": "PL: Odwo≈Çanie do paragonu pochodzenia. EN: Reference to provenance receipt.",
      "additionalProperties": false,
      "properties": {
        "receipt_id": { "$ref": "#/$defs/uuid", "description": "PL: ID paragonu. EN: Receipt ID." },
        "receipt_hash": { "$ref": "#/$defs/sha256", "description": "PL: Hash paragonu. EN: Receipt hash." },
        "receipt_uri": { "$ref": "#/$defs/uri", "description": "PL: URI paragonu. EN: Receipt URI." }
      }
    },
    "timestamps": {
      "type": "object",
      "description": "PL: Czas utworzenia/aktualizacji. EN: Creation/update timestamps.",
      "additionalProperties": false,
      "properties": {
        "created_at": { "type": "string", "format": "date-time", "description": "PL: Utworzenie. EN: Created at." },
        "updated_at": { "type": "string", "format": "date-time", "description": "PL: Aktualizacja. EN: Updated at." }
      },
      "required": ["created_at"]
    },
    "signatures": {
      "type": "array",
      "description": "PL: Podpisy kryptograficzne. EN: Cryptographic signatures.",
      "items": { "$ref": "#/$defs/signature" },
      "minItems": 0
    }
  },
  "required": ["answer_id", "case_id", "question", "answer", "timestamps", "model"]
}

```


===== FILE: schemas/pca2_v1.json =====
```text
{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "$id": "https://certeus/schemas/pca2_v1.json",
  "title": "Certeus - PCA¬≤ v1 (Polityki, Ograniczenia, Za≈Ço≈ºenia, Atestacje) / PCA¬≤ v1",
  "description": "PL: Rejestr zgodno≈õci: polityki, ograniczenia, za≈Ço≈ºenia i atestacje wynik√≥w. EN: Compliance ledger: policies, constraints, assumptions, and attestations.",
  "type": "object",
  "additionalProperties": false,
  "$defs": {
    "sha256": {
      "type": "string",
      "description": "PL: Skr√≥t SHA-256 w hex. EN: SHA-256 hex digest.",
      "pattern": "^[A-Fa-f0-9]{64}$"
    },
    "uri": {
      "type": "string",
      "format": "uri",
      "description": "PL: URI/URL do zasobu. EN: URI/URL to a resource."
    },
    "constraint": {
      "type": "object",
      "description": "PL: Ograniczenie (regu≈Ça) do weryfikacji. EN: Constraint (rule) to verify.",
      "additionalProperties": false,
      "properties": {
        "name": { "type": "string", "description": "PL: Nazwa ograniczenia. EN: Constraint name." },
        "expression": { "type": "string", "description": "PL: Wyra≈ºenie/regu≈Ça. EN: Expression/rule." },
        "verdict": { "type": "string", "enum": ["pass", "fail", "skip"], "description": "PL: Wynik weryfikacji. EN: Verification verdict." },
        "details": { "type": "string", "description": "PL: Szczeg√≥≈Çy/uzasadnienie. EN: Details/justification." },
        "evidence_uri": { "$ref": "#/$defs/uri", "description": "PL: Dow√≥d (URI). EN: Evidence (URI)." }
      },
      "required": ["name", "verdict"]
    },
    "assumption": {
      "type": "object",
      "description": "PL: Przyjƒôte za≈Ço≈ºenie. EN: Accepted assumption.",
      "additionalProperties": false,
      "properties": {
        "name": { "type": "string", "description": "PL: Nazwa za≈Ço≈ºenia. EN: Assumption name." },
        "value": { "type": "string", "description": "PL: Warto≈õƒá/stan. EN: Value/state." },
        "justification": { "type": "string", "description": "PL: Uzasadnienie. EN: Justification." },
        "hash": { "$ref": "#/$defs/sha256", "description": "PL: Hash tre≈õci za≈Ço≈ºenia. EN: Assumption content hash." }
      },
      "required": ["name"]
    },
    "attestation": {
      "type": "object",
      "description": "PL: Atestacja zgodno≈õci. EN: Compliance attestation.",
      "additionalProperties": false,
      "properties": {
        "subject": { "type": "string", "description": "PL: Co atestujemy. EN: What is attested." },
        "by": { "type": "string", "description": "PL: Podmiot (modu≈Ç/osoba). EN: Actor (module/person)." },
        "result": { "type": "string", "enum": ["pass", "fail"], "description": "PL: Wynik atestacji. EN: Attestation result." },
        "evidence_hash": { "$ref": "#/$defs/sha256", "description": "PL: Hash dowodu. EN: Evidence hash." },
        "at": { "type": "string", "format": "date-time", "description": "PL: Czas atestacji. EN: Attested at." }
      },
      "required": ["subject", "by", "result"]
    }
  },
  "properties": {
    "case_id": { "type": "string", "description": "PL: Identyfikator sprawy. EN: Case identifier." },
    "policy": {
      "type": "array",
      "description": "PL: Zastosowane polityki zgodno≈õci. EN: Applied compliance policies.",
      "items": { "type": "string" },
      "minItems": 0
    },
    "constraints": {
      "type": "array",
      "description": "PL: Ograniczenia do weryfikacji. EN: Constraints to verify.",
      "items": { "$ref": "#/$defs/constraint" },
      "minItems": 0
    },
    "assumptions": {
      "type": "array",
      "description": "PL: Za≈Ço≈ºenia u≈ºyte w rozumowaniu. EN: Assumptions used in reasoning.",
      "items": { "$ref": "#/$defs/assumption" },
      "minItems": 0
    },
    "attestations": {
      "type": "array",
      "description": "PL: Atestacje zgodno≈õci. EN: Compliance attestations.",
      "items": { "$ref": "#/$defs/attestation" },
      "minItems": 0
    },
    "audit_trail": {
      "type": "array",
      "description": "PL: ≈ölad audytowy krok√≥w weryfikacji. EN: Audit trail of verification steps.",
      "items": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "type": { "type": "string", "description": "PL: Typ zdarzenia. EN: Event type." },
          "at": { "type": "string", "format": "date-time", "description": "PL: Czas zdarzenia. EN: Event timestamp." },
          "actor": { "type": "string", "description": "PL: Sprawca/komponent. EN: Actor/component." },
          "message": { "type": "string", "description": "PL: Komunikat. EN: Message." }
        },
        "required": ["type", "at"]
      },
      "minItems": 0
    },
    "overall_status": {
      "type": "string",
      "description": "PL: Status og√≥lny. EN: Overall status.",
      "enum": ["pass", "fail", "mixed"]
    },
    "final_hash": {
      "$ref": "#/$defs/sha256",
      "description": "PL: Hash ko≈Ñcowy PCA¬≤. EN: Final PCA¬≤ hash."
    }
  },
  "required": ["case_id", "overall_status"]
}

```


===== FILE: schemas/provenance_receipt_v1.json =====
```text
{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "$id": "https://certeus/schemas/provenance_receipt_v1.json",
  "title": "Certeus - Dow√≥d Pochodzenia v1 / Provenance Receipt v1",
  "description": "PL: Kryptograficzny 'paragon' dokumentujƒÖcy genezƒô odpowiedzi (wej≈õcia, solvery, skr√≥ty). EN: A cryptographic 'receipt' documenting the origin of an answer (inputs, solvers, hashes).",
  "type": "object",
  "additionalProperties": false,
  "$defs": {
    "uuid": {
      "type": "string",
      "description": "PL: UUID (dowolnej wersji). EN: UUID (any version).",
      "pattern": "^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$"
    },
    "sha256": {
      "type": "string",
      "description": "PL: Skr√≥t SHA-256 w hex. EN: SHA-256 hex digest.",
      "pattern": "^[A-Fa-f0-9]{64}$"
    },
    "solverRecord": {
      "type": "object",
      "description": "PL: Wynik i metadane solvera. EN: Solver result and metadata.",
      "additionalProperties": false,
      "properties": {
        "status": {
          "type": "string",
          "description": "PL: Status wykonania. EN: Execution status.",
          "enum": ["ok", "error", "timeout"]
        },
        "proof_path": {
          "type": "string",
          "description": "PL: ≈öcie≈ºka/URI do dowodu. EN: Path/URI to the proof."
        },
        "proof_hash": {
          "$ref": "#/$defs/sha256",
          "description": "PL: Hash wygenerowanego dowodu. EN: Hash of the generated proof."
        },
        "runtime_ms": {
          "type": "integer",
          "description": "PL: Czas wykonania w ms. EN: Execution time in ms.",
          "minimum": 0
        },
        "meta": {
          "type": "object",
          "description": "PL: Dowolne metadane solvera. EN: Arbitrary solver metadata."
        }
      },
      "required": ["status"]
    }
  },
  "properties": {
    "case_id": {
      "type": "string",
      "description": "PL: Unikalny identyfikator sprawy. EN: Unique case identifier."
    },
    "receipt_id": {
      "$ref": "#/$defs/uuid",
      "description": "PL: Unikalny identyfikator paragonu pochodzenia. EN: Unique provenance receipt ID."
    },
    "inputs": {
      "type": "object",
      "description": "PL: Dane wej≈õciowe u≈ºyte do analizy. EN: Input data used for the analysis.",
      "additionalProperties": false,
      "properties": {
        "lexlog_rule_version": {
          "type": "string",
          "description": "PL: Wersja regu≈Çy LEXLOG. EN: Version of the LEXLOG rule."
        },
        "assumptions_hash": {
          "$ref": "#/$defs/sha256",
          "description": "PL: Skr√≥t u≈ºytych za≈Ço≈ºe≈Ñ. EN: Hash of the assumptions used."
        },
        "question_hash": {
          "$ref": "#/$defs/sha256",
          "description": "PL: Skr√≥t tre≈õci pytania. EN: Hash of the question text."
        }
      },
      "required": ["lexlog_rule_version", "assumptions_hash"]
    },
    "solvers": {
      "type": "object",
      "description": "PL: Wyniki i metadane z poszczeg√≥lnych solver√≥w. EN: Results and metadata from individual solvers.",
      "additionalProperties": false,
      "properties": {
        "z3": { "$ref": "#/$defs/solverRecord" },
        "cvc5": { "$ref": "#/$defs/solverRecord" }
      }
    },
    "mismatch": {
      "type": "boolean",
      "description": "PL: Czy solverzy siƒô nie zgadzajƒÖ. EN: Do solvers disagree."
    },
    "final_hash": {
      "$ref": "#/$defs/sha256",
      "description": "PL: Ostateczny skr√≥t ca≈Çego obiektu odpowiedzi. EN: Final hash of the entire answer object."
    },
    "timestamp": {
      "type": "string",
      "format": "date-time",
      "description": "PL: Znacznik czasu wygenerowania dowodu. EN: Timestamp of when the receipt was generated."
    }
  },
  "required": ["case_id", "inputs", "solvers", "mismatch", "final_hash", "timestamp"]
}

```


===== FILE: schemas/publication_contract_v1.json =====
```text
{
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "PublicationContractV1",
    "type": "object",
    "x-meta": {
        "banner": "+=============================================================+\\n|                       CERTEUS ‚Äî HEART                        |\\n+=============================================================+\\n| FILE: schemas/publication_contract_v1.json                  |\\n| ROLE:                                                       |\\n|  PL: Schemat publicznej odpowiedzi publikacyjnej.           |\\n|  EN: Schema of public publication response.                 |\\n+=============================================================+",
        "description_pl": "Kontrakt zwracany przez endpointy publikacyjne (status + PCO/plan + eta_hint).",
        "description_en": "Contract returned by publication endpoints (status + PCO/plan + eta_hint)."
    },
    "required": [
        "status",
        "headers"
    ],
    "properties": {
        "status": {
            "type": "string",
            "enum": [
                "PUBLISH",
                "CONDITIONAL",
                "PENDING",
                "ABSTAIN"
            ]
        },
        "eta_hint": {
            "type": "string"
        },
        "proof_task_id": {
            "type": "string"
        },
        "pco": {
            "type": "object"
        },
        "pco.plan": {
            "type": "object"
        },
        "headers": {
            "type": "object",
            "required": [
                "X-Norm-Pack-ID",
                "X-Jurisdiction"
            ],
            "properties": {
                "X-Norm-Pack-ID": {
                    "type": "string"
                },
                "X-Jurisdiction": {
                    "type": "string"
                }
            },
            "additionalProperties": false
        }
    },
    "additionalProperties": false
}
```


===== FILE: scripts/apply_headers.py =====
```text
# +=====================================================================+
# |                          CERTEUS                                    |
# +=====================================================================+
# | MODULE:  F:/projekty/certeus/scripts/apply_headers.py                |
# | DATE:    2025-08-17                                                  |
# +=====================================================================+


# +-------------------------------------------------------------+
# |                          CERTEUS                            |
# +-------------------------------------------------------------+
# | FILE: scripts/apply_headers.py                              |
# | ROLE: Auto-add CERTEUS header block and module docstrings   |
# |       to Python files that are missing them.                |
# | PLIK: scripts/apply_headers.py                              |
# | ROLA: Automatyczne dodanie nag≈Ç√≥wk√≥w i docstring√≥w modu≈Ç√≥w  |
# |       do plik√≥w Python bez tych element√≥w.                  |
# +-------------------------------------------------------------+
"""
PL: Skrypt skanuje repozytorium, znajduje pliki .py i dodaje:
    (1) standardowy nag≈Ç√≥wek CERTEUS (ASCII box) oraz
    (2) module docstring PL/EN ‚Äî je≈õli brakuje.
    Dzia≈Ça idempotentnie (nie dubluje nag≈Ç√≥wk√≥w).
EN: The script scans the repo for .py files and adds:
    (1) a standard CERTEUS header block (ASCII box), and
    (2) a PL/EN module docstring ‚Äî if missing.
    Idempotent (won't duplicate headers).
"""

from __future__ import annotations

import ast
import os
from collections.abc import Iterable
from pathlib import Path

# === KONFIG: kt√≥re katalogi skanowaƒá ========================== #
SCAN_DIRS = [
    "cje",
    "clients",
    "core",
    "kernel",
    "plugins",
    "scripts",
    "services",
    "tests",
]

# Pliki, kt√≥re zwykle pomijamy (je≈õli chcesz ‚Äì usu≈Ñ z listy)
SKIP_FILES = {
    "plugins/__init__.py",  # czƒôsto pusty
}


# === Generator nag≈Ç√≥wka ======================================= #
def build_header(rel_path: str) -> str:
    """
    Zwraca standardowy nag≈Ç√≥wek CERTEUS z dynamicznƒÖ ≈õcie≈ºkƒÖ pliku.
    """
    box = (
        "# +-------------------------------------------------------------+\n"
        "# |                          CERTEUS                            |\n"
        "# +-------------------------------------------------------------+\n"
        f"# | FILE: {rel_path:<52}|\n"
        "# | ROLE: Project module.                                       |\n"
        f"# | PLIK: {rel_path:<52}|\n"
        "# | ROLA: Modu≈Ç projektu.                                       |\n"
        "# +-------------------------------------------------------------+\n"
    )
    return box


# === Domy≈õlny module docstring ================================ #
DEFAULT_DOCSTRING = (
    '"""\n'
    "PL: Modu≈Ç CERTEUS ‚Äì uzupe≈Çnij opis funkcjonalny.\n"
    "EN: CERTEUS module ‚Äì please complete the functional description.\n"
    '"""\n'
)


# === Wykrywanie istniejƒÖcego nag≈Ç√≥wka/docstringa ============== #
def has_header(text: str) -> bool:
    # szukamy znaku rozpoznawczego w pierwszych ~10 liniach
    head = "\n".join(text.splitlines()[:10])
    return "CERTEUS" in head and "FILE:" in head


def has_module_docstring(text: str) -> bool:
    try:
        tree = ast.parse(text)
        return ast.get_docstring(tree) is not None
    except Exception:
        # Je≈õli nie mo≈ºemy sparsowaƒá (np. niekompletna sk≈Çadnia), uznaj brak
        return False


# === Wstawianie nag≈Ç√≥wka/docstringa =========================== #
def ensure_header_and_docstring(path: Path, project_root: Path) -> bool:
    """
    Modyfikuje plik, je≈õli brakuje nag≈Ç√≥wka lub docstringa.
    Zwraca True, je≈õli plik zosta≈Ç zmodyfikowany.
    """
    text = path.read_text(encoding="utf-8", errors="ignore")
    changed = False

    # zachowaj shebang/encoding (je≈õli sƒÖ w 1. linii)
    lines = text.splitlines(keepends=True)
    shebang = ""
    if lines and lines[0].startswith("#!"):
        shebang = lines[0]
        body = "".join(lines[1:])
    else:
        body = text

    # 1) Nag≈Ç√≥wek
    if not has_header(body):
        rel = str(path.relative_to(project_root)).replace("\\", "/")
        header = build_header(rel)
        body = header + ("\n" if not body.startswith("\n") else "") + body
        changed = True

    # 2) Module docstring
    if not has_module_docstring(body):
        # Docstring musi byƒá pierwszym statementem modu≈Çu ‚Üí wstawiamy na samƒÖ g√≥rƒô body
        body = DEFAULT_DOCSTRING + ("\n" if not body.startswith("\n") else "") + body
        changed = True

    if changed:
        new_text = (shebang + body) if shebang else body
        # Na Windows trzymajmy CRLF (Git i tak poradzi sobie z autocrlf)
        new_text = new_text.replace("\r\n", "\n").replace("\n", os.linesep)
        path.write_text(new_text, encoding="utf-8")
    return changed


# === Skan repo i przetwarzanie ================================ #
def iter_python_files(root: Path, dirs: Iterable[str]) -> Iterable[Path]:
    for d in dirs:
        p = root / d
        if not p.exists():
            continue
        for py in p.rglob("*.py"):
            rel = str(py.relative_to(root)).replace("\\", "/")
            if rel in SKIP_FILES:
                continue
            yield py


def main() -> None:
    root = Path(__file__).resolve().parents[1]  # repo root
    changed_total = 0
    for py in iter_python_files(root, SCAN_DIRS):
        if ensure_header_and_docstring(py, root):
            changed_total += 1
            print(f"[UPDATED] {py.relative_to(root)}")
    print(f"\nDone. Files updated: {changed_total}")


if __name__ == "__main__":
    main()

```


===== FILE: scripts/build_flags_from_mapping.py =====
```text
# +=====================================================================+
# |                          CERTEUS                                    |
# +=====================================================================+
# | MODULE:  F:/projekty/certeus/scripts/build_flags_from_mapping.py     |
# | DATE:    2025-08-17                                                  |
# +=====================================================================+


# +-------------------------------------------------------------+
# |              CERTEUS - Build Flags From Mapping             |
# +-------------------------------------------------------------+
# | PLIK: build_flags_from_mapping.py                           |
# | ROLA: Buduje zestaw flag (JSON) na podstawie regu≈Ç i mapy.  |
# +-------------------------------------------------------------+
#
# PL: Skrypt iteracyjnie uruchamia evaluator LEXLOG i na podstawie
#     brakujƒÖcych przes≈Çanek/wyklucznik√≥w tworzy plik z flagami.
# EN: Iteratively runs the LEXLOG evaluator and, using missing
#     premises/excludes, produces a flags JSON for downstream tests.
"""
PL: Buduje plik flags JSON na podstawie mapowania przes≈Çanek‚Üíflagi silnika.
    Uzupe≈Çnia brakujƒÖce przes≈Çanki przez mapƒô P_* ‚Üí ZNAMIE_* (MVP).
EN: Builds flags JSON from mapping of premises‚Üíengine flags. Fills missing
    premises via P_* ‚Üí ZNAMIE_* mapping (MVP).
"""

from __future__ import annotations

import argparse
import json
import re
from collections.abc import Iterable as AbcIterable
from collections.abc import Mapping, MutableMapping, Sequence
from inspect import Signature, signature
from pathlib import Path
from typing import (
    Any,
    cast,
)

from services.lexlog_parser.evaluator import evaluate_rule
from services.lexlog_parser.mapping import load_mapping
from services.lexlog_parser.parser import parse_lexlog


def _to_set(xs: object | None) -> set[str]:
    """
    PL: Zamiana dowolnego wej≈õcia na set[str] z jawnie typowanym elementem.
    EN: Convert arbitrary input to set[str] with explicit element typing.
    """
    out: set[str] = set()
    if xs is None:
        return out
    if isinstance(xs, str):
        out.add(xs)
        return out
    if isinstance(xs, AbcIterable) and not isinstance(xs, bytes | bytearray):
        for elem in cast(AbcIterable[object], xs):
            s: str = str(elem)
            out.add(s)
        return out
    out.add(str(xs))
    return out


def _detect_rule_id_from_text(text: str, prefer_token: str = "286") -> str | None:
    """
    PL: Wyszukaj identyfikatory po 'RULE' i preferuj ten zawierajƒÖcy token (np. '286').
    EN: Extract identifiers after 'RULE' and prefer one containing a token (e.g. '286').
    """
    ids = re.findall(r"^\s*RULE\s+([A-Za-z0-9_.\-]+)", text, flags=re.MULTILINE)
    if not ids:
        return None
    for rid in ids:
        if prefer_token and prefer_token.lower() in rid.lower():
            return rid
    return ids[0]


def _call_evaluate(ast: Any, rule_id: str | None, flags: Mapping[str, bool], ctx: Any) -> Any:
    """
    PL: Wywo≈Çaj evaluate_rule zgodnie z aktualnƒÖ sygnaturƒÖ (r√≥≈ºne wersje).
    EN: Call evaluate_rule according to the current signature (versions may differ).
    """
    sig: Signature = signature(evaluate_rule)
    params: Sequence[str] = list(sig.parameters.keys())

    kwargs: dict[str, Any] = {}
    if "ast" in params:
        kwargs["ast"] = ast
    if "rule_id" in params:
        if not rule_id:
            raise ValueError("evaluate_rule requires 'rule_id' but none was detected")
        kwargs["rule_id"] = rule_id
    if "flags" in params:
        kwargs["flags"] = flags
    if "ctx" in params:
        kwargs["ctx"] = ctx

    try:
        return evaluate_rule(**kwargs)  # type: ignore[misc]
    except TypeError:
        # Fallbacks for very old signatures
        try:
            if "rule_id" not in params:
                return evaluate_rule(ast, flags, ctx)  # type: ignore[misc]
        except TypeError:
            return evaluate_rule(ast, flags)  # type: ignore[misc]


def _step(
    ast: Any, rule_id: str | None, flags: MutableMapping[str, bool], ctx: Any
) -> tuple[bool, set[str], set[str], Any]:
    """
    PL: Jeden krok ewaluacji -> (ok, missing_premises, failing_excludes, raw_result).
    EN: One evaluation step -> (ok, missing_premises, failing_excludes, raw_result).
    """
    res = _call_evaluate(ast, rule_id, flags, ctx)
    ok = bool(getattr(res, "satisfied", False))
    missing = _to_set(getattr(res, "missing_premises", []) or [])
    failing = _to_set(getattr(res, "failing_excludes", []) or [])
    return ok, missing, failing, res


def main() -> None:
    parser = argparse.ArgumentParser(
        prog="build_flags_from_mapping",
        description="Build flags JSON by iteratively satisfying a rule.",
    )
    parser.add_argument(
        "--rules",
        default="packs/jurisdictions/PL/rules/kk.lex",
        help="Path to .lex file",
    )
    parser.add_argument(
        "--map",
        default="packs/jurisdictions/PL/rules/kk.mapping.json",
        help="Path to mapping.json",
    )
    parser.add_argument(
        "--out",
        default="packs/jurisdictions/PL/flags/lexenith_results_latest.json",
        help="Output JSON file",
    )
    parser.add_argument(
        "--rule-id", default=None, help="Explicit rule_id (overrides auto-detection)"
    )
    parser.add_argument(
        "--prefer-token",
        default="286",
        help="Token preferred when auto-selecting RULE id",
    )
    parser.add_argument("--max-iter", type=int, default=10, help="Max refinement iterations")
    args = parser.parse_args()

    rules_path = Path(args.rules)
    map_path = Path(args.map)
    out_path = Path(args.out)

    rules_text = rules_path.read_text(encoding="utf-8")
    ast = parse_lexlog(rules_text)
    ctx = load_mapping(map_path)

    rule_id = args.rule_id or _detect_rule_id_from_text(rules_text, prefer_token=args.prefer_token)
    if rule_id:
        print(f"[INFO] Using rule_id: {rule_id}")
    else:
        print("[WARN] Could not detect rule_id from .lex; trying evaluator without rule_id")

    flags: dict[str, bool] = {}

    for _ in range(args.max_iter):
        ok, miss, fail, _ = _step(ast, rule_id, flags, ctx)
        if ok:
            break

        if miss:
            for p in miss:
                engine_flag = ctx.premise_to_flag.get(p)  # P_* -> ZNAMIE_* je≈õli dostƒôpne
                key = str(engine_flag or p)
                flags[key] = True
        if fail:
            for k in fail:
                flags[str(k)] = False

    out_path.parent.mkdir(parents=True, exist_ok=True)
    out_path.write_text(json.dumps({"flags": flags}, ensure_ascii=True, indent=2), encoding="utf-8")
    print("[OK] wrote", out_path)
    print("[OK] True:", sorted([k for k, v in flags.items() if v]))
    print("[OK] False:", sorted([k for k, v in flags.items() if not v]))


if __name__ == "__main__":
    main()

```


===== FILE: scripts/check_drat.sh =====
```text
#!/usr/bin/env bash
# +=====================================================================+
# |                              CERTEUS                                |
# +=====================================================================+
# | FILE / PLIK: scripts/check_drat.sh                                  |
# | ROLA / ROLE: DRAT checker (Linux/CI).                               |
# | OPIS / DESC: Presence & signature; optional drat-trim if CNF exists.|
# +=====================================================================+
set -Eeuo pipefail

ART_DIR="${ART_DIR:-proof_artifacts}"
DRAT_NAME="${DRAT_NAME:-z3.drat}"
SHA_FILE="${SHA_FILE:-}"
CNF_PATH="${CNF_PATH:-}"

while getopts ":d:f:s:" opt; do
  case "$opt" in
    d) ART_DIR="$OPTARG" ;;
    f) DRAT_NAME="$OPTARG" ;;
    s) SHA_FILE="$OPTARG" ;;
    *) echo "Usage: $0 [-d artifacts_dir] [-f drat_file] [-s sha256sum_file]" >&2; exit 2 ;;
  esac
done

DRAT_PATH="${ART_DIR}/${DRAT_NAME}"
[[ -f "$DRAT_PATH" ]] || { echo "::error::DRAT not found: ${DRAT_PATH}"; exit 1; }
[[ -s "$DRAT_PATH" ]] || { echo "::error::DRAT is empty: ${DRAT_PATH}"; exit 1; }

# Optional SHA check
if [[ -n "${SHA_FILE}" ]]; then
  [[ -f "${SHA_FILE}" ]] || { echo "::error::SHA file not found: ${SHA_FILE}"; exit 1; }
  sha256sum -c "${SHA_FILE}" || { echo "::error::SHA256 mismatch for ${DRAT_PATH}"; exit 1; }
fi

# Signature sanity
grep -q 'PROOF' "$DRAT_PATH"       || { echo "::error file=${DRAT_PATH}::Missing PROOF signature"; exit 3; }
grep -q 'format=drat' "$DRAT_PATH" || { echo "::error file=${DRAT_PATH}::Missing format=drat"; exit 3; }

# External checker (optional)
if command -v drat-trim >/dev/null 2>&1; then
  if [[ -n "${CNF_PATH}" && -f "${CNF_PATH}" ]]; then
    echo "‚ÑπÔ∏è drat-trim: CNF found ‚Üí running verification‚Ä¶"
    drat-trim "${CNF_PATH}" "${DRAT_PATH}" -q || { echo "::error::drat-trim verification failed"; exit 4; }
  else
    echo "‚ÑπÔ∏è drat-trim available, but CNF missing ‚Üí skipping external verification."
  fi
else
  echo "‚ÑπÔ∏è drat-trim not found; basic checks only."
fi

echo "‚úÖ DRAT check passed for ${DRAT_PATH}"

```


===== FILE: scripts/check_hashes.ps1 =====
```text
# +======================================================================+
# |                               CERTEUS                                |
# +======================================================================+
# | FILE / PLIK: scripts/check_hashes.ps1                                |
# | ROLA / ROLE:                                                          |
# |  PL: Oblicza SHA256 plik√≥w DRAT/LFSC w proof_artifacts.               |
# |  EN: Compute SHA256 for DRAT/LFSC files in proof_artifacts.           |
# +======================================================================+
Param(
    [string]$Dir = "proof_artifacts"
)
$drat = Join-Path $Dir "z3.drat"
$lfsc = Join-Path $Dir "cvc5.lfsc"
if (Test-Path $drat) { Get-FileHash $drat -Algorithm SHA256 }
if (Test-Path $lfsc) { Get-FileHash $lfsc -Algorithm SHA256 }

```


===== FILE: scripts/check_headers.py =====
```text
# +=====================================================================+
# |                          CERTEUS                                    |
# +=====================================================================+
# | MODULE:  F:/projekty/certeus/scripts/check_headers.py                |
# | DATE:    2025-08-17                                                  |
# +=====================================================================+


# +-------------------------------------------------------------+
# |                          CERTEUS                            |
# +-------------------------------------------------------------+
# | FILE: scripts/check_headers.py                              |
# | ROLE: Pre-commit checker for CERTEUS header & module docstr |
# | PLIK: scripts/check_headers.py                              |
# | ROLA: Walidator nag≈Ç√≥wka CERTEUS i docstringa modu≈Çu        |
# +-------------------------------------------------------------+
"""
PL: Skrypt uruchamiany przez pre-commit. Dla podanych plik√≥w .py
    sprawdza obecno≈õƒá nag≈Ç√≥wka CERTEUS oraz module docstringa.
    Akceptuje kilka form nag≈Ç√≥wka (baner z 'CERTEUS', lub linie
    zawierajƒÖce 'FILE:'/'PLIK:'), ≈ºeby nie blokowaƒá developmentu.

EN: Pre-commit script. For given .py files, validates that a
    CERTEUS header and a module docstring are present. It accepts
    multiple header styles (banner with 'CERTEUS' or lines that
    contain 'FILE:'/'PLIK:') to avoid blocking development.
"""

from __future__ import annotations

# === stdlib imports (one-per-line for Ruff) ===================
import argparse
import ast
import sys
from collections.abc import Iterable
from pathlib import Path

# ==============================================================
# == BLOCK: detection helpers                                  =
# ==============================================================


def _read_head(path: Path, head_lines: int = 30) -> str:
    """Read only the first N lines of the file for header detection."""
    try:
        lines: list[str] = []
        with path.open("r", encoding="utf-8", errors="ignore") as f:
            for i, line in enumerate(f):
                if i >= head_lines:
                    break
                lines.append(line)
        head: str = "".join(lines)
        return head
    except Exception:
        return ""


def _has_module_docstring(full_text: str) -> bool:
    """Parse AST and check for module docstring presence."""
    try:
        tree = ast.parse(full_text)
        return ast.get_docstring(tree) is not None
    except Exception:
        return False


def _has_certeus_header(head_text: str) -> bool:
    """
    Flexible header detection:
    - any line in head that contains 'CERTEUS' (banner or single line), OR
    - presence of 'FILE:' and/or 'PLIK:' markers, OR
    - SPDX license line if you decide to add one later.

    This matches the banner inserted by scripts/apply_headers.py.
    """
    head_lower: str = head_text.lower()
    if "certeus" in head_lower:
        return True
    if "file:" in head_lower or "plik:" in head_lower:
        return True
    if "spdx-license-identifier" in head_lower:
        return True
    return False


# ==============================================================
# == BLOCK: main check routine                                  =
# ==============================================================


def check_files(paths: Iterable[Path]) -> int:
    """
    Return exit code (0 ok, 1 failure). Prints issues as:
    [HEADER MISSING] <path>
    [DOCSTRING MISSING] <path>
    """
    missing: int = 0
    for p in paths:
        if p.suffix != ".py":
            continue
        if not p.exists():
            continue

        head: str = _read_head(p)
        try:
            full: str = p.read_text(encoding="utf-8", errors="ignore")
        except Exception:
            full = head  # fallback

        # --- header
        if not _has_certeus_header(head):
            print(f"[HEADER MISSING] {p}")
            missing += 1

        # --- module docstring
        if not _has_module_docstring(full):
            print(f"[DOCSTRING MISSING] {p}")
            missing += 1

    return 0 if missing == 0 else 1


# ==============================================================
# == BLOCK: CLI entrypoint                                      =
# ==============================================================


def main() -> int:
    parser = argparse.ArgumentParser(
        description="CERTEUS header/docstring gate",
    )
    parser.add_argument("files", nargs="*", help="Files passed by pre-commit")
    args = parser.parse_args()

    paths = [Path(f) for f in args.files]
    return check_files(paths)


if __name__ == "__main__":
    sys.exit(main())

```


===== FILE: scripts/check_lfsc.sh =====
```text
#!/usr/bin/env bash
# +=====================================================================+
# |                              CERTEUS                                |
# +=====================================================================+
# | FILE / PLIK: scripts/check_lfsc.sh                                  |
# | ROLA / ROLE: LFSC checker (Linux/CI).                               |
# | OPIS / DESC: Presence & signature; optional cvc5/lfsc-checker       |
# |             if SMT2 exists.                                         |
# +=====================================================================+
set -Eeuo pipefail

ART_DIR="${ART_DIR:-proof_artifacts}"
LFSC_NAME="${LFSC_NAME:-cvc5.lfsc}"
SHA_FILE="${SHA_FILE:-}"
SMT2_PATH="${SMT2_PATH:-}"

while getopts ":d:f:s:" opt; do
  case "$opt" in
    d) ART_DIR="$OPTARG" ;;
    f) LFSC_NAME="$OPTARG" ;;
    s) SHA_FILE="$OPTARG" ;;
    *) echo "Usage: $0 [-d artifacts_dir] [-f lfsc_file] [-s sha256sum_file]" >&2; exit 2 ;;
  esac
done

LFSC_PATH="${ART_DIR}/${LFSC_NAME}"
[[ -f "$LFSC_PATH" ]] || { echo "::error::LFSC not found: ${LFSC_PATH}"; exit 1; }
[[ -s "$LFSC_PATH" ]] || { echo "::error::LFSC is empty: ${LFSC_PATH}"; exit 1; }

# Optional SHA check
if [[ -n "${SHA_FILE}" ]]; then
  [[ -f "${SHA_FILE}" ]] || { echo "::error::SHA file not found: ${SHA_FILE}"; exit 1; }
  sha256sum -c "${SHA_FILE}" || { echo "::error::SHA256 mismatch for ${LFSC_PATH}"; exit 1; }
fi

# Signature sanity
grep -q 'PROOF' "$LFSC_PATH"       || { echo "::error file=${LFSC_PATH}::Missing PROOF signature"; exit 3; }
grep -q 'format=lfsc' "$LFSC_PATH" || { echo "::error file=${LFSC_PATH}::Missing format=lfsc"; exit 3; }

# External checker (optional)
if command -v cvc5 >/dev/null 2>&1; then
  if [[ -n "${SMT2_PATH}" && -f "${SMT2_PATH}" ]]; then
    echo "‚ÑπÔ∏è cvc5: SMT2 found ‚Üí attempting proof check."
    cvc5 --proof-mode=lfsc --check-proofs "${SMT2_PATH}" >/dev/null || { echo "::error::cvc5 proof check failed"; exit 4; }
  else
    echo "‚ÑπÔ∏è cvc5 available, but SMT2 missing ‚Üí skipping external verification."
  fi
elif command -v lfsc-checker >/dev/null 2>&1; then
  echo "‚ÑπÔ∏è lfsc-checker found; running‚Ä¶"
  lfsc-checker "${LFSC_PATH}" || { echo "::error::lfsc-checker failed"; exit 4; }
else
  echo "‚ÑπÔ∏è no LFSC checker found; basic checks only."
fi

echo "‚úÖ LFSC check passed for ${LFSC_PATH}"

```


===== FILE: scripts/check_proofs.py =====
```text
# +=====================================================================+
# |                          CERTEUS                                    |
# +=====================================================================+
# | MODULE:  F:/projekty/certeus/scripts/check_proofs.py                 |
# | DATE:    2025-08-17                                                  |
# +=====================================================================+


# +-------------------------------------------------------------+
# |                        CERTEUS                              |
# |            Proof-Gate: Artifact Integrity Checker           |
# +-------------------------------------------------------------+
# ‚îÄ‚îÄ CERTEUS Project ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
# File: scripts/check_proofs.py
# License: Apache-2.0
# Description (PL): Weryfikacja SHA256 artefakt√≥w DRAT/LFSC.
# Description (EN): Verifies SHA256 of DRAT/LFSC artifacts.
# Style Guide: PL/EN docs, labeled blocks. (See README)
# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ

"""
PL: Sprawdza istnienie plik√≥w {z3.drat,cvc5.lfsc} i ich plik√≥w *.sha256,
    por√≥wnuje wyliczone sumy SHA256 z zapisanymi. Zwraca kod 0/1.

EN: Checks presence of {z3.drat,cvc5.lfsc} and their *.sha256 files,
    compares computed SHA256 with recorded ones. Returns code 0/1.
"""

# [BLOCK: IMPORTS / IMPORTY]
from __future__ import annotations

import argparse
import hashlib
import sys
from pathlib import Path

# [BLOCK: CLI]
parser = argparse.ArgumentParser()
parser.add_argument(
    "--dir",
    default="proof-artifacts",
    help="PL: Katalog artefakt√≥w | EN: Artifacts directory",
)
args = parser.parse_args()
d = Path(args.dir)

# [BLOCK: CHECK FILES / SPRAWD≈π PLIKI]
required = ["z3.drat", "z3.drat.sha256", "cvc5.lfsc", "cvc5.lfsc.sha256"]
missing = [name for name in required if not (d / name).exists()]
if missing:
    print(f"ERROR: Missing files: {', '.join(missing)}")
    sys.exit(1)


# [BLOCK: VERIFY / WERYFIKUJ]
def verify(path: Path, sha_path: Path) -> bool:
    recorded = sha_path.read_text(encoding="utf-8").strip().split()[0]
    computed = hashlib.sha256(path.read_bytes()).hexdigest()
    ok = computed == recorded
    print(f"{path.name}: {'OK' if ok else 'MISMATCH'} (computed={computed}, recorded={recorded})")
    return ok


ok1 = verify(d / "z3.drat", d / "z3.drat.sha256")
ok2 = verify(d / "cvc5.lfsc", d / "cvc5.lfsc.sha256")

sys.exit(0 if (ok1 and ok2) else 1)

```


===== FILE: scripts/ed25519_keytool.py =====
```text
#!/usr/bin/env python3
# +=====================================================================+
# |                              CERTEUS                                |
# +=====================================================================+
# | FILE: scripts/ed25519_keytool.py                                    |
# | ROLE: Generate Ed25519 keypair and export public key (Base64URL).   |
# +=====================================================================+
from __future__ import annotations

import base64
from argparse import ArgumentParser
from pathlib import Path

from cryptography.hazmat.primitives import serialization
from cryptography.hazmat.primitives.asymmetric.ed25519 import Ed25519PrivateKey


def main() -> None:
    ap = ArgumentParser()
    ap.add_argument("--gen", action="store_true")
    ap.add_argument("--out-pem", default="ed25519-private.pem")
    ap.add_argument("--shell", choices=["bash", "powershell"], default="powershell")
    args = ap.parse_args()

    if args.gen:
        sk = Ed25519PrivateKey.generate()
        pem = sk.private_bytes(
            encoding=serialization.Encoding.PEM,
            format=serialization.PrivateFormat.PKCS8,
            encryption_algorithm=serialization.NoEncryption(),
        )
        Path(args.out_pem).write_bytes(pem)
        pk = sk.public_key().public_bytes(
            encoding=serialization.Encoding.Raw,
            format=serialization.PublicFormat.Raw,
        )
        b64u = base64.urlsafe_b64encode(pk).rstrip(b"=").decode()
        if args.shell == "bash":
            print(f'export ED25519_PRIVKEY_PEM="{Path(args.out_pem).resolve()}"')
            print(f'export ED25519_PUBKEY_B64URL="{b64u}"')
        else:
            print(f'$env:ED25519_PRIVKEY_PEM = "{Path(args.out_pem).resolve()}"')
            print(f"$env:ED25519_PUBKEY_B64URL = \"{b64u}\"")
    else:
        # Print Base64URL for an existing PEM (public key)
        ap = ArgumentParser()
        ap.add_argument("--pem", default="ed25519-public.pem")
        args = ap.parse_args()
        raw = Path(args.pem).read_bytes()
        pub = serialization.load_pem_public_key(raw)
        b = pub.public_bytes(
            encoding=serialization.Encoding.Raw,
            format=serialization.PublicFormat.Raw,
        )
        print(base64.urlsafe_b64encode(b).rstrip(b"=").decode())


if __name__ == "__main__":
    main()

```


===== FILE: scripts/fix_bom.py =====
```text
# +=====================================================================+
# |                              CERTEUS                                |
# +=====================================================================+
# | FILE: scripts/fix_bom.py                                            |
# | ROLE: Re-save *.json as UTF-8 (no BOM), fixing utf-8-sig            |
# +=====================================================================+
# ----Bloki----- IMPORTY
from __future__ import annotations

import json
import os
from pathlib import Path


# ----Bloki----- MAIN
def main() -> None:
    root = Path(os.getenv("PROOF_BUNDLE_DIR") or "./data/public_pco")
    for p in root.glob("*.json"):
        data = json.loads(p.read_text(encoding="utf-8-sig"))
        p.write_text(json.dumps(data, ensure_ascii=False, indent=2), encoding="utf-8")
        print(f"fixed: {p}")


if __name__ == "__main__":
    main()

```


===== FILE: scripts/generate_proofs.py =====
```text
# +=====================================================================+
# |                              CERTEUS                                |
# +=====================================================================+
# | FILE / PLIK: scripts/generate_proofs.py                             |
# | ROLE / ROLA:                                                         |
# |   EN: CLI to generate simulated/stub proof artifacts for Proof Gate |
# |   PL: CLI do generowania symulowanych/stubowych artefakt√≥w dowod√≥w  |
# | DATE: 2025-08-17                                                    |
# +=====================================================================+

"""
PL:
  Skrypt CLI generujƒÖcy pliki dowod√≥w do katalogu wyj≈õciowego (parametr --out).
  Obs≈Çuguje tryby:
    - "simulate"  -> plik z tre≈õciƒÖ zawierajƒÖcƒÖ losowy nonce (dla realizmu),
    - "stub"      -> minimalny stub bez nonce.
  Obs≈Çugiwane formaty:
    - "drat"  -> z3.drat
    - "lfsc"  -> cvc5.lfsc
  Dodatkowo mo≈ºe tworzyƒá pliki wej≈õciowe:
    - input.smt2 (SMT-LIB),
    - input.cnf  (DIMACS),
  oraz opcjonalnie wygenerowaƒá pokwitowanie (receipt) z hashami SHA-256.

EN:
  CLI script that produces proof files into the given output directory (--out).
  Modes:
    - "simulate" -> file content includes a random nonce (more realistic),
    - "stub"     -> minimal stub content, no nonce.
  Supported formats:
    - "drat"  -> z3.drat
    - "lfsc"  -> cvc5.lfsc
  It can also emit input files:
    - input.smt2 (SMT-LIB),
    - input.cnf  (DIMACS),
  and optionally write a receipt (manifest) with SHA-256 hashes.
"""

from __future__ import annotations

# === IMPORTS =================================================== #
import argparse
import hashlib
import json
import os
import random
import string
import sys
from collections.abc import Iterable
from dataclasses import dataclass
from datetime import datetime, timezone
from pathlib import Path
from typing import Final

# === CONSTANTS / KONSTANTY ===================================== #

FORMAT_TO_FILE: Final[dict[str, str]] = {
    "drat": "z3.drat",
    "lfsc": "cvc5.lfsc",
}

FORMAT_TO_SOLVER: Final[dict[str, str]] = {
    "drat": "z3",
    "lfsc": "cvc5",
}

SMT2_FILE: Final[str] = "input.smt2"
CNF_FILE: Final[str] = "input.cnf"
RECEIPT_FILE: Final[str] = "provenance_receipt_v1.json"


# === LOGGING (PL/EN) =========================================== #


def _lazy_console():
    """
    PL: Pr√≥bujemy u≈ºyƒá utils.console (Tw√≥j projekt). W razie braku ‚Äì fallback na print.
    EN: Try to import project's utils.console; fall back to print-based logger if missing.
    """
    try:
        from utils.console import error, info, success  # type: ignore

        return info, success, error
    except Exception:

        def _info(msg: str) -> None:
            print(f"[INFO] {msg}")

        def _success(msg: str) -> None:
            print(f"[OK]   {msg}")

        def _error(msg: str) -> None:
            print(f"[ERR]  {msg}", file=sys.stderr)

        return _info, _success, _error


# === HELPERS / POMOCNICZE ===================================== #


def _write_text(path: Path, content: str) -> None:
    """
    PL: Zapisuje tekst UTF-8 z LF; tworzy katalogi po≈õrednie.
    EN: Writes UTF-8 text with LF; creates parent dirs.
    """
    path.parent.mkdir(parents=True, exist_ok=True)
    path.write_text(content, encoding="utf-8", newline="\n")


def _write_bytes(path: Path, data: bytes) -> None:
    path.parent.mkdir(parents=True, exist_ok=True)
    with open(path, "wb") as f:
        f.write(data)


def _sha256_hex(path: Path) -> str:
    h = hashlib.sha256()
    with open(path, "rb") as f:
        for chunk in iter(lambda: f.read(8192), b""):
            h.update(chunk)
    return h.hexdigest()


def _rand_token(n: int = 24) -> str:
    alphabet = string.ascii_letters + string.digits
    return "".join(random.choices(alphabet, k=n))


def _normalize_formats(formats: list[str] | None) -> list[str]:
    if not formats:
        return list(FORMAT_TO_FILE.keys())
    out: list[str] = []
    for f in formats:
        lf = f.lower()
        if lf in FORMAT_TO_FILE:
            out.append(lf)
    return out


# === DATA / DANE =============================================== #


@dataclass
class Generated:
    """
    PL: Informacja o wygenerowanym pliku.
    EN: Info about a generated file.
    """

    kind: str  # "proof" | "input" | "receipt"
    format: str | None  # "drat"/"lfsc" for proofs, None for others
    path: Path
    sha256: str


# === CORE / LOGIKA ============================================= #


def _emit_proof_file(fmt: str, out_dir: Path, mode: str, seed: int | None) -> Path:
    """
    PL: Tworzy plik dowodu w zadanym formacie i trybie.
    EN: Creates a proof file for the given format and mode.
    """
    if seed is not None:
        random.seed(seed)

    solver = FORMAT_TO_SOLVER[fmt]
    fname = FORMAT_TO_FILE[fmt]
    dst = out_dir / fname

    if mode == "simulate":
        # UWAGA: poni≈ºszy komunikat "Created simulated proof with content:"
        # jest istotny dla istniejƒÖcych test√≥w E2E.
        payload = f"PROOF::format={fmt}::solver={solver}::nonce={_rand_token(24)}"
        _write_text(dst, payload)
    elif mode == "stub":
        payload = f"PROOF-STUB::format={fmt}::solver={solver}"
        _write_text(dst, payload)
    else:
        raise ValueError(f"Unknown mode: {mode}")

    return dst


def _emit_inputs(out_dir: Path, smt2: bool, cnf: bool) -> list[Path]:
    """
    PL: Opcjonalnie generuje pliki wej≈õciowe SMT2 / CNF.
    EN: Optionally generates SMT2 / CNF input files.
    """
    created: list[Path] = []

    if smt2:
        smt_path = out_dir / SMT2_FILE
        smt_content = "\n".join(
            [
                "(set-logic ALL)",
                "(set-info :source |CERTEUS simulated SMT2 input|)",
                "(assert true)",
                "(check-sat)",
                "(exit)",
            ]
        )
        _write_text(smt_path, smt_content)
        created.append(smt_path)

    if cnf:
        cnf_path = out_dir / CNF_FILE
        # Minimal, valid DIMACS header; no clauses.
        _write_text(cnf_path, "p cnf 1 0\n")
        created.append(cnf_path)

    return created


def _emit_receipt(out_dir: Path, items: list[Generated]) -> Path:
    """
    PL: Zapisuje pokwitowanie (provenance receipt) z hashami i timestampem.
    EN: Writes a provenance receipt with hashes and timestamp.
    """
    now = datetime.now(timezone.utc).isoformat()
    manifest = {
        "version": "provenance_receipt_v1",
        "created_at": now,
        "artifacts": [
            {
                "kind": it.kind,
                "format": it.format,
                "path": str(Path(os.path.relpath(it.path, out_dir)).as_posix()),
                "sha256": it.sha256,
            }
            for it in items
        ],
    }
    dst = out_dir / RECEIPT_FILE
    _write_text(dst, json.dumps(manifest, ensure_ascii=False, indent=2))
    return dst


def generate_proofs(
    out: Path,
    formats: list[str] | None = None,
    mode: str = "simulate",
    with_inputs: bool = False,
    seed: int | None = None,
    write_receipt: bool = False,
) -> list[Path]:
    """
    PL:
      Generuje pliki dowod√≥w w katalogu `out`. Zwraca listƒô utworzonych ≈õcie≈ºek.
      - formats: podzbi√≥r {"drat","lfsc"}; None => oba.
      - mode: "simulate" | "stub"
      - with_inputs: czy tworzyƒá input.smt2 i input.cnf
      - seed: ustala ziarno losowo≈õci (deterministyczny nonce w simulate)
      - write_receipt: czy zapisaƒá manifest z hashami (provenance_receipt_v1.json)

    EN:
      Generates proof files in `out`. Returns list of created paths.
      - formats: subset {"drat","lfsc"}; None => both.
      - mode: "simulate" | "stub"
      - with_inputs: whether to create input.smt2 and input.cnf
      - seed: seed for reproducible nonce in simulate mode
      - write_receipt: write a manifest with SHA-256 hashes
    """
    log_info, log_success, log_error = _lazy_console()

    fs = _normalize_formats(formats)
    if not fs:
        log_error("No valid formats provided.")
        return []

    out.mkdir(parents=True, exist_ok=True)

    created: list[Generated] = []

    # Proofs
    for fmt in fs:
        dst = _emit_proof_file(fmt, out, mode, seed)
        sha = _sha256_hex(dst)
        created.append(Generated(kind="proof", format=fmt, path=dst, sha256=sha))

        if mode == "simulate":
            # Ten log jest celowy (u≈ºywany przez testy):
            log_success(f"Created simulated proof with content: {dst}")
        else:
            log_success(f"Created stub proof: {dst}")

    # Inputs
    if with_inputs:
        for ip in _emit_inputs(out, smt2=True, cnf=True):
            created.append(Generated(kind="input", format=None, path=ip, sha256=_sha256_hex(ip)))
            log_info(f"Created input file: {ip}")

    # Receipt
    if write_receipt:
        receipt_path = _emit_receipt(
            out, created
        )  # <-- KLUCZOWE: nowa nazwa zmiennej, nie nadpisuj write_receipt
        created.append(
            Generated(
                kind="receipt",
                format=None,
                path=receipt_path,
                sha256=_sha256_hex(receipt_path),
            )
        )
        log_info(f"Wrote provenance receipt: {receipt_path}")

    # Summary
    log_info(f"Total artifacts: {len(created)}")
    for it in created:
        log_info(f"Wrote: {it.path}")

    return [it.path for it in created]


# === CLI ======================================================= #


def _build_arg_parser() -> argparse.ArgumentParser:
    p = argparse.ArgumentParser(
        prog="generate_proofs",
        description="Generate (simulated/stub) proof artifacts into an output directory.",
    )
    p.add_argument(
        "--out",
        type=Path,
        required=True,
        help="Output directory for generated files.",
    )
    p.add_argument(
        "--mode",
        choices=["simulate", "stub"],
        default="simulate",
        help='Generation mode (default: "simulate").',
    )
    p.add_argument(
        "--formats",
        nargs="*",
        choices=sorted(FORMAT_TO_FILE.keys()),
        default=None,
        help="Formats to generate (space-separated), e.g. --formats drat lfsc. Default: both.",
    )
    p.add_argument(
        "--with-inputs",
        action="store_true",
        help="Also create input.smt2 and input.cnf.",
    )
    p.add_argument(
        "--seed",
        type=int,
        default=None,
        help="Optional RNG seed for reproducible nonce in simulate mode.",
    )
    p.add_argument(
        "--receipt",
        action="store_true",
        help=f"Write provenance receipt JSON ({RECEIPT_FILE}).",
    )
    return p


def main(argv: Iterable[str] | None = None) -> int:
    log_info, _log_success, log_error = _lazy_console()

    try:
        args = _build_arg_parser().parse_args(list(argv) if argv is not None else None)
        files = generate_proofs(
            args.out,
            formats=args.formats,
            mode=args.mode,
            with_inputs=args.with_inputs,
            seed=args.seed,
            write_receipt=args.receipt,
        )
        if not files:
            log_error("No artifacts generated.")
            return 2
        return 0
    except Exception as exc:  # pragma: no cover
        log_error(f"Generation failed: {exc}")
        return 1


if __name__ == "__main__":
    raise SystemExit(main())

```
