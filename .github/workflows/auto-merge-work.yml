# +-------------------------------------------------------------+
# |                          CERTEUS                            |
# +-------------------------------------------------------------+
# | FILE: .github/workflows/auto-merge-work.yml               |
# | ROLE: Auto-merge from work branches to main                |
# +-------------------------------------------------------------+

name: auto-merge-work

on:
  push:
    branches: [work/daily, work/daily-new]
  workflow_dispatch:
    inputs:
      source_branch:
        description: "Source branch to merge from"
        required: true
        default: "work/daily"
      target_branch:
        description: "Target branch to merge to"
        required: true
        default: "main"

permissions:
  contents: read
  pull-requests: write

jobs:
  auto-merge:
    name: Auto-merge work branch
    runs-on: ubuntu-latest
    continue-on-error: true
    permissions:
      contents: read
      pull-requests: write
    steps:
      - name: Checkout
        uses: actions/checkout@08eba0b27e820071cde6df949e0beb9ba4906955 # v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Configure Git
        run: |
          git config user.name "certeus-merge-bot[bot]"
          git config user.email "certeus-merge-bot[bot]@users.noreply.github.com"

      - name: Determine branches
        id: branches
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "source=${{ github.event.inputs.source_branch }}" >> $GITHUB_OUTPUT
            echo "target=${{ github.event.inputs.target_branch }}" >> $GITHUB_OUTPUT
          else
            echo "source=${GITHUB_REF#refs/heads/}" >> $GITHUB_OUTPUT
            echo "target=main" >> $GITHUB_OUTPUT
          fi

      - name: Auto-merge via Pull Request
        continue-on-error: true
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          SOURCE="${{ steps.branches.outputs.source }}"
          TARGET="${{ steps.branches.outputs.target }}"

          echo "Creating Pull Request from $SOURCE to $TARGET"

          # Check if PR already exists
          EXISTING_PR=$(gh pr list --base $TARGET --head $SOURCE --json number --jq '.[0].number' 2>/dev/null || echo "")

          if [ -n "$EXISTING_PR" ] && [ "$EXISTING_PR" != "null" ]; then
            echo "PR #$EXISTING_PR already exists for $SOURCE -> $TARGET"
            
            # Check if PR can be merged
            PR_STATE=$(gh pr view $EXISTING_PR --json mergeStateStatus --jq '.mergeStateStatus')
            if [ "$PR_STATE" = "CLEAN" ] || [ "$PR_STATE" = "UNSTABLE" ]; then
              echo "‚úÖ Auto-merging existing PR #$EXISTING_PR"
              gh pr merge $EXISTING_PR --squash --auto
              echo "‚úÖ PR #$EXISTING_PR scheduled for auto-merge"
            else
              echo "‚ö†Ô∏è PR #$EXISTING_PR is not ready for merge (state: $PR_STATE)"
            fi
          else
            # Create new PR
            echo "Creating new PR..."
            echo "DEBUG: gh pr create --title 'auto: Merge $SOURCE into $TARGET' --base $TARGET --head $SOURCE"
            
            set +e  # Don't exit on error, capture output
            NEW_PR_OUTPUT=$(gh pr create \
              --title "auto: Merge $SOURCE into $TARGET" \
              --body "ü§ñ **Automated merge request**

            **Source:** \`$SOURCE\`  
            **Target:** \`$TARGET\`  
            **Trigger:** \`${{ github.event_name }}\`

            This PR was automatically created by the auto-merge workflow.
            
            ---
            *Generated by [auto-merge-work workflow](https://github.com/${{ github.repository }}/actions/workflows/auto-merge-work.yml)*" \
              --base $TARGET \
              --head $SOURCE \
              --assignee @me 2>&1)
            PR_CREATE_EXIT_CODE=$?
            set -e
            
            echo "DEBUG: PR creation exit code: $PR_CREATE_EXIT_CODE"
            echo "DEBUG: PR creation output: $NEW_PR_OUTPUT"

            if [ $PR_CREATE_EXIT_CODE -eq 0 ] && [ -n "$NEW_PR_OUTPUT" ]; then
              echo "‚úÖ Created PR: $NEW_PR_OUTPUT"
              
              # Extract PR number
              PR_NUMBER=$(echo "$NEW_PR_OUTPUT" | grep -o '[0-9]\+$')
              
              if [ -n "$PR_NUMBER" ]; then
                echo "‚úÖ Enabling auto-merge for PR #$PR_NUMBER"
                gh pr merge $PR_NUMBER --squash --auto
                echo "‚úÖ PR #$PR_NUMBER scheduled for auto-merge"
              fi
            else
              echo "‚ùå Failed to create PR (exit code: $PR_CREATE_EXIT_CODE)"
              echo "Error output: $NEW_PR_OUTPUT"
              
              # Don't exit with error - continue-on-error will handle it
              echo "::warning::Auto-merge PR creation failed, but continuing workflow"
            fi
          fi
