name: Smoke

on:
  push:
    branches: [main, master]
  pull_request:
    branches: [main, master]

permissions:
  contents: read

concurrency:
  group: smoke-${{ github.ref }}
  cancel-in-progress: true

env:
  PYTHON_VERSION: "3.11"

jobs:
  smoke:
    name: Smoke
    runs-on: ${{ matrix.os }}
    timeout-minutes: 20
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest]
        include:
          - os: ubuntu-latest
            slo_max_p95_ms: 250
          - os: windows-latest
            slo_max_p95_ms: 300

    env:
      SLO_MAX_P95_MS: ${{ matrix.slo_max_p95_ms }}

    steps:
      - name: 🔄 Checkout
        uses: actions/checkout@v4

      - name: 🐍 Setup Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: 📦 Create venv and install (Ubuntu)
        if: matrix.os == 'ubuntu-latest'
        run: |
          python -m venv .venv
          ./.venv/bin/python -m pip install -U pip wheel setuptools ruff pytest jsonschema cryptography fastapi uvicorn openapi-spec-validator -c constraints/requirements-constraints.txt || ./.venv/bin/python -m pip install -U openapi-spec-validator

      - name: 📦 Create venv and install (Windows)
        if: matrix.os == 'windows-latest'
        shell: pwsh
        run: |
          py -3 -m venv .venv
          .\.venv\Scripts\python.exe -m pip install -U pip wheel setuptools ruff pytest jsonschema cryptography fastapi uvicorn openapi-spec-validator -c constraints/requirements-constraints.txt; if ($LASTEXITCODE -ne 0) { .\.venv\Scripts\python.exe -m pip install -U openapi-spec-validator }

      - name: 🚬 Run smoke (Ubuntu) with retry
        if: matrix.os == 'ubuntu-latest'
        uses: nick-invision/retry@v3
        with:
          timeout_minutes: 10
          max_attempts: 2
          command: bash ./scripts/smoke_api.sh

      - name: 🚬 Run smoke (Windows) with retry
        if: matrix.os == 'windows-latest'
        uses: nick-invision/retry@v3
        with:
          timeout_minutes: 12
          max_attempts: 2
          shell: pwsh
          command: pwsh -File .\scripts\smoke_api.ps1

      - name: 🔧 Setup Node for Spectral
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: 🔎 Spectral lint OpenAPI spec
        run: |
          npx -y @stoplight/spectral-cli lint -r .spectral.yaml reports/openapi.json

      - name: 📤 Upload smoke summary
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: smoke-summary-${{ matrix.os }}-${{ github.sha }}
          path: reports/smoke_summary.json
          if-no-files-found: warn

  smoke-summary:
    name: Smoke PR Summary
    needs: smoke
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    steps:
      - name: 🔄 Download smoke artifacts
        uses: actions/download-artifact@v4
        with:
          path: smoke_reports
          pattern: smoke-summary-*
          merge-multiple: true

      - name: 📝 Comment PR with p95 summary
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const path = require('path');
            function findFiles(dir, target) {
              let out = [];
              for (const ent of fs.readdirSync(dir, { withFileTypes: true })) {
                const p = path.join(dir, ent.name);
                if (ent.isDirectory()) out = out.concat(findFiles(p, target));
                else if (ent.isFile() && ent.name === target) out.push(p);
              }
              return out;
            }
            const base = 'smoke_reports';
            let rows = [];
            if (fs.existsSync(base)) {
              for (const p of findFiles(base, 'smoke_summary.json')) {
                const txt = fs.readFileSync(p, 'utf-8');
                try {
                  const j = JSON.parse(txt);
                  // best-effort infer OS from path
                  const parts = p.split(path.sep);
                  const art = parts.find(x => x.startsWith('smoke-summary-')) || '';
                  const os = art.replace('smoke-summary-','').replace(/-.+$/, '') || 'unknown';
                  rows.push({ os, ...j });
                } catch {}
              }
            }
            if (rows.length === 0) {
              core.warning('No smoke summaries found');
              return;
            }
            rows.sort((a,b)=> a.os.localeCompare(b.os));
            let body = `### Smoke Summary (p95)\n\n`;
            body += `| OS | total | passes | fails | p95_ms | threshold_ms |\n|---|---:|---:|---:|---:|---:|\n`;
            for (const r of rows) {
              body += `| ${r.os} | ${r.total} | ${r.passes} | ${r.fails} | ${r.p95_ms} | ${r.threshold_ms || ''} |\n`;
            }
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body,
            });

