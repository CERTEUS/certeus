# +-------------------------------------------------------------+
# |                          CERTEUS                            |
# +-------------------------------------------------------------+
# | FILE: docs/api/openapi.yaml                                 |
# | ROLE: OpenAPI contract (docs)                               |
# | PLIK: docs/api/openapi.yaml                                 |
# | ROLA: Kontrakt OpenAPI (docs)                                |
# +-------------------------------------------------------------+

openapi: 3.0.3
info:
  title: CERTEUS API
  version: "1.0.0"
  description: >-
    Verifiable Cognitive Intelligence API. Proof-first endpoints for PCO,
    ProofGate, QTMP, devices, billing and more. This description is required
    by Spectral rules.
  contact:
    name: CERTEUS Team
    url: https://github.com/CERTEUS/certeus
    email: sre@certeus.dev
servers:
  - url: http://localhost:8081
externalDocs:
  description: Additional resources (endpoints, cURL, runbooks)
  url: https://github.com/CERTEUS/certeus/tree/main/docs
tags:
  - name: CFE
    description: Case Field Equations
  - name: QTMP
    description: Quantum Truth Measurement Protocol
  - name: Devices
    description: Proof devices / oracles
  - name: UPN
    description: Unified Proof Number
  - name: DR
    description: Decision Replay/Recall
  - name: ProofGate
    description: Publication decision gate
  - name: PCO
    description: Proof Carrying Object
  - name: System
    description: System endpoints
  - name: Sources
    description: Legal sources cache
  - name: Packs
    description: Content and plugin packs
  - name: Marketplace
    description: Plugin marketplace
  - name: Billing
    description: Billing & quotas
  - name: Ledger
    description: Ledger access
  - name: Boundary
    description: Boundary reconstruction
  - name: Finance
    description: FINENITH finance API
  - name: LEXENITH
    description: LEXENITH pilot endpoints
paths:
  # === PCO v1.0 Endpoints ===
  /v1/pco/bundle:
    post:
      summary: Create and publish PCO Bundle v1.0
      description: >-
        Tworzy, waliduje, podpisuje i publikuje ProofBundle v1.0.
        Zawiera pełny dowód z podpisami Ed25519 i zapisem do Ledgera.
      tags: [PCO]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [rid, smt2_hash, lfsc]
              properties:
                rid:
                  type: string
                  pattern: '^[A-Z]{3}-[0-9]{6}$'
                  description: 'Unikalny identyfikator sprawy'
                  example: 'CER-123456'
                smt2_hash:
                  type: string
                  pattern: '^[a-f0-9]{64}$'
                  description: 'SHA256 hash formuly SMT2'
                lfsc:
                  type: string
                  description: 'Dowód w formacie LFSC'
                drat:
                  type: string
                  nullable: true
                  description: 'Opcjonalny dowód w formacie DRAT'
                smt2:
                  type: string
                  nullable: true
                  description: 'Pełna formuła SMT2 (opcjonalna)'
                merkle_proof:
                  type: array
                  items:
                    type: object
                  description: 'Dowód Merkle dla weryfikacji'
                jurisdiction:
                  type: object
                  properties:
                    country:
                      type: string
                      pattern: '^[A-Z]{2}$'
                    domain:
                      type: string
                      enum: [civil, criminal, commercial, administrative, labor, regulatory, other]
                    law_time:
                      type: string
                      format: date
                extensions:
                  type: object
                  description: 'Rozszerzenia (QTMP, CFE, etc.)'
      responses:
        '200':
          description: PCO Bundle utworzony pomyślnie
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PCOBundleResponse'
        '400':
          description: Błąd walidacji
        '422':
          description: Błąd weryfikacji dowodu
        '500':
          description: Błąd serwera

  /v1/pco/public/{case_id}:
    get:
      summary: Get public PCO payload
      description: >-
        Zwraca publiczny (zredagowany) payload PCO dla danego case_id.
        Wszystkie dane osobowe (PII) są usunięte zgodnie z polityką redakcji.
      tags: [PCO]
      parameters:
        - name: case_id
          in: path
          required: true
          schema:
            type: string
            pattern: '^[A-Z]{3}-[0-9]{6}$'
          description: 'Identyfikator sprawy'
          example: 'CER-123456'
        - name: include_evidence
          in: query
          schema:
            type: boolean
            default: false
          description: 'Czy dołączyć publiczne fragmenty evidence graph'
      responses:
        '200':
          description: Publiczny PCO
          headers:
            ETag:
              schema:
                type: string
              description: 'Entity tag dla cache'
            Last-Modified:
              schema:
                type: string
                format: date-time
              description: 'Data ostatniej modyfikacji'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PCOPublicResponse'
        '404':
          description: PCO nie znaleziono
        '403':
          description: Brak dostępu do PCO

  /v1/verify:
    post:
      summary: Verify PCO Bundle or public payload
      description: >-
        Weryfikuje podpisy, dowody i spójność PCO Bundle lub publicznego payload.
        Obsługuje weryfikację offline i online.
      tags: [PCO]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [data, verification_type]
              properties:
                data:
                  oneOf:
                    - $ref: '#/components/schemas/PCOBundle'
                    - $ref: '#/components/schemas/PCOPublic'
                  description: 'Dane PCO do weryfikacji'
                verification_type:
                  type: string
                  enum: [full, signatures_only, proofs_only, public_only]
                  description: 'Typ weryfikacji'
                offline:
                  type: boolean
                  default: false
                  description: 'Czy przeprowadzić weryfikację offline'
                trusted_keys:
                  type: array
                  items:
                    type: string
                  description: 'Lista zaufanych kluczy publicznych'
      responses:
        '200':
          description: Wynik weryfikacji
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VerificationResult'
        '400':
          description: Błąd w danych wejściowych

  /.well-known/jwks.json:
    get:
      summary: Get JWKS with Ed25519 public keys
      description: >-
        Zwraca JSON Web Key Set z kluczami publicznymi Ed25519
        używanymi do podpisywania PCO.
      tags: [PCO]
      responses:
        '200':
          description: JWKS
          content:
            application/json:
              schema:
                type: object
                required: [keys]
                properties:
                  keys:
                    type: array
                    items:
                      type: object
                      required: [kty, use, kid, x]
                      properties:
                        kty:
                          type: string
                          enum: [OKP]
                        use:
                          type: string
                          enum: [sig]
                        kid:
                          type: string
                        crv:
                          type: string
                          enum: [Ed25519]
                        x:
                          type: string
                          description: 'Base64url encoded public key'

  # === Legacy PCO Endpoints (backward compatibility) ===
  /pco/public/{case_id}:
    get:
      summary: '[DEPRECATED] Get public PCO payload'
      deprecated: true
      description: 'Use /v1/pco/public/{case_id} instead'
      tags: [PCO]
      parameters:
        - name: case_id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success
        '301':
          description: 'Redirect to /v1/pco/public/{case_id}'
  /v1/cfe/geodesic:
    post:
      summary: Compute legal geodesic (CFE)
      tags: [CFE]
      responses: { "200": { description: ok } }
  /v1/cfe/horizon:
    post:
      summary: Compute legal horizon (CFE)
      tags: [CFE]
      responses: { "200": { description: ok } }
  /v1/cfe/lensing:
    get:
      summary: Lensing map (CFE)
      tags: [CFE]
      responses: { "200": { description: ok } }
  /v1/cfe/cache/warm:
    post:
      summary: Warm up CFE cache for case list
      tags: [CFE]
      requestBody:
        required: false
        content:
          application/json:
            schema:
              type: array
              items: { type: string }
      responses:
        "200": { description: ok }
  /v1/cfe/lensing/from_fin:
    post:
      summary: Build lensing map from FIN signals
      tags: [CFE]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [signals]
              properties:
                signals: { type: object, additionalProperties: { type: number } }
                seed: { type: string, nullable: true }
      responses: { "200": { description: ok } }
  /v1/qtm/init_case:
    post:
      summary: Initialize QTMP case predistribution
      tags: [QTMP]
      responses: { "200": { description: ok } }
  /v1/qtm/measure:
    post:
      summary: Perform QTMP measurement
      tags: [QTMP]
      responses: { "200": { description: ok } }
  /v1/qtm/commutator:
    post:
      summary: Compute commutator (QTMP)
      tags: [QTMP]
      responses: { "200": { description: ok } }
  /v1/qtm/find_entanglement:
    post:
      summary: Find variable entanglement
      tags: [QTMP]
      responses: { "200": { description: ok } }
  /v1/devices/horizon_drive/plan:
    post:
      summary: Plan evidence horizon (HDE)
      tags: [Devices]
      responses: { "200": { description: ok } }
  /v1/devices/qoracle/expectation:
    post:
      summary: Optimize expectation via qOracle
      tags: [Devices]
      responses: { "200": { description: ok } }
  /v1/devices/entangle:
    post:
      summary: Create entanglement certificate
      tags: [Devices]
      responses: { "200": { description: ok } }
  /v1/devices/chronosync/reconcile:
    post:
      summary: Reconcile chronosync coordinates
      tags: [Devices]
      responses: { "200": { description: ok } }
  /v1/upn/register:
    post:
      summary: Register UPN
      tags: [UPN]
      responses: { "200": { description: ok } }
  /v1/upn/revoke:
    post:
      summary: Revoke UPN
      tags: [UPN]
      responses: { "200": { description: ok } }
  /v1/dr/replay:
    post:
      summary: Decision Replay
      tags: [DR]
      responses: { "200": { description: ok } }
  /v1/dr/recall:
    post:
      summary: Decision Recall
      tags: [DR]
      responses: { "200": { description: ok } }
  /defx/reason:
    post:
      summary: Publication decision (ProofGate)
      tags: [ProofGate]
      responses: { "200": { description: ok } }
  # (removed duplicate minimal ProofGate path; kept the full variant below)
  /v1/pco/bundle:
    post:
      summary: Create and publish ProofBundle (v0.2)
      tags: [PCO]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [rid, smt2_hash, lfsc]
              properties:
                rid: { type: string }
                smt2_hash: { type: string, minLength: 64, maxLength: 64 }
                lfsc: { type: string }
                drat: { type: string, nullable: true }
                merkle_proof:
                  type: array
                  items:
                    type: object
                    properties: { sibling: { type: string }, dir: { type: string, enum: [L, R] } }
            examples:
              minimal:
                summary: Minimal request
                value:
                  rid: "case-001"
                  smt2_hash: "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"
                  lfsc: "(lfsc proof)"
                  merkle_proof: []
      responses:
        "200":
          description: ProofBundle published
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProofBundleV0_2'
              examples:
                example:
                  summary: Minimal ProofBundle response (truncated)
                  value:
                    version: "0.2"
                    case_id: "case-001"
                    created_at: "2025-01-01T00:00:00Z"
                    rid: "case-001"
                    smt2_hash: "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"
                    lfsc: "(lfsc proof)"
                    merkle_proof: []
                    signatures: [{ role: producer, alg: ed25519, key_id: "kid123", signature: "b64u..." }]
                    risk: { ece: 0, brier: 0, p95_latency_ms: 0, abstain_rate: 0 }
                    status: "PENDING"
  /pco/public/{rid}:
    get:
      summary: Public payload of ProofBundle (zero PII)
      tags: [PCO]
      parameters:
        - in: path
          name: rid
          required: true
          schema: { type: string }
      responses:
        "200":
          description: Public PCO
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PublicPCO'
              examples:
                example:
                  value:
                    rid: "case-001"
                    smt2_hash: "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"
                    lfsc: "(lfsc proof)"
                    merkle_proof: []
                    signature: "b64u..."
  /.well-known/jwks.json:
    get:
      summary: JWKS
      tags: [System]
      responses: { "200": { description: ok } }
  /metrics:
    get:
      summary: Prometheus metrics
      tags: [System]
      responses:
        "200": { description: ok }
  /v1/sources/cache:
    post:
      summary: Cache a legal source by URI
      tags: [Sources]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [uri]
              properties:
                uri: { type: string }
      responses:
        "200":
          description: Cached source
          content:
            application/json:
              schema:
                type: object
                properties:
                  uri: { type: string }
                  digest: { type: string }
                  path: { type: string }
                  retrieved_at: { type: string }
  /v1/proofgate/publish:
    post:
      summary: Publication decision (ProofGate)
      tags: [ProofGate]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                pco: { $ref: '#/components/schemas/ProofBundleV0_2' }
                policy: { type: object }
                budget_tokens: { type: integer }
      responses:
        "200":
          description: Decision
          content:
            application/json:
              schema:
                type: object
                properties:
                  status: { type: string, enum: [PUBLISH, CONDITIONAL, PENDING, ABSTAIN] }
                  pco: { type: object }
                  ledger_ref: { type: string }
  /v1/packs:
    get:
      summary: List packs
      tags: [Packs]
      responses: { "200": { description: ok } }
  /v1/packs/handle:
    post:
      summary: Handle pack action
      tags: [Packs]
      responses: { "200": { description: ok } }
  /v1/marketplace/plugins:
    get:
      summary: List installed plugins
      tags: [Marketplace]
      responses: { "200": { description: ok } }
  /v1/marketplace/verify_manifest:
    post:
      summary: Verify signed manifest
      tags: [Marketplace]
      responses: { "200": { description: ok } }
  /v1/marketplace/install:
    post:
      summary: Install/upgrade plugin (signed)
      tags: [Marketplace]
      responses: { "200": { description: ok } }
  /v1/marketplace/dry_run:
    post:
      summary: Validate plugin manifest without install
      tags: [Marketplace]
      responses: { "200": { description: ok } }
  /v1/billing/quota:
    get:
      summary: Get tenant quota (cost tokens)
      tags: [Billing]
      responses: { "200": { description: ok } }
    post:
      summary: Set tenant quota (cost tokens)
      tags: [Billing]
      responses: { "200": { description: ok } }
  /v1/billing/refund:
    post:
      summary: Refund units to tenant budget
      tags: [Billing]
      responses: { "200": { description: ok } }
  /v1/billing/allocate:
    post:
      summary: Allocate units to current tenant (PENDING → allocate)
      tags: [Billing]
      responses: { "200": { description: ok } }
  /v1/billing/policies:
    get:
      summary: Get billing policies (tiers and tenants)
      tags: [Billing]
      responses: { "200": { description: ok } }
  /v1/billing/tenant_tier:
    get:
      summary: Resolve tenant tier
      tags: [Billing]
      responses: { "200": { description: ok } }
  /v1/billing/estimate:
    post:
      summary: Estimate cost units for action
      tags: [Billing]
      responses: { "200": { description: ok } }
  /v1/billing/recommendation:
    get:
      summary: Recommend tier based on action and volume
      tags: [Billing]
      responses: { "200": { description: ok } }
  /v1/billing/admin/set_tier:
    post:
      summary: "Admin: set tenant tier (DEV)"
      tags: [Billing]
      responses: { "200": { description: ok } }
  /v1/billing/admin/reload:
    post:
      summary: "Admin: reload policies from file (DEV)"
      tags: [Billing]
      responses: { "200": { description: ok } }
  /v1/fin/tokens/request:
    post:
      summary: Request tokens allocation (FIN)
      tags: [Finance]
      responses: { "200": { description: ok } }
  /v1/fin/tokens/allocate:
    post:
      summary: Allocate requested tokens (FIN)
      tags: [Finance]
      responses: { "200": { description: ok } }
  /v1/fin/tokens/{request_id}:
    get:
      summary: Get token request status (FIN)
      tags: [Finance]
      parameters:
        - name: request_id
          in: path
          required: true
          schema: { type: string }
      responses: { "200": { description: ok } }
  /v1/ledger/{case_id}/records:
    get:
      summary: Ledger records for case
      tags: [Ledger]
      parameters:
        - name: case_id
          in: path
          required: true
          schema: { type: string }
      responses: { "200": { description: ok } }
  /v1/boundary/reconstruct:
    post:
      summary: Reconstruct boundary state
      tags: [Boundary]
      responses: { "200": { description: ok } }
  /v1/fin/alpha/measure:
    post:
      summary: FINENITH measure alpha
      tags: [Finance]
      responses: { "200": { description: ok } }
  /v1/fin/alpha/simulate:
    post:
      summary: FINENITH simulate strategy
      tags: [Finance]
      responses: { "200": { description: ok } }
  /v1/fin/alpha/pnl:
    get:
      summary: FINENITH recent PnL
      tags: [Finance]
      responses: { "200": { description: ok } }
  /v1/lexenith/pilot/cases:
    get:
      summary: LEXENITH pilot cases
      tags: [LEXENITH]
      responses: { "200": { description: ok } }
  /v1/lexenith/pilot/feedback:
    post:
      summary: LEXENITH pilot feedback
      tags: [LEXENITH]
      responses: { "200": { description: ok } }
components:
  schemas:
    ProofBundleV0_2:
      description: Schema aligned with services/api_gateway/schemas/proofbundle_v0.2.json
      type: object
      required: [version, case_id, created_at, jurisdiction, claims, sources, risk, signatures, reproducibility, status]
      properties:
        version: { type: string, enum: ["0.2"] }
        case_id: { type: string }
        created_at: { type: string, format: date-time }
        jurisdiction:
          type: object
          properties:
            country: { type: string }
            domain: { type: string }
        claims:
          type: array
          items:
            type: object
        sources:
          type: array
          items:
            type: object
        derivations:
          type: array
          items:
            type: object
        computations:
          type: array
          items:
            type: object
        risk:
          type: object
          properties:
            ece: { type: number }
            brier: { type: number }
            p95_latency_ms: { type: number }
            abstain_rate: { type: number }
        ledger:
          type: object
        signatures:
          type: array
          items:
            type: object
        reproducibility:
          type: object
        attachments:
          type: array
          items:
            type: object
        status:
          type: string
          enum: [PUBLISH, CONDITIONAL, PENDING, ABSTAIN]
    PublicPCO:
      type: object
      properties:
        rid: { type: string }
        smt2_hash: { type: string }
        lfsc: { type: string }
        drat: { type: string }
        merkle_proof:
          type: array
          items:
            type: object
            properties: { sibling: { type: string }, dir: { type: string } }
        signature: { type: string }

    # === PCO v1.0 Schemas ===
    PCOBundle:
      type: object
      description: 'Pełny PCO Bundle v1.0'
      required: [version, case_id, created_at, jurisdiction, claims, sources, risk, signatures, reproducibility, status]
      properties:
        version:
          type: string
          const: '1.0'
        case_id:
          type: string
          pattern: '^[A-Z]{3}-[0-9]{6}$'
        created_at:
          type: string
          format: date-time
        jurisdiction:
          type: object
          required: [country, domain, law_time]
          properties:
            country:
              type: string
              pattern: '^[A-Z]{2}$'
            domain:
              type: string
              enum: [civil, criminal, commercial, administrative, labor, regulatory, other]
            law_time:
              type: string
              format: date
        claims:
          type: array
          minItems: 1
          items:
            type: object
            required: [id, text, legal_basis, confidence]
            properties:
              id:
                type: string
                pattern: '^claim-[0-9]+$'
              text:
                type: string
                minLength: 10
              legal_basis:
                type: object
                required: [statutes, cases]
                properties:
                  statutes:
                    type: array
                    items:
                      type: object
                      required: [code, article]
                      properties:
                        code: { type: string }
                        article: { type: string }
                        text: { type: string }
                  cases:
                    type: array
                    items:
                      type: object
                      required: [court, signature, date]
                      properties:
                        court: { type: string }
                        signature: { type: string }
                        date: { type: string, format: date }
                        summary: { type: string }
              confidence:
                type: number
                minimum: 0
                maximum: 1
        sources:
          type: array
          minItems: 1
          items:
            type: object
            required: [id, uri, digest, retrieved_at, license]
            properties:
              id: { type: string }
              uri: { type: string, format: uri }
              digest:
                type: string
                pattern: '^sha256:[a-f0-9]{64}$'
              retrieved_at: { type: string, format: date-time }
              license: { type: string }
        derivations:
          type: array
          items:
            type: object
            required: [claim_id, solver, proof_format, artifact_digest]
            properties:
              claim_id: { type: string }
              solver:
                type: string
                enum: [z3, cvc5, vampire, eprover, lean4, coq]
              proof_format:
                type: string
                enum: [LFSC, DRAT, ALETHE, COQ, LEAN]
              artifact_digest:
                type: string
                pattern: '^sha256:[a-f0-9]{64}$'
        risk:
          type: object
          required: [ece, brier, p95_latency_ms, abstain_rate]
          properties:
            ece: { type: number, minimum: 0, maximum: 1 }
            brier: { type: number, minimum: 0, maximum: 2 }
            p95_latency_ms: { type: number, minimum: 0 }
            abstain_rate: { type: number, minimum: 0, maximum: 1 }
        ledger:
          type: object
          required: [merkle_root, block_height, timestamp]
          properties:
            merkle_root:
              type: string
              pattern: '^[a-f0-9]{64}$'
            block_height: { type: integer, minimum: 0 }
            timestamp: { type: string, format: date-time }
        signatures:
          type: array
          minItems: 1
          items:
            type: object
            required: [role, alg, signature, key_id, timestamp]
            properties:
              role:
                type: string
                enum: [producer, auditor, counsel, court, insurer, witness]
              alg:
                type: string
                enum: [ed25519, p256, p384, rsa2048, rsa4096]
              key_id:
                type: string
                pattern: '^[a-f0-9]{16}$'
              signature: { type: string }
              timestamp: { type: string, format: date-time }
        reproducibility:
          type: object
          required: [image, image_digest, seed, build_info]
          properties:
            image: { type: string }
            image_digest:
              type: string
              pattern: '^sha256:[a-f0-9]{64}$'
            seed: { type: string }
            build_info:
              type: object
              required: [commit_sha, build_time, toolchain]
              properties:
                commit_sha:
                  type: string
                  pattern: '^[a-f0-9]{40}$'
                build_time: { type: string, format: date-time }
                toolchain: { type: string }
        status:
          type: string
          enum: [PUBLISH, CONDITIONAL, PENDING, ABSTAIN, REJECTED]
        extensions:
          type: object
          description: 'Rozszerzenia (QTMP, CFE, etc.)'

    PCOPublic:
      type: object
      description: 'Publiczny PCO z redakcją PII'
      required: [version, case_id, created_at, jurisdiction, claims_summary, sources_summary, risk, ledger, signatures, reproducibility, status, redaction_info]
      properties:
        version:
          type: string
          const: '1.0'
        case_id:
          type: string
          pattern: '^[A-Z]{3}-[0-9]{6}$'
        created_at:
          type: string
          format: date-time
        jurisdiction:
          type: object
          required: [country, domain]
          properties:
            country:
              type: string
              pattern: '^[A-Z]{2}$'
            domain:
              type: string
              enum: [civil, criminal, commercial, administrative, labor, regulatory, other]
        claims_summary:
          type: object
          required: [count, avg_confidence, domains]
          properties:
            count: { type: integer, minimum: 1 }
            avg_confidence: { type: number, minimum: 0, maximum: 1 }
            domains: { type: array, items: { type: string } }
        sources_summary:
          type: object
          required: [count, total_size_bytes, types]
          properties:
            count: { type: integer, minimum: 1 }
            total_size_bytes: { type: integer, minimum: 0 }
            types: { type: array, items: { type: string } }
        risk:
          type: object
          required: [ece, brier, p95_latency_ms, abstain_rate]
          properties:
            ece: { type: number, minimum: 0, maximum: 1 }
            brier: { type: number, minimum: 0, maximum: 2 }
            p95_latency_ms: { type: number, minimum: 0 }
            abstain_rate: { type: number, minimum: 0, maximum: 1 }
        ledger:
          type: object
          required: [merkle_root, block_height, timestamp]
          properties:
            merkle_root:
              type: string
              pattern: '^[a-f0-9]{64}$'
            block_height: { type: integer, minimum: 0 }
            timestamp: { type: string, format: date-time }
            bundle_location:
              type: string
              format: uri
        signatures:
          type: array
          minItems: 1
          items:
            type: object
            required: [role, alg, signature, key_id, timestamp]
            properties:
              role:
                type: string
                enum: [producer, auditor, counsel, court, insurer, witness]
              alg:
                type: string
                enum: [ed25519, p256, p384, rsa2048, rsa4096]
              signature: { type: string }
              timestamp: { type: string, format: date-time }
        reproducibility:
          type: object
          required: [image, image_digest, build_info]
          properties:
            image: { type: string }
            image_digest:
              type: string
              pattern: '^sha256:[a-f0-9]{64}$'
            build_info:
              type: object
              required: [commit_sha, build_time, toolchain]
              properties:
                commit_sha:
                  type: string
                  pattern: '^[a-f0-9]{40}$'
                build_time: { type: string, format: date-time }
                toolchain: { type: string }
        status:
          type: string
          enum: [PUBLISH, CONDITIONAL, PENDING, ABSTAIN, REJECTED]
        redaction_info:
          type: object
          required: [redacted_at, redaction_policy, pii_removed]
          properties:
            redacted_at: { type: string, format: date-time }
            redaction_policy: { type: string }
            pii_removed:
              type: array
              items:
                type: string
                enum: [names, addresses, phone_numbers, emails, ids, financial_data, health_data, biometric_data]
            etag: { type: string }

    PCOBundleResponse:
      allOf:
        - $ref: '#/components/schemas/PCOBundle'
        - type: object
          properties:
            # Legacy compatibility fields
            rid: { type: string }
            smt2_hash: { type: string }
            lfsc: { type: string }
            signature: { type: string }
            ok: { type: boolean }

    PCOPublicResponse:
      $ref: '#/components/schemas/PCOPublic'

    VerificationResult:
      type: object
      required: [valid, verification_time_ms]
      properties:
        valid:
          type: boolean
          description: 'Czy weryfikacja przeszła pomyślnie'
        verification_time_ms:
          type: number
          minimum: 0
        errors:
          type: array
          items:
            type: string
          description: 'Lista błędów weryfikacji'
        warnings:
          type: array
          items:
            type: string
          description: 'Lista ostrzeżeń'
        details:
          type: object
          properties:
            signatures_valid:
              type: boolean
            proofs_valid:
              type: boolean
            schema_valid:
              type: boolean
            ledger_valid:
              type: boolean
            tsa_timestamps_valid:
              type: boolean
        verified_at:
          type: string
          format: date-time
        verifier_info:
          type: object
          properties:
            version: { type: string }
            mode: { type: string, enum: [online, offline] }
