# +=====================================================================+
# |                              CERTEUS                                |
# +=====================================================================+
# | FILE: .github/workflows/proof-gate.yml                              |
# | ROLE: CI Proof Gate: lint/tests + policy validation + bundle verify |
# +=====================================================================+

name: Proof Gate

on:
  pull_request:
    branches: [ main ]
  push:
    branches: [ main ]

jobs:
  proof-gate:
    runs-on: ubuntu-latest
    timeout-minutes: 25

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Setup uv
        uses: astral-sh/setup-uv@v3
        with:
          version: latest

      - name: Install deps
        run: |
          uv sync --all-extras --dev
      - name: Prepare out dir
        run: |
          mkdir -p out

      - name: Start mock OTLP receiver (background)
        run: |
          nohup uv run python scripts/otel/mock_otlp.py >/dev/null 2>&1 &

      - name: Load CI defaults (non-secrets)
        run: |
          uv run python scripts/ci/load_env_defaults.py

      - name: Ruff (autofix)
        run: |
          uv run ruff check . --fix

      - name: Ruff (format)
        run: |
          uv run ruff format .

      - name: Ruff (strict check)
        run: |
          uv run ruff check . --output-format=github

      - name: Tests (Pytest)
        env:
          PYTHONWARNINGS: "error,default::DeprecationWarning"
          PYTEST_JUNIT_XML: reports/junit.xml
          OTEL_ENABLED: "1"
          OTEL_EXPORTER_OTLP_ENDPOINT: "http://127.0.0.1:4318"
          FINE_GRAINED_ROLES: "0"
        run: |
          mkdir -p "$(dirname "$PYTEST_JUNIT_XML")"
          uv run pytest -q --junitxml="$PYTEST_JUNIT_XML"

      - name: Compute gauge drift
        run: |
          uv run python scripts/gates/compute_gauge_drift.py --flags data/flags/kk.flags.json --out out/gauge.json

      - name: Compute lexqft coverage metrics
        run: |
          uv run python scripts/gates/compute_lexqft_coverage.py --flags data/flags/kk.flags.json --out out/lexqft_coverage.json

      - name: Gauge-Gate (holonomy drift)
        run: |
          uv run python scripts/gates/gauge_gate.py --epsilon 1e-3
      - name: Mark Gauge OK
        if: success()
        run: echo ok > out/pg_gauge_ok.txt

      - name: Path-Coverage Gate (lexqft)
        env:
          STRICT_PATH_COVERAGE: "1"
        run: |
          uv run python scripts/gates/path_coverage_gate.py --min-gamma 0.90 --max-uncaptured 0.05
      - name: Mark Path-Coverage OK
        if: success()
        run: echo ok > out/pg_pathcov_ok.txt

      - name: FIN Risk Policies Gate (OPA proxy)
        run: |
          echo '{"signals": {"risk": 0.6, "sentiment": 0.7}, "dp_epsilon": 0.5}' | uv run python scripts/gates/fin_risk_policy_gate.py
      - name: Mark FIN Policies OK
        if: success()
        run: echo ok > out/pg_fin_ok.txt

      - name: Security Bunker Gate (TEE profile)
        env:
          BUNKER: ${{ vars.BUNKER }}
          PROOFGATE_BUNKER: ${{ vars.PROOFGATE_BUNKER }}
          PQCRYPTO_READY: ${{ vars.PQCRYPTO_READY }}
        run: |
          uv run python scripts/gates/security_bunker_gate.py
      - name: Mark Bunker OK
        if: success()
        run: echo ok > out/pg_bunker_ok.txt

      - name: Roles Policy Gate (OPA proxy)
        run: |
          echo '{"user": {"role": "AFV"}, "action": "publish"}' | uv run python scripts/gates/roles_policy_gate.py
      - name: Mark Roles OK
        if: success()
        run: echo ok > out/pg_roles_ok.txt

      - name: Validate Governance Consistency
        run: |
          uv run python scripts/validate_governance_consistency.py
      - name: Mark Governance OK
        if: success()
        run: echo ok > out/pg_gov_ok.txt

      - name: ProofGate Health Smoke
        run: |
          uv run python scripts/smokes/proofgate_health_smoke.py

      - name: PQ-crypto Gate (readiness)
        env:
          PQCRYPTO_REQUIRE: ${{ vars.PQCRYPTO_REQUIRE }}
          PQCRYPTO_READY: ${{ vars.PQCRYPTO_READY }}
        run: |
          uv run python scripts/gates/pqcrypto_gate.py

      - name: DP Budget Gate (stub)
        env:
          STRICT_DP_BUDGET: ${{ vars.STRICT_DP_BUDGET }}
        run: |
          echo '{"budgets":[{"name":"alpha","limit":1.0,"used":0.2}]}' | uv run python scripts/gates/dp_budget_gate.py

      - name: ProofGate Roles Smoke
        env:
          FINE_GRAINED_ROLES: ${{ vars.FINE_GRAINED_ROLES }}
        run: |
          uv run python scripts/smokes/proofgate_roles_smoke.py

      - name: Compute boundary report
        if: ${{ secrets.PCO_JWKS_B64URL != '' }}
        env:
          PCO_JWKS_B64URL: ${{ secrets.PCO_JWKS_B64URL }}
        run: |
          uv run python scripts/gates/compute_boundary_report.py

      - name: Boundary-Rebuild Gate (delta_bits == 0)
        if: ${{ secrets.PCO_JWKS_B64URL != '' }}
        env:
          STRICT_BOUNDARY_REBUILD: "1"
        run: |
          uv run python scripts/gates/boundary_rebuild_gate.py
      - name: Mark Boundary OK
        if: ${{ success() && secrets.PCO_JWKS_B64URL != '' }}
        run: echo ok > out/pg_boundary_ok.txt

      - name: Validate Policy Pack (--strict)
        run: |
          uv run python scripts/validate_policy_pack.py \
            --schema policies/pco/policy_pack.schema.v0.1.json \
            --pack   policies/pco/policy_pack.v0.1.yaml \
            --format text --strict --list-use-cases

      - name: Generate SBOM (CycloneDX JSON)
        run: |
          uv run python -m pip install -q cyclonedx-bom
          uv run cyclonedx-py --format json --output sbom.json
          test -s sbom.json

      - name: Build provenance (in-toto style)
        run: |
          uv run python scripts/supply_chain/make_provenance.py

      - name: Measure SLO metrics
        run: |
          uv run python scripts/slo_gate/measure_api.py

      - name: SLO Gate
        env:
          SLO_MAX_P95_MS: "250"
          SLO_MAX_ERROR_RATE: "0.005"
        run: |
          uv run python scripts/slo_gate/check_slo.py
      - name: Mark SLO OK
        if: success()
        run: echo ok > out/pg_slo_ok.txt
      - name: Comment PR with Proof Gate ticks
        if: github.event_name == 'pull_request' && always()
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            function tick(p){ try { fs.accessSync(p); return '✅'; } catch(e){ return '❌'; } }
            const lines = [];
            lines.push('### Proof Gate — step ticks');
            lines.push(`Gauge: ${tick('out/pg_gauge_ok.txt')}  Path-Coverage: ${tick('out/pg_pathcov_ok.txt')}  FIN Policies: ${tick('out/pg_fin_ok.txt')}`);
            lines.push(`Bunker: ${tick('out/pg_bunker_ok.txt')}  Roles: ${tick('out/pg_roles_ok.txt')}  Governance: ${tick('out/pg_gov_ok.txt')}`);
            lines.push(`Boundary: ${tick('out/pg_boundary_ok.txt')}  SLO: ${tick('out/pg_slo_ok.txt')}`);
            const body = lines.join('\n');
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body,
            });

      - name: DR Drill (Boundary RTO/RPO)
        env:
          MAX_RTO_SEC: "1800"
          MAX_RPO_SEC: "300"
        run: |
          uv run python scripts/dr/drill_boundary_failure.py --max-rto-sec "$MAX_RTO_SEC" --max-rpo-sec "$MAX_RPO_SEC"

      - name: Install cosign
        uses: sigstore/cosign-installer@v3.7.0

      - name: Cosign sign SBOM (keyless)
        if: github.event_name != 'pull_request'
        run: |
          cosign version
          cosign sign-blob --yes --output-signature sbom.json.sig --output-certificate sbom.json.cert sbom.json
          test -s sbom.json.sig
          test -s sbom.json.cert

      - name: Cosign sign provenance (keyless)
        if: github.event_name != 'pull_request'
        run: |
          cosign sign-blob --yes --output-signature out/provenance.sig --output-certificate out/provenance.cert out/provenance.json
          test -s out/provenance.sig
          test -s out/provenance.cert

      - name: Verify supply-chain artifacts (cosign)
        if: github.event_name != 'pull_request'
        env:
          COSIGN_EXPECT_ISSUER: https://token.actions.githubusercontent.com
          COSIGN_EXPECT_URI_CONTAINS: ${{ github.server_url }}/${{ github.repository }}
        run: |
          uv run python scripts/supply_chain/verify_cosign_artifacts.py --require sbom.json.sig sbom.json.cert out/provenance.sig out/provenance.cert

      - name: Upload supply-chain artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: supply-chain-${{ github.sha }}
          path: |
            sbom.json
            sbom.json.sig
            sbom.json.cert
            out/provenance.json
            out/provenance.sig
            out/provenance.cert

      - name: Generate OpenAPI
        run: |
          uv run python scripts/generate_openapi.py

      - name: Upload OpenAPI
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: openapi-${{ github.sha }}
          path: out/openapi.json

      - name: Verify public bundle (Merkle + Ed25519)
        if: ${{ secrets.PCO_JWKS_B64URL != '' }}
        env:
          PCO_JWKS_B64URL: ${{ secrets.PCO_JWKS_B64URL }}
        run: |
          uv run python scripts/verify_bundle.py \
            --rid demo-001 \
            --bundle-dir ./data/public_pco \
            --pub-b64url "$PCO_JWKS_B64URL"
