# +-------------------------------------------------------------+# |                          CERTEUS                            |# +-------------------------------------------------------------+# | FILE: services/api_gateway/routers/system.py              |# | ROLE: Project module.                                       |# | PLIK: services/api_gateway/routers/system.py              |# | ROLA: Moduł projektu.                                       |# +-------------------------------------------------------------+"""PL: Moduł CERTEUS – uzupełnij opis funkcjonalny.EN: CERTEUS module – please complete the functional description."""# +-------------------------------------------------------------+# |                 CERTEUS - System API Router                 |# +-------------------------------------------------------------+# | PLIK / FILE: services/api_gateway/routers/system.py         |# | ROLA / ROLE: System endpoints (status, plugins, version).   |# +-------------------------------------------------------------+from __future__ import annotationsfrom typing import Any, Iterable, Mapping, castfrom fastapi import APIRouter, Requestrouter = APIRouter()def _list_plugin_names(api: Any) -> list[str]:    """    PL: Bezpieczne pobranie listy pluginów z dowolnego obiektu API.    EN: Safely obtain plugin names from an API-like object.    """    try:        raw_any: Any = api.list_plugins()  # type: ignore[attr-defined]    except Exception:        return []    # Jeśli to mapping, bierzemy klucze i zwracamy listę str    if isinstance(raw_any, Mapping):        keys_iter = cast(Mapping[str, Any], raw_any).keys()        return list(keys_iter)    # Jeśli to dowolny Iterable, konwertujemy elementy do str    if isinstance(raw_any, Iterable):        items_iter = cast(Iterable[Any], raw_any)        return [str(x) for x in items_iter]    return []@router.get("/status", tags=["System"])def status(request: Request) -> dict[str, Any]:    """    PL: Ogólny status serwisu + łatwe echo wersji.    EN: General service status with version echo.    """    app = request.app    ver = getattr(app, "version", None)    return {"status": "ok", "version": ver}@router.get("/plugins", tags=["System"])def plugins(request: Request) -> dict[str, Any]:    """    PL: Zwraca listę załadowanych pluginów.    EN: Returns the list of loaded plugins.    """    app = request.app    api = getattr(app.state, "plugin_api", None)    names = _list_plugin_names(api) if api is not None else []    return {"count": len(names), "plugins": names}@router.get("/ready", tags=["System"])def ready(request: Request) -> dict[str, Any]:    """    PL: Readiness probe – przydatne do orkiestracji.    EN: Readiness probe – useful for orchestration.    """    app = request.app    api = cast(Any, getattr(app.state, "plugin_api", None))    plugins_ok = bool(_list_plugin_names(api)) if api is not None else True    return {"ready": True, "plugins_ok": plugins_ok}