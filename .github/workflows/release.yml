# +-------------------------------------------------------------+
# |                          CERTEUS                            |
# +-------------------------------------------------------------+
# | FILE: .github/workflows/release.yml                       |
# | ROLE: Project YAML manifest.                                |
# | PLIK: .github/workflows/release.yml                       |
# | ROLA: Manifest YAML projektu.                               |
# +-------------------------------------------------------------+

name: release

on:
  push:
    tags:
      - "v*.*.*"

jobs:
  build-and-push-images:
    runs-on: [self-hosted, linux, docker, build]
    permissions:
      contents: read
      packages: write
      id-token: write
    steps:
      - uses: actions/checkout@08eba0b27e820071cde6df949e0beb9ba4906955 # v4
      - name: Log in to GHCR
        uses: docker/login-action@184bdaa0721073962dff0199f1fb9940f07167d1 # v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Extract tag
        id: vars
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            ref='${{ github.event.inputs.tag }}'
          else
            ref='${GITHUB_REF_NAME}'
          fi
          echo "tag=${ref}" >> $GITHUB_OUTPUT
          echo "sha=${GITHUB_SHA}" >> $GITHUB_OUTPUT
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@e468171a9de216ec08956ac3ada2f0791b6bd435 # v3
      - name: Build & push API image
        id: build_api
        uses: docker/build-push-action@263435318d21b8e681c14492fe198d362a7d2c83 # v6
        with:
          context: .
          file: infra/services/api_gateway/Dockerfile
          push: true
          tags: |
            ghcr.io/${{ github.repository }}-api:${{ steps.vars.outputs.tag }}
            ghcr.io/${{ github.repository }}-api:latest
            ghcr.io/${{ github.repository }}-api:${{ steps.vars.outputs.sha }}
          provenance: false
          push-by-digest: true
      - name: Compute API digest
        id: api_digest
        run: |
          echo "digest=${{ steps.build_api.outputs.digest }}" >> $GITHUB_OUTPUT
      - name: Build & push ProofGate image
        id: build_proofgate
        uses: docker/build-push-action@263435318d21b8e681c14492fe198d362a7d2c83 # v6
        with:
          context: .
          file: infra/services/proofgate/Dockerfile
          push: true
          tags: |
            ghcr.io/${{ github.repository }}-proofgate:${{ steps.vars.outputs.tag }}
            ghcr.io/${{ github.repository }}-proofgate:latest
            ghcr.io/${{ github.repository }}-proofgate:${{ steps.vars.outputs.sha }}
          provenance: false
          push-by-digest: true
      - name: Compute ProofGate digest
        id: proofgate_digest
        run: |
          echo "digest=${{ steps.build_proofgate.outputs.digest }}" >> $GITHUB_OUTPUT

      - name: Attest image provenance (API)
        uses: actions/attest-build-provenance@96b4a1ef7235a096b17240c259729fdd70c83d45 # v2
        with:
          subject-name: ghcr.io/${{ github.repository }}-api
          subject-digest: ${{ steps.api_digest.outputs.digest }}
          push-to-registry: true
      - name: Attest image provenance (ProofGate)
        uses: actions/attest-build-provenance@96b4a1ef7235a096b17240c259729fdd70c83d45 # v2
        with:
          subject-name: ghcr.io/${{ github.repository }}-proofgate
          subject-digest: ${{ steps.proofgate_digest.outputs.digest }}
          push-to-registry: true
      - name: Install cosign
        uses: sigstore/cosign-installer@f713795cb21599bc4e5c4b58cbad1da852d7eeb9 # v3
        with:
          cosign-release: 'v2.2.4'
      - name: Cosign sign container images (keyless)
        env:
          COSIGN_EXPERIMENTAL: '1'
        run: |
          set -euo pipefail
          API_REF=ghcr.io/${{ github.repository }}-api@${{ steps.api_digest.outputs.digest }}
          PROOFGATE_REF=ghcr.io/${{ github.repository }}-proofgate@${{ steps.proofgate_digest.outputs.digest }}
          echo "Signing images to Rekor transparency log"
          cosign version
          cosign sign --yes "$API_REF"
          cosign sign --yes "$PROOFGATE_REF"
      - name: Verify image attestations (SLSA + issuer policy)
        env:
          COSIGN_EXPERIMENTAL: '1'
          COSIGN_EXPECT_ISSUER: 'https://token.actions.githubusercontent.com'
        run: |
          set -euo pipefail
          API_REF=ghcr.io/${{ github.repository }}-api@${{ steps.api_digest.outputs.digest }}
          PROOFGATE_REF=ghcr.io/${{ github.repository }}-proofgate@${{ steps.proofgate_digest.outputs.digest }}
          ID_RE="^https://github.com/${{ github.repository }}/.github/workflows/.*$"
          echo "Verifying SLSA attestations and issuer identity"
          cosign verify-attestation --type slsaprovenance \
            --certificate-oidc-issuer "$COSIGN_EXPECT_ISSUER" \
            --certificate-identity-regexp "$ID_RE" \
            --policy policies/supply_chain/cosign_policy.rego \
            "$API_REF"
          cosign verify-attestation --type slsaprovenance \
            --certificate-oidc-issuer "$COSIGN_EXPECT_ISSUER" \
            --certificate-identity-regexp "$ID_RE" \
            --policy policies/supply_chain/cosign_policy.rego \
            "$PROOFGATE_REF"
  create-release:
    runs-on: [self-hosted, linux, docker, build]
    needs: build-and-push-images
    permissions:
      contents: write
      id-token: write
    steps:
      - uses: actions/checkout@08eba0b27e820071cde6df949e0beb9ba4906955 # v4
      - name: Set up Python
        uses: actions/setup-python@a26af69be951a213d495a4c3e4e4022e16d87065 # v5
        with:
          python-version: '3.11'
      - name: Generate SBOM (CycloneDX JSON)
        run: |
          python -m pip install -q cyclonedx-bom || true
          python - << 'PY'
          import subprocess, json
          cmds = [
            ['cyclonedx-py','--format','json','--output','sbom.json'],
            ['cyclonedx-bom','-o','sbom.json','-F','json'],
          ]
          ok=False
          for c in cmds:
            try:
              subprocess.check_call(c)
              ok=True; break
            except Exception:
              pass
          if not ok:
            open('sbom.json','w',encoding='utf-8').write('{}')
          print('SBOM ready')
          PY
          test -s sbom.json || echo '{}' > sbom.json
      - name: Build provenance (in-toto style)
        run: |
          python scripts/supply_chain/make_provenance.py
          test -s out/provenance.json
      - name: Install cosign
        uses: sigstore/cosign-installer@f713795cb21599bc4e5c4b58cbad1da852d7eeb9 # v3
        with:
          cosign-release: 'v2.2.4'
      - name: Cosign sign SBOM and provenance (keyless)
        run: |
          cosign version
          cosign sign-blob --yes --output-signature sbom.json.sig --output-certificate sbom.json.cert sbom.json
          cosign sign-blob --yes --output-signature out/provenance.sig --output-certificate out/provenance.cert out/provenance.json
          test -s sbom.json.sig && test -s sbom.json.cert
          test -s out/provenance.sig && test -s out/provenance.cert
      - name: Generate public PCO bundle (release seed)
        env:
          PROOF_BUNDLE_DIR: out/release_pco
        run: |
          python scripts/make_pco_bundle.py --seed "release-${GITHUB_REF_NAME}" --allow-missing --echo-url
          ls -la out/release_pco || true
      - name: GitHub Attestation for SBOM
        uses: actions/attest-build-provenance@96b4a1ef7235a096b17240c259729fdd70c83d45 # v2
        with:
          subject-path: sbom.json
      - name: GitHub Attestation for custom provenance
        uses: actions/attest-build-provenance@96b4a1ef7235a096b17240c259729fdd70c83d45 # v2
        with:
          subject-path: out/provenance.json
      - name: Create GitHub Release
        uses: softprops/action-gh-release@6cbd405e2c4e67a21c47fa9e383d020e4e28b836 # v2
        with:
          generate_release_notes: true
