# +-------------------------------------------------------------+
# |                          CERTEUS                            |
# +-------------------------------------------------------------+
# | FILE: .github/workflows/publish_public_mirror.yml          |
# | ROLE: Publish sanitized mirror to CERTEUS/certeus-public   |
# +-------------------------------------------------------------+

name: Publish-Public-Mirror

on:
  workflow_run:
    workflows: [Promote-Daily-To-Main]
    types: [completed]
  workflow_dispatch:

jobs:
  mirror:
    if: ${{ (github.event_name == 'workflow_dispatch' || (github.event.workflow_run.conclusion == 'success' && github.event.workflow_run.head_branch == 'work/daily')) && vars.MIRROR_PUBLISH == 'enabled' }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Secret scan (gitleaks)
        if: ${{ false }}
        uses: zricethezav/gitleaks-action@v2.3.7
        with:
          args: detect --redact --no-banner --exit-code 1
      - name: Backup branch protection (mirror)
        env:
          GH_TOKEN: ${{ secrets.ADMIN_TOKEN }}
        run: |
          set -euo pipefail
          gh api repos/CERTEUS/certeus-public/branches/main/protection -H 'Accept: application/vnd.github+json' > bp_before.json
          echo "Saved to bp_before.json"
      - name: Relax branch protection (allow force-push)
        env:
          GH_TOKEN: ${{ secrets.ADMIN_TOKEN }}
        run: |
          set -euo pipefail
          # Extract strict + contexts from snapshot (support both checks/contexts)
          STRICT=$(jq -r '.required_status_checks.strict // true' bp_before.json)
          CTXS=$(jq -r '[ (.required_status_checks.contexts // [])[], (.required_status_checks.checks // [] | map(.context)[]) ] | unique' bp_before.json)
          cat > bp_relaxed.json <<'JSON'
          {
            "required_status_checks": { "strict": true, "contexts": [] },
            "enforce_admins": true,
            "required_pull_request_reviews": { "dismiss_stale_reviews": true },
            "restrictions": null,
            "required_linear_history": false,
            "allow_force_pushes": true,
            "allow_deletions": false,
            "required_conversation_resolution": true
          }
          JSON
          jq --argjson ctxs "$CTXS" --argjson strict "$STRICT" \
             '.required_status_checks.strict=$strict | .required_status_checks.contexts=$ctxs' \
             bp_relaxed.json > bp_relaxed.final.json
          gh api -X PUT repos/CERTEUS/certeus-public/branches/main/protection --input bp_relaxed.final.json -H 'Accept: application/vnd.github+json'
          echo "Branch protection relaxed for publish"
      - name: Build LITE mirror tree and push (hosted)
        env:
          ADMIN_TOKEN: ${{ secrets.ADMIN_TOKEN }}
          PUBLIC_MIRROR_PAT: ${{ secrets.PUBLIC_MIRROR_PAT }}
        run: |
          set -euo pipefail
          MIRROR_DIR=mirror_out
          PUSH_TOKEN="${ADMIN_TOKEN:-${PUBLIC_MIRROR_PAT:-}}"
          if [ -z "$PUSH_TOKEN" ]; then
            echo "No push token (ADMIN_TOKEN or PUBLIC_MIRROR_PAT) available" >&2
            exit 1
          fi
          MIRROR_REMOTE="https://x-access-token:${PUSH_TOKEN}@github.com/CERTEUS/certeus-public.git"

          # 1) Clean and build tree from allowlist
          rm -rf "$MIRROR_DIR"
          mkdir -p "$MIRROR_DIR"
          shopt -s nullglob globstar dotglob
          while IFS= read -r path || [[ -n "${path:-}" ]]; do
            [[ -z "$path" ]] && continue
            [[ "$path" =~ ^# ]] && continue
            for p in $path; do
              [ -e "$p" ] || continue
              rsync -aR "$p" "$MIRROR_DIR"/
            done
          done < tools/automation/public_allowlist.txt

          # 2) Replace public README/mkdocs/license if present
          cp -f tools/automation/mirror/README.public.md "$MIRROR_DIR/README.md" || true
          cp -f tools/automation/mirror/mkdocs.public.yml "$MIRROR_DIR/mkdocs.yml" || true
          cp -f tools/automation/mirror/LICENSE-AGPL-3.0.txt "$MIRROR_DIR/LICENSE" || true

          # 2b) CDN-bust OG/fav in mirror_out (hashed filenames) and patch mkdocs.yml references
          (
            cd "$MIRROR_DIR"
            SHORT_SHA="$(echo "${GITHUB_SHA}" | cut -c1-7)"
            if [ -f docs/assets/og.svg ]; then
              cp docs/assets/og.svg "docs/assets/og.${SHORT_SHA}.svg"
              # Patch OG meta references in mkdocs.yml
              if [ -f mkdocs.yml ]; then
                sed -i "s|/assets/og\.svg|/assets/og.${SHORT_SHA}.svg|g" mkdocs.yml || true
              fi
            fi
            if [ -f docs/assets/favicon.ico ]; then
              cp docs/assets/favicon.ico "docs/assets/favicon.${SHORT_SHA}.ico"
              # Patch favicon reference in mkdocs.yml
              if [ -f mkdocs.yml ]; then
                sed -i "s|favicon: assets/favicon\.ico|favicon: assets/favicon.${SHORT_SHA}.ico|g" mkdocs.yml || true
              fi
            fi
          )

          # 3) PROVENANCE (latest + history)
          ts=$(date -u +%Y-%m-%dT%H:%M:%SZ)
          SHORT_SHA="$(echo "${GITHUB_SHA}" | cut -c1-7)"
          {
            echo "Source: CERTEUS/certeus@${GITHUB_SHA}"
            echo "Published: ${ts}"
            echo "Mode: LITE (allowlist + squash)"
            echo "AssetRev: ${SHORT_SHA}"
          } > "$MIRROR_DIR/PROVENANCE.md"
          if [ ! -f "$MIRROR_DIR/PROVENANCE_HISTORY.md" ]; then
            {
              echo '| Published (UTC) | Source SHA | AssetRev |'
              echo '|---|---|---|'
            } > "$MIRROR_DIR/PROVENANCE_HISTORY.md"
          fi
          echo "| ${ts} | ${GITHUB_SHA} | ${SHORT_SHA} |" >> "$MIRROR_DIR/PROVENANCE_HISTORY.md"

          # 4) Init and push to 'main' with branded author
          cd "$MIRROR_DIR"
          git init
          git checkout -b main
          git add -A
          git -c user.name="Radosław Skarżycki" -c user.email="skarzyckiradoslaw@gmail.com" \
            commit -m "public: clean mirror (squashed)"
          git remote add origin "$MIRROR_REMOTE"
          git push -f origin main
      - name: Secret scan (gitleaks on mirror tree)
        uses: zricethezav/gitleaks-action@v2.3.7
        with:
          args: detect --source mirror_out --redact --no-banner --exit-code 1
      - name: Restore branch protection (mirror)
        if: always()
        env:
          GH_TOKEN: ${{ secrets.ADMIN_TOKEN }}
        run: |
          set -euo pipefail
          # Build a valid restore payload from snapshot
          jq '{
                required_status_checks: {
                  strict: (.required_status_checks.strict // true),
                  contexts: ((.required_status_checks.contexts // []) + ((.required_status_checks.checks // []) | map(.context))) | unique
                },
                enforce_admins: (.enforce_admins.enabled // true),
                required_pull_request_reviews: (if .required_pull_request_reviews then {
                  dismiss_stale_reviews: (.required_pull_request_reviews.dismiss_stale_reviews // true),
                  required_approving_review_count: (.required_pull_request_reviews.required_approving_review_count // 0),
                  require_code_owner_reviews: (.required_pull_request_reviews.require_code_owner_reviews // false),
                  require_last_push_approval: (.required_pull_request_reviews.require_last_push_approval // false)
                } else null end),
                restrictions: null,
                required_linear_history: (.required_linear_history.enabled // true),
                allow_force_pushes: (.allow_force_pushes.enabled // false),
                allow_deletions: (.allow_deletions.enabled // false),
                required_conversation_resolution: (.required_conversation_resolution.enabled // true)
              }' bp_before.json > bp_restore.json
          gh api -X PUT repos/CERTEUS/certeus-public/branches/main/protection --input bp_restore.json -H 'Accept: application/vnd.github+json'
          # Restore signed commits setting explicitly
          SIG=$(jq -r '.required_signatures.enabled // false' bp_before.json)
          if [ "$SIG" = "true" ]; then
            gh api -X POST repos/CERTEUS/certeus-public/branches/main/protection/required_signatures -H 'Accept: application/vnd.github+json' || true
          else
            gh api -X DELETE repos/CERTEUS/certeus-public/branches/main/protection/required_signatures -H 'Accept: application/vnd.github+json' || true
          fi
          echo "Branch protection restored to snapshot (normalized)"
      - name: Post-publish wrap-up (assets + report)
        if: always()
        env:
          GH_TOKEN: ${{ secrets.ADMIN_TOKEN }}
        run: |
          set -euo pipefail
          BASE="https://certeus.github.io/certeus-public"
          SHORT_SHA="$(echo "${GITHUB_SHA}" | cut -c1-7)"
          fav="$BASE/assets/favicon.${SHORT_SHA}.ico"
          og="$BASE/assets/og.${SHORT_SHA}.svg"
          # kick Pages if missing
          curl -sSfI "$fav" >/dev/null || gh workflow run docs-site.yml --repo CERTEUS/certeus-public --ref main || true
          curl -sSfI "$og"  >/dev/null || gh workflow run docs-site.yml --repo CERTEUS/certeus-public --ref main || true
          for i in 1 2 3; do
            sleep 20
            curl -sSfI "$fav" >/dev/null 2>&1 && curl -sSfI "$og" >/dev/null 2>&1 && break || true
          done
          FAV_STATUS=$(curl -sI -o /dev/null -w "%{http_code}" "$fav" || echo 000)
          OG_STATUS=$(curl -sI -o /dev/null -w "%{http_code}" "$og" || echo 000)
          ASSETS_STATUS="favicon=${FAV_STATUS}, og.svg=${OG_STATUS}"
          # Ping sitemaps (best-effort)
          SITEMAP="https://certeus.github.io/certeus-public/sitemap.xml"
          curl -fsS "https://www.google.com/ping?sitemap=${SITEMAP}" || true
          curl -fsS "https://www.bing.com/ping?sitemap=${SITEMAP}" || true
          # Resolve exact last run links (html_url)
          LAST_DOCS_MIRROR=$(gh api repos/CERTEUS/certeus-public/actions/workflows/docs-site.yml/runs -q '.workflow_runs | map(select(.head_branch=="main")) | map(select(.status=="completed")) | .[0].html_url' -f per_page=1 || echo "")
          LAST_DOCS_CORE=$(gh api repos/CERTEUS/certeus/actions/workflows/docs-site.yml/runs -q '.workflow_runs | map(select(.head_branch=="main")) | map(select(.status=="completed")) | .[0].html_url' -f per_page=1 || echo "")
          LAST_CILIGHT=$(gh api repos/CERTEUS/certeus-public/actions/workflows/ci_public_light.yml/runs -q '.workflow_runs | map(select(.head_branch=="main")) | map(select(.status=="completed")) | .[0].html_url' -f per_page=1 || echo "")
          LAST_POL_CORE=$(gh api repos/CERTEUS/certeus/actions/workflows/policies-report.yml/runs -q '.workflow_runs | map(select(.head_branch=="main")) | map(select(.status=="completed")) | .[0].html_url' -f per_page=1 || echo "")
          LAST_POL_MIRROR=$(gh api repos/CERTEUS/certeus-public/actions/workflows/policies-report.yml/runs -q '.workflow_runs | map(select(.head_branch=="main")) | map(select(.status=="completed")) | .[0].html_url' -f per_page=1 || echo "")
          BP_JSON_URL="https://api.github.com/repos/CERTEUS/certeus-public/branches/main/protection"
          BODY=$(cat <<MD
### ✅ Post-publish wrap-up (mirror)

**Pages**
- Core: https://certeus.github.io/certeus  
- Mirror: https://certeus.github.io/certeus-public

**Runs**
- Docs-Site (core): ${LAST_DOCS_CORE}
- Docs-Site (mirror): ${LAST_DOCS_MIRROR}
- CI-Public-Light (mirror): ${LAST_CILIGHT}

**Policies-Report**
- Core: ${LAST_POL_CORE}
- Mirror: ${LAST_POL_MIRROR}

**Branch Protection (mirror, JSON)**
- ${BP_JSON_URL}

**Assets (mirror – CDN-BUST)**
- ${ASSETS_STATUS}

**Provenance**
- Aktualny snapshot: **PROVENANCE.md**  
- Historia publikacji: **PROVENANCE_HISTORY.md**
MD
          )
          gh issue comment 46 -R CERTEUS/certeus --body "$BODY" || true

      # 🧠 Add-on: automatyczne Issue „Release polish (LITE)” w mirrorze
      - name: Open Release polish issue in mirror (once per AssetRev)
        if: always()
        env:
          GH_TOKEN: ${{ secrets.ADMIN_TOKEN }}
        run: |
          set -euo pipefail
          BASE_MIRROR_REPO="CERTEUS/certeus-public"

          # 1) Wyciągnij bieżący AssetRev z PROVENANCE (mirror_out użyty do publikacji)
          REV="$(grep -E '^AssetRev:' mirror_out/PROVENANCE.md | awk '{print $2}')"
          TS="$(grep -E '^Published:' mirror_out/PROVENANCE.md | sed 's/Published: //')"

          # 2) Czy już istnieje otwarte issue dla tego REV?
          FOUND=$(gh api repos/$BASE_MIRROR_REPO/issues \
            -q "[].title" -f state=open -f labels=release,docs,public-lite | grep -c "$REV" || true)
          if [ "$FOUND" -gt 0 ]; then
            echo "Release polish issue for rev=$REV already open. Skipping."
            exit 0
          fi

          # 3) Zbierz linki (ostatnie ukończone runy)
          PAGES_CORE="https://certeus.github.io/certeus"
          PAGES_MIRROR="https://certeus.github.io/certeus-public"
          BP_JSON_URL="https://api.github.com/repos/$BASE_MIRROR_REPO/branches/main/protection"

          DOCS_CORE=$(gh api repos/CERTEUS/certeus/actions/workflows/docs-site.yml/runs \
            -q '.workflow_runs | map(select(.head_branch=="main")) | map(select(.status=="completed")) | .[0].html_url' -f per_page=1)
          DOCS_MIRROR=$(gh api repos/$BASE_MIRROR_REPO/actions/workflows/docs-site.yml/runs \
            -q '.workflow_runs | map(select(.head_branch=="main")) | map(select(.status=="completed")) | .[0].html_url' -f per_page=1)
          CILIGHT=$(gh api repos/$BASE_MIRROR_REPO/actions/workflows/ci_public_light.yml/runs \
            -q '.workflow_runs | map(select(.head_branch=="main")) | map(select(.status=="completed")) | .[0].html_url' -f per_page=1)
          POL_CORE=$(gh api repos/CERTEUS/certeus/actions/workflows/policies-report.yml/runs \
            -q '.workflow_runs | map(select(.head_branch=="main")) | map(select(.status=="completed")) | .[0].html_url' -f per_page=1)
          POL_MIRROR=$(gh api repos/$BASE_MIRROR_REPO/actions/workflows/policies-report.yml/runs \
            -q '.workflow_runs | map(select(.head_branch=="main")) | map(select(.status=="completed")) | .[0].html_url' -f per_page=1)

          # 4) Złóż treść issue (checklista LITE)
          TITLE="Release polish (LITE) – ${TS} – rev ${REV}"
          BODY=$(cat <<'MD'
## ✅ Checklist (LITE)
- [ ] Social preview ustawione (PNG og.png w Settings → General → Social preview)
- [ ] Pages działają (200/OK): strona główna + /api/overview/
- [ ] OG / favicon (CDN-BUST): `og.<rev>.svg` i `favicon.<rev>.ico` = **200/OK**
- [ ] PROVENANCE.md zaktualizowane (Source + Published + AssetRev)
- [ ] PROVENANCE_HISTORY.md dopisany nowy wiersz
- [ ] Policy-Scan = zielone (brak niedozwolonych ścieżek)
- [ ] CI-Public-Light = zielone (link-check)
- [ ] Policies-Report = wygenerowany artefakt
- [ ] README (CTA + kontakt) aktualne

### Linki
- Pages (core): __PAGES_CORE__
- Pages (mirror): __PAGES_MIRROR__
- Docs-Site (core): __DOCS_CORE__
- Docs-Site (mirror): __DOCS_MIRROR__
- CI-Public-Light (mirror): __CILIGHT__
- Policies-Report (core): __POL_CORE__
- Policies-Report (mirror): __POL_MIRROR__
- Branch-Protection (mirror JSON): __BP_JSON_URL__

> rev = `AssetRev` z **PROVENANCE.md**
MD
          )
          BODY="${BODY/__PAGES_CORE__/$PAGES_CORE}"
          BODY="${BODY/__PAGES_MIRROR__/$PAGES_MIRROR}"
          BODY="${BODY/__DOCS_CORE__/$DOCS_CORE}"
          BODY="${BODY/__DOCS_MIRROR__/$DOCS_MIRROR}"
          BODY="${BODY/__CILIGHT__/$CILIGHT}"
          BODY="${BODY/__POL_CORE__/$POL_CORE}"
          BODY="${BODY/__POL_MIRROR__/$POL_MIRROR}"
          BODY="${BODY/__BP_JSON_URL__/$BP_JSON_URL}"
          BODY="${BODY//<rev>/$REV}"

          # 5) Utwórz issue z etykietami
          gh api repos/$BASE_MIRROR_REPO/issues \
            -f title="$TITLE" \
            -f body="$BODY" \
            -f labels="release,docs,public-lite" >/dev/null

          echo "Opened Release polish (LITE) issue for rev=$REV"
      - name: Install git-filter-repo
        if: ${{ false }}
        run: |
          python -m pip install git-filter-repo
      - name: Filter repository to allowlist
        if: ${{ false }}
        run: |
          rm -rf mirror && git clone --mirror . mirror
          cd mirror
          mapfile -t PATHS < <(grep -vE '^(#|\s*$)' ../tools/automation/public_allowlist.txt)
          ARGS=()
          for p in "${PATHS[@]}"; do
            ARGS+=("--path" "$p")
          done
          git filter-repo "${ARGS[@]}"
          git for-each-ref --format='delete %(refname)' refs/original/ | git update-ref --stdin || true
          git repack -Ad && git prune --expire=now || true
      - name: Prepare worktree (convert from bare)
        if: ${{ false }}
        run: |
          set -euo pipefail
          cd mirror
          git config --local core.bare false
          git config --local core.worktree .
          git reset --hard
      - name: Replace README and LICENSE for mirror
        if: ${{ false }}
        run: |
          set -euo pipefail
          test -f tools/automation/mirror/README.public.md || { echo "mirror README asset missing" >&2; exit 1; }
          test -f tools/automation/mirror/LICENSE-AGPL-3.0.txt || { echo "mirror LICENSE asset missing" >&2; exit 1; }
          cd mirror
          git config user.name "CERTEUS Bot"
          git config user.email "bot@users.noreply.github.com"
          cp -f ../tools/automation/mirror/README.public.md README.md
          cp -f ../tools/automation/mirror/LICENSE-AGPL-3.0.txt LICENSE
          git add README.md LICENSE || true
          git commit -m "chore(mirror): apply public README + AGPL license" || true
      - name: Replace mkdocs with public minimal config
        if: ${{ false }}
        run: |
          set -euo pipefail
          test -f tools/automation/mirror/mkdocs.public.yml || { echo "mkdocs.public.yml missing" >&2; exit 1; }
          cd mirror
          cp -f ../tools/automation/mirror/mkdocs.public.yml mkdocs.yml
          git add mkdocs.yml || true
          git commit -m "chore(mirror): apply public mkdocs config" || true
      - name: Squash history to single clean commit
        if: ${{ false }}
        run: |
          set -euo pipefail
          cd mirror
          export GIT_AUTHOR_NAME="Radosław Skarżycki"
          export GIT_AUTHOR_EMAIL="skarzyckiradoslaw@gmail.com"
          export GIT_COMMITTER_NAME="Radosław Skarżycki"
          export GIT_COMMITTER_EMAIL="skarzyckiradoslaw@gmail.com"
          new_commit=$(git commit-tree HEAD^{tree} -m "public: clean mirror (squashed)")
          git update-ref -m "squash" refs/heads/main "$new_commit"
      - name: Push to public repo (force)
        if: ${{ false }}
        env:
          PUBLIC_MIRROR_PAT: ${{ secrets.PUBLIC_MIRROR_PAT }}
        run: |
          cd mirror
          git remote remove origin || true
          git remote add origin https://x-access-token:${PUBLIC_MIRROR_PAT}@github.com/CERTEUS/certeus-public.git
          git push -f origin main
