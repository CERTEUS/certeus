#!/usr/bin/env python3
"""
CERTEUS Security Vulnerability Scanner
Comprehensive security analysis for ultra-scale systems.
"""

import ast
from dataclasses import dataclass
import os
import re


@dataclass
class SecurityIssue:
    """Represents a security vulnerability"""

    file_path: str
    line_number: int
    severity: str  # CRITICAL, HIGH, MEDIUM, LOW
    category: str
    description: str
    code_snippet: str
    recommendation: str


class SecurityVulnerabilityScanner(ast.NodeVisitor):
    """AST-based security vulnerability scanner"""

    def __init__(self):
        self.issues: list[SecurityIssue] = []
        self.current_file = ""
        self.source_lines = []

        # Security patterns
        self.hardcoded_secrets_patterns = [
            r'password\s*=\s*["\'][^"\']+["\']',
            r'secret\s*=\s*["\'][^"\']+["\']',
            r'api_key\s*=\s*["\'][^"\']+["\']',
            r'token\s*=\s*["\'][^"\']+["\']',
            r'key\s*=\s*["\'][^"\']+["\']',
        ]

        self.sql_injection_patterns = [
            r'execute\s*\([^)]*%[sf][^)]*\)',
            r'query\s*\+',
            r'SELECT.*\+',
            r'INSERT.*\+',
            r'UPDATE.*\+',
            r'DELETE.*\+',
        ]

        self.dangerous_functions = {'exec', 'eval', 'compile', '__import__', 'open', 'file', 'input', 'raw_input'}

        self.weak_crypto_patterns = ['md5', 'sha1', 'des', 'rc4']

    def scan_file(self, file_path: str) -> list[SecurityIssue]:
        """Scan a single Python file for security vulnerabilities"""
        self.issues = []
        self.current_file = file_path

        try:
            with open(file_path, encoding='utf-8') as f:
                content = f.read()
                self.source_lines = content.splitlines()

            # Parse AST
            tree = ast.parse(content, filename=file_path)
            self.visit(tree)

            # Pattern-based scanning
            self._scan_hardcoded_secrets(content)
            self._scan_sql_injection(content)
            self._scan_weak_crypto(content)

        except Exception as e:
            self.issues.append(
                SecurityIssue(
                    file_path=file_path,
                    line_number=1,
                    severity="MEDIUM",
                    category="PARSING_ERROR",
                    description=f"Could not parse file: {e}",
                    code_snippet="",
                    recommendation="Fix syntax errors and ensure valid Python code",
                )
            )

        return self.issues

    def visit_Call(self, node: ast.Call):
        """Check function calls for dangerous patterns"""
        if isinstance(node.func, ast.Name):
            func_name = node.func.id

            # Check for dangerous functions
            if func_name in self.dangerous_functions:
                self._add_issue(
                    node.lineno,
                    "HIGH",
                    "DANGEROUS_FUNCTION",
                    f"Use of dangerous function: {func_name}",
                    self._get_code_snippet(node.lineno),
                    f"Avoid using {func_name}. Consider safer alternatives.",
                )

            # Check for subprocess without shell=False
            if func_name in ['subprocess', 'call', 'run', 'Popen']:
                for keyword in node.keywords:
                    if keyword.arg == 'shell' and isinstance(keyword.value, ast.Constant):
                        if keyword.value.value is True:
                            self._add_issue(
                                node.lineno,
                                "CRITICAL",
                                "SHELL_INJECTION",
                                "subprocess call with shell=True",
                                self._get_code_snippet(node.lineno),
                                "Use shell=False and pass commands as lists",
                            )

        self.generic_visit(node)

    def visit_Str(self, node: ast.Str):
        """Check string literals for potential secrets"""
        if hasattr(node, 's'):
            content = node.s.lower()

            # Check for potential secrets in strings
            if any(keyword in content for keyword in ['password', 'secret', 'key', 'token']):
                if len(content) > 5 and not content.isspace():
                    self._add_issue(
                        node.lineno,
                        "HIGH",
                        "POTENTIAL_SECRET",
                        "String containing potential secret",
                        self._get_code_snippet(node.lineno),
                        "Use environment variables or secure configuration",
                    )

        self.generic_visit(node)

    def visit_Assign(self, node: ast.Assign):
        """Check assignments for hardcoded credentials"""
        for target in node.targets:
            if isinstance(target, ast.Name):
                var_name = target.id.lower()

                # Check for credential-like variable names
                if any(keyword in var_name for keyword in ['password', 'secret', 'key', 'token']):
                    if isinstance(node.value, ast.Str):
                        self._add_issue(
                            node.lineno,
                            "CRITICAL",
                            "HARDCODED_CREDENTIAL",
                            f"Hardcoded credential in variable: {target.id}",
                            self._get_code_snippet(node.lineno),
                            "Use environment variables or secure configuration management",
                        )

        self.generic_visit(node)

    def _scan_hardcoded_secrets(self, content: str):
        """Scan for hardcoded secrets using regex patterns"""
        lines = content.splitlines()

        for i, line in enumerate(lines, 1):
            for pattern in self.hardcoded_secrets_patterns:
                if re.search(pattern, line, re.IGNORECASE):
                    self._add_issue(
                        i,
                        "CRITICAL",
                        "HARDCODED_SECRET",
                        "Hardcoded secret detected",
                        line.strip(),
                        "Use environment variables or secure vault",
                    )

    def _scan_sql_injection(self, content: str):
        """Scan for SQL injection vulnerabilities"""
        lines = content.splitlines()

        for i, line in enumerate(lines, 1):
            for pattern in self.sql_injection_patterns:
                if re.search(pattern, line, re.IGNORECASE):
                    self._add_issue(
                        i,
                        "CRITICAL",
                        "SQL_INJECTION",
                        "Potential SQL injection vulnerability",
                        line.strip(),
                        "Use parameterized queries or ORM",
                    )

    def _scan_weak_crypto(self, content: str):
        """Scan for weak cryptographic algorithms"""
        lines = content.splitlines()

        for i, line in enumerate(lines, 1):
            for weak_algo in self.weak_crypto_patterns:
                if weak_algo in line.lower():
                    self._add_issue(
                        i,
                        "MEDIUM",
                        "WEAK_CRYPTO",
                        f"Weak cryptographic algorithm: {weak_algo}",
                        line.strip(),
                        "Use stronger algorithms like SHA-256, AES",
                    )

    def _add_issue(
        self, line_number: int, severity: str, category: str, description: str, code_snippet: str, recommendation: str
    ):
        """Add a security issue to the list"""
        self.issues.append(
            SecurityIssue(
                file_path=self.current_file,
                line_number=line_number,
                severity=severity,
                category=category,
                description=description,
                code_snippet=code_snippet,
                recommendation=recommendation,
            )
        )

    def _get_code_snippet(self, line_number: int, context: int = 1) -> str:
        """Get code snippet around the line"""
        start = max(0, line_number - context - 1)
        end = min(len(self.source_lines), line_number + context)

        lines = []
        for i in range(start, end):
            prefix = ">>> " if i == line_number - 1 else "    "
            lines.append(f"{prefix}{self.source_lines[i]}")

        return "\n".join(lines)


def scan_directory(directory: str) -> dict[str, list[SecurityIssue]]:
    """Scan all Python files in directory for security issues"""
    scanner = SecurityVulnerabilityScanner()
    results = {}

    for root, _, files in os.walk(directory):
        for file in files:
            if file.endswith('.py'):
                file_path = os.path.join(root, file)
                issues = scanner.scan_file(file_path)
                if issues:
                    results[file_path] = issues

    return results


def print_security_report(results: dict[str, list[SecurityIssue]]):
    """Print comprehensive security analysis report"""
    total_issues = sum(len(issues) for issues in results.values())
    severity_counts = {'CRITICAL': 0, 'HIGH': 0, 'MEDIUM': 0, 'LOW': 0}
    category_counts = {}

    print("=" * 80)
    print("🔒 CERTEUS SECURITY VULNERABILITY ANALYSIS REPORT")
    print("=" * 80)

    if not results:
        print("✅ No security vulnerabilities detected!")
        return

    # Count issues by severity and category
    for issues in results.values():
        for issue in issues:
            severity_counts[issue.severity] += 1
            category_counts[issue.category] = category_counts.get(issue.category, 0) + 1

    print("\n📊 SUMMARY:")
    print(f"   Total Issues: {total_issues}")
    print(f"   Files Affected: {len(results)}")
    print(f"   🔴 CRITICAL: {severity_counts['CRITICAL']}")
    print(f"   🟠 HIGH: {severity_counts['HIGH']}")
    print(f"   🟡 MEDIUM: {severity_counts['MEDIUM']}")
    print(f"   🔵 LOW: {severity_counts['LOW']}")

    print("\n🏷️  ISSUE CATEGORIES:")
    for category, count in sorted(category_counts.items(), key=lambda x: x[1], reverse=True):
        print(f"   {category}: {count}")

    print("\n📄 DETAILED FINDINGS:")
    print("-" * 80)

    # Sort files by number of critical issues
    sorted_files = sorted(
        results.items(), key=lambda x: sum(1 for issue in x[1] if issue.severity == 'CRITICAL'), reverse=True
    )

    for file_path, issues in sorted_files:
        print(f"\n📁 {os.path.basename(file_path)}")
        print(f"   Path: {file_path}")
        print(f"   Issues: {len(issues)}")

        # Group issues by severity
        for severity in ['CRITICAL', 'HIGH', 'MEDIUM', 'LOW']:
            severity_issues = [issue for issue in issues if issue.severity == severity]

            if severity_issues:
                emoji = {'CRITICAL': '🔴', 'HIGH': '🟠', 'MEDIUM': '🟡', 'LOW': '🔵'}[severity]
                print(f"\n   {emoji} {severity} ISSUES ({len(severity_issues)}):")

                for issue in severity_issues:
                    print(f"      Line {issue.line_number}: {issue.description}")
                    print(f"      Category: {issue.category}")
                    print(f"      Code: {issue.code_snippet}")
                    print(f"      Fix: {issue.recommendation}")
                    print()


if __name__ == "__main__":
    # Scan CERTEUS project
    certeus_dir = "f:/projekty/control/workspaces/certeus"

    print("🔍 Starting CERTEUS Security Vulnerability Scan...")
    results = scan_directory(certeus_dir)
    print_security_report(results)

    print("\n⚡ Security analysis completed!")
