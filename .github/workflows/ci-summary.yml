# +-------------------------------------------------------------+
# |                          CERTEUS                            |
# +-------------------------------------------------------------+
# | FILE: .github/workflows/ci-summary.yml                     |
# | ROLE: Project YAML manifest.                                |
# | PLIK: .github/workflows/ci-summary.yml                     |
# | ROLA: Manifest YAML projektu.                               |
# +-------------------------------------------------------------+

name: ci-gates-summary

on:
  workflow_run:
    workflows:
      - asset-guard
      - Gauge-Gate
      - Path-Coverage-Gate
      - Boundary-Rebuild-Gate
    types: [completed]

permissions:
  contents: read
  pull-requests: write
  checks: read

jobs:
  summarize:
    runs-on: ubuntu-latest
    steps:
      - name: Summarize CI Gates status on PR
        uses: actions/github-script@v7
        with:
          script: |
            const pr = (context.payload.workflow_run.pull_requests || [])[0];
            if (!pr) {
              core.info('No PR associated with this workflow_run (likely push to branch). Skipping.');
              return;
            }
            const owner = context.repo.owner;
            const repo = context.repo.repo;
            const prNumber = pr.number;
            const refSha = context.payload.workflow_run.head_sha;

            // Fetch check runs for this commit
            const checks = await github.rest.checks.listForRef({ owner, repo, ref: refSha, per_page: 100 });
            const runs = checks.data.check_runs || [];

            // Map relevant jobs to friendly names
            const targets = [
              { key: 'check-assets', label: 'asset-guard' },
              { key: 'gauge-gate', label: 'Gauge-Gate' },
              { key: 'path-coverage', label: 'Path-Coverage-Gate' },
              { key: 'boundary-rebuild', label: 'Boundary-Rebuild-Gate' },
            ];

            function pickRun(nameKey) {
              // Find the latest check_run whose name contains nameKey
              const cand = runs.filter(r => (r.name || '').toLowerCase().includes(nameKey));
              // Prefer completed ones
              cand.sort((a,b) => (a.completed_at||'').localeCompare(b.completed_at||''));
              return cand.length ? cand[cand.length-1] : null;
            }

            const lines = [];
            for (const t of targets) {
              const r = pickRun(t.key);
              let status = 'pending';
              let url = '';
              if (r) {
                status = r.conclusion || r.status || 'pending';
                url = r.html_url || r.details_url || '';
              }
              const emoji = status === 'success' ? '✅' : (status === 'failure' || status === 'timed_out' || status === 'cancelled' ? '❌' : '⏳');
              lines.push(`- ${emoji} ${t.label}: ${status}${url ? ` ([details](${url}))` : ''}`);
            }

            const body = `### CI Gates Summary\n\n${lines.join('\n')}\n\n_commit: ${refSha.substring(0,7)}_`;

            // Upsert comment
            const existing = await github.rest.issues.listComments({ owner, repo, issue_number: prNumber, per_page: 100 });
            const bot = 'github-actions[bot]';
            const marker = '### CI Gates Summary';
            const found = (existing.data || []).find(c => c.user && c.user.login === bot && (c.body || '').startsWith(marker));
            if (found) {
              await github.rest.issues.updateComment({ owner, repo, comment_id: found.id, body });
              core.info('Updated existing CI summary comment.');
            } else {
              await github.rest.issues.createComment({ owner, repo, issue_number: prNumber, body });
              core.info('Created new CI summary comment.');
            }
