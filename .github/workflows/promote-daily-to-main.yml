# +-------------------------------------------------------------+
# |                          CERTEUS                            |
# +-------------------------------------------------------------+
# | FILE: .github/workflows/promote-daily-to-main.yml          |
# | ROLE: Auto-promote work/daily to main (gated by CI)         |
# | PLIK: .github/workflows/promote-daily-to-main.yml          |
# | ROLA: Auto-promocja work/daily â†’ main (po zielonym CI)      |
# +-------------------------------------------------------------+

name: Promote-Daily-To-Main

on:
  workflow_run:
    workflows:
      - ci-gates
    types: [completed]
  push:
    branches: [ work/daily ]
  workflow_dispatch:

permissions:
  contents: write
  pull-requests: write
  actions: read

jobs:
  promote:
    runs-on: self-hosted
    steps:
      - name: Decide whether to evaluate promotion
        id: cond
        shell: bash
        run: |
          if [ "${{ github.event_name }}" = "workflow_run" ]; then
            if [ "${{ github.event.workflow_run.head_branch }}" = "work/daily" ] && [ "${{ github.event.workflow_run.conclusion }}" = "success" ]; then
              echo "ok=true" >> $GITHUB_OUTPUT
            else
              echo "ok=false" >> $GITHUB_OUTPUT
            fi
          elif [ "${{ github.event_name }}" = "push" ]; then
            if [ "${{ github.ref }}" = "refs/heads/work/daily" ]; then
              echo "ok=true" >> $GITHUB_OUTPUT
            else
              echo "ok=false" >> $GITHUB_OUTPUT
            fi
          else
            # workflow_dispatch
            echo "ok=true" >> $GITHUB_OUTPUT
          fi
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Configure git user
        shell: bash
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
      - name: Determine SHA for evaluation
        id: sha
        if: steps.cond.outputs.ok == 'true'
        shell: bash
        run: |
          if [ "${{ github.event_name }}" = "workflow_run" ]; then
            echo "sha=${{ github.event.workflow_run.head_sha }}" >> $GITHUB_OUTPUT
          else
            echo "sha=${{ github.sha }}" >> $GITHUB_OUTPUT
          fi
      - name: Determine if weekly promotion is requested
        id: marker
        if: steps.cond.outputs.ok == 'true'
        shell: bash
        run: |
          set -euo pipefail
          SHA='${{ steps.sha.outputs.sha }}'
          # Read commit message for head SHA
          MSG=$(git show -s --format=%B "$SHA")
          echo "Commit message for $SHA:"; echo "$MSG"
          # Weekly promotion marker policy:
          # - Include "[week-end]" anywhere in the message, OR
          # - Include a trailer line like: weekly-promote: true
          if echo "$MSG" | grep -Eqi '\[week-end\]|^weekly-promote:\s*(true|1)'; then
            echo "promote=true" >> $GITHUB_OUTPUT
          else
            echo "promote=false" >> $GITHUB_OUTPUT
          fi
      # ci-gates conclusion is already 'success' by job condition above${insert}
      - name: Set up Python
        if: steps.cond.outputs.ok == 'true' && steps.marker.outputs.promote == 'true'
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      - name: Append WORKLOG on work/daily (pre-merge)
        if: steps.cond.outputs.ok == 'true' && steps.marker.outputs.promote == 'true'
        env:
          SHA: ${{ github.event.workflow_run.head_sha }}
          ACTOR: ${{ github.actor }}
        shell: bash
        run: |
          set -euo pipefail
          git checkout work/daily
          SUMMARY="auto-promote: ${SHA} (gates green)"
          DETAILS=$'Gates: Proof Gate, asset-guard, Gauge-Gate, Path-Coverage-Gate, Boundary-Rebuild-Gate\nActor: '${ACTOR}
          python scripts/worklog/update_worklog.py --summary "$SUMMARY" --details "$DETAILS"
          git add WORKLOG.md
          git commit -m "chore(worklog): ${SUMMARY}" || true
          git push origin work/daily || true
      - name: Fast-forward main to work/daily (if possible)
        if: steps.cond.outputs.ok == 'true' && steps.marker.outputs.promote == 'true'
        id: ff
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        shell: bash
        run: |
          set -euo pipefail
          git fetch origin
          # Ensure branches are up-to-date
          git checkout main
          git reset --hard origin/main
          git merge --ff-only origin/work/daily && {
            echo "ff=true" >> $GITHUB_OUTPUT
            git push origin main
            exit 0
          } || echo "No fast-forward possible; skipping (PR path disabled)."
          echo "ff=false" >> $GITHUB_OUTPUT
      - name: Create or auto-merge PR (work/daily -> main)
        if: steps.cond.outputs.ok == 'true' && steps.marker.outputs.promote == 'true' && steps.ff.outputs.ff == 'false'
        uses: actions/github-script@v7
        with:
          script: |
            const owner = context.repo.owner;
            const repo = context.repo.repo;
            // Find existing PR
            const list = await github.rest.pulls.list({ owner, repo, state: 'open', base: 'main', head: owner+':work/daily', per_page: 1 });
            let pr = list.data[0];
            if (!pr) {
              const created = await github.rest.pulls.create({ owner, repo, base: 'main', head: 'work/daily', title: 'Promote work/daily to main', body: 'Auto-promotion after green CI.' });
              pr = created.data;
            }
            // Try to enable auto-merge (squash). Requires GraphQL.
            try {
              await github.graphql(`mutation($prId: ID!) { enablePullRequestAutoMerge(input: { pullRequestId: $prId, mergeMethod: SQUASH }) { clientMutationId } }`, { prId: pr.node_id });
            } catch (e) {
              core.warning('Could not enable auto-merge: ' + (e?.message || e));
            }
