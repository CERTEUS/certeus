# +-------------------------------------------------------------+
# |                          CERTEUS                            |
# +-------------------------------------------------------------+
# | FILE: .github/workflows/release.yml                       |
# | ROLE: Project YAML manifest.                                |
# | PLIK: .github/workflows/release.yml                       |
# | ROLA: Manifest YAML projektu.                               |
# +-------------------------------------------------------------+

name: release

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:
    inputs:
      tag:
        description: 'Release tag (e.g., v1.2.3 or v0.0.0-dev)'
        required: true
        type: string

jobs:
  build-and-push-images:
    runs-on: [self-hosted, linux, docker, build]
    permissions:
      contents: read
      packages: write
    steps:
      - uses: actions/checkout@v4
      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Extract tag
        id: vars
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            ref='${{ github.event.inputs.tag }}'
          else
            ref='${GITHUB_REF_NAME}'
          fi
          echo "tag=${ref}" >> $GITHUB_OUTPUT
          echo "sha=${GITHUB_SHA}" >> $GITHUB_OUTPUT
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Build & push API image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: infra/services/api_gateway/Dockerfile
          push: true
          tags: |
            ghcr.io/${{ github.repository }}-api:${{ steps.vars.outputs.tag }}
            ghcr.io/${{ github.repository }}-api:latest
            ghcr.io/${{ github.repository }}-api:${{ steps.vars.outputs.sha }}
      - name: Build & push ProofGate image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: infra/services/proofgate/Dockerfile
          push: true
          tags: |
            ghcr.io/${{ github.repository }}-proofgate:${{ steps.vars.outputs.tag }}
            ghcr.io/${{ github.repository }}-proofgate:latest
            ghcr.io/${{ github.repository }}-proofgate:${{ steps.vars.outputs.sha }}
  create-release:
    runs-on: [self-hosted, linux, docker, build]
    needs: build-and-push-images
    permissions:
      contents: write
      id-token: write
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      - name: Generate SBOM (CycloneDX JSON)
        run: |
          python -m pip install -q cyclonedx-bom || true
          python - << 'PY'
          import subprocess, json
          cmds = [
            ['cyclonedx-py','--format','json','--output','sbom.json'],
            ['cyclonedx-bom','-o','sbom.json','-F','json'],
          ]
          ok=False
          for c in cmds:
            try:
              subprocess.check_call(c)
              ok=True; break
            except Exception:
              pass
          if not ok:
            open('sbom.json','w',encoding='utf-8').write('{}')
          print('SBOM ready')
          PY
          test -s sbom.json || echo '{}' > sbom.json
      - name: Build provenance (in-toto style)
        run: |
          python scripts/supply_chain/make_provenance.py
          test -s out/provenance.json
      - name: Install cosign
        uses: sigstore/cosign-installer@v3
        with:
          cosign-release: 'v2.2.4'
      - name: Cosign sign SBOM and provenance (keyless)
        run: |
          cosign version
          cosign sign-blob --yes --output-signature sbom.json.sig --output-certificate sbom.json.cert sbom.json
          cosign sign-blob --yes --output-signature out/provenance.sig --output-certificate out/provenance.cert out/provenance.json
          test -s sbom.json.sig && test -s sbom.json.cert
          test -s out/provenance.sig && test -s out/provenance.cert
      - name: Generate public PCO bundle (release seed)
        env:
          PROOF_BUNDLE_DIR: out/release_pco
        run: |
          python scripts/make_pco_bundle.py --seed "release-${GITHUB_REF_NAME}" --allow-missing --echo-url
          ls -la out/release_pco || true
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          generate_release_notes: true
          files: |
            sbom.json
            sbom.json.sig
            sbom.json.cert
            out/provenance.json
            out/provenance.sig
            out/provenance.cert
            out/release_pco/*.json

